
MFLIGHT_V000001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b254  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800b3f8  0800b3f8  0001b3f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7fc  0800b7fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7fc  0800b7fc  0001b7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b804  0800b804  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b804  0800b804  0001b804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b808  0800b808  0001b808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b80c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  200001e0  0800b9ec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  0800b9ec  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c5d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002624  00000000  00000000  00033e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00036498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  000374e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d53  00000000  00000000  00038468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e89  00000000  00000000  000501bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092830  00000000  00000000  00063044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5874  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005550  00000000  00000000  000f58c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b3dc 	.word	0x0800b3dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800b3dc 	.word	0x0800b3dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MPU6050_initialise>:
 */

//INCLUDES
#include "MPU6050.h"

uint8_t MPU6050_initialise(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]

	// set up sensor
	HAL_Delay(100);
 8000f5a:	2064      	movs	r0, #100	; 0x64
 8000f5c:	f001 ff52 	bl	8002e04 <HAL_Delay>

//set struct params
	dev->i2cHandle = i2cHandle; // dont know check this one
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	601a      	str	r2, [r3, #0]
	dev->gyro_ds[0] = 0.0f;     // set all values to zero for gyro
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
	dev->gyro_ds[1] = 0.0f;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
	dev->gyro_ds[2] = 0.0f;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
	dev->acc_ms2[0] = 0.0f;     // set all values to zero for acc
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
	dev->acc_ms2[1] = 0.0f;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
	dev->acc_ms2[2] = 0.0f;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]

	uint8_t errnum = 0;         // keep track of errors
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]

	HAL_StatusTypeDef status;  // define a status to debug

	// check ID of the device, if not ok, exit init func
	uint8_t regData;
	status = MPU6050_read_REG(dev, MPU6050_RA_DEVID, &regData); // why so often HAL_BUSY?
 8000f9a:	f107 030d 	add.w	r3, r7, #13
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	2175      	movs	r1, #117	; 0x75
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f8ce 	bl	8001144 <MPU6050_read_REG>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73bb      	strb	r3, [r7, #14]
	errnum += (status != HAL_OK);
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf14      	ite	ne
 8000fb2:	2301      	movne	r3, #1
 8000fb4:	2300      	moveq	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	73fb      	strb	r3, [r7, #15]

	if (regData != 0x68){
 8000fc0:	7b7b      	ldrb	r3, [r7, #13]
 8000fc2:	2b68      	cmp	r3, #104	; 0x68
 8000fc4:	d001      	beq.n	8000fca <MPU6050_initialise+0x7a>
	return status;             // if device ID not ok
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	e069      	b.n	800109e <MPU6050_initialise+0x14e>

	// config MPU6050


    // wake up sensor
	regData = 0x00;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	737b      	strb	r3, [r7, #13]
	status = MPU6050_write_REG(dev, MPU6050_RA_PWR_MGMT_1, &regData);
 8000fce:	f107 030d 	add.w	r3, r7, #13
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	216b      	movs	r1, #107	; 0x6b
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f8f1 	bl	80011be <MPU6050_write_REG>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	73bb      	strb	r3, [r7, #14]
	errnum += (status != HAL_OK);
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bf14      	ite	ne
 8000fe6:	2301      	movne	r3, #1
 8000fe8:	2300      	moveq	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	461a      	mov	r2, r3
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	73fb      	strb	r3, [r7, #15]

	// no DLPF 0x07, DLPF 0x00
	regData = 0x07;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	737b      	strb	r3, [r7, #13]
	status = MPU6050_write_REG(dev, MPU6050_RA_CONFIG, &regData);
 8000ff8:	f107 030d 	add.w	r3, r7, #13
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	211a      	movs	r1, #26
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f8dc 	bl	80011be <MPU6050_write_REG>
 8001006:	4603      	mov	r3, r0
 8001008:	73bb      	strb	r3, [r7, #14]
	errnum += (status != HAL_OK);
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf14      	ite	ne
 8001010:	2301      	movne	r3, #1
 8001012:	2300      	moveq	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	461a      	mov	r2, r3
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	4413      	add	r3, r2
 800101c:	73fb      	strb	r3, [r7, #15]

	// +-16g
	regData = (0x03 << 3);
 800101e:	2318      	movs	r3, #24
 8001020:	737b      	strb	r3, [r7, #13]
	status = MPU6050_write_REG(dev, MPU6050_RA_ACCEL_CONFIG, &regData);
 8001022:	f107 030d 	add.w	r3, r7, #13
 8001026:	461a      	mov	r2, r3
 8001028:	211c      	movs	r1, #28
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f8c7 	bl	80011be <MPU6050_write_REG>
 8001030:	4603      	mov	r3, r0
 8001032:	73bb      	strb	r3, [r7, #14]
	errnum += (status != HAL_OK);
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf14      	ite	ne
 800103a:	2301      	movne	r3, #1
 800103c:	2300      	moveq	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	4413      	add	r3, r2
 8001046:	73fb      	strb	r3, [r7, #15]


	// 8KHZ sample rate
	regData = 0x00;
 8001048:	2300      	movs	r3, #0
 800104a:	737b      	strb	r3, [r7, #13]
	status = MPU6050_write_REG(dev, MPU6050_RA_SMPLRT_DIV, &regData);
 800104c:	f107 030d 	add.w	r3, r7, #13
 8001050:	461a      	mov	r2, r3
 8001052:	2119      	movs	r1, #25
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f8b2 	bl	80011be <MPU6050_write_REG>
 800105a:	4603      	mov	r3, r0
 800105c:	73bb      	strb	r3, [r7, #14]
	errnum += (status != HAL_OK);
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf14      	ite	ne
 8001064:	2301      	movne	r3, #1
 8001066:	2300      	moveq	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	461a      	mov	r2, r3
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	4413      	add	r3, r2
 8001070:	73fb      	strb	r3, [r7, #15]

	// -+250d/s regData = (0x00 << 0);
	regData = (0x02 << 3); // +-1000d/s
 8001072:	2310      	movs	r3, #16
 8001074:	737b      	strb	r3, [r7, #13]
	status = MPU6050_write_REG(dev, MPU6050_REG_GYRO_CONFIG, &regData);
 8001076:	f107 030d 	add.w	r3, r7, #13
 800107a:	461a      	mov	r2, r3
 800107c:	211b      	movs	r1, #27
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f89d 	bl	80011be <MPU6050_write_REG>
 8001084:	4603      	mov	r3, r0
 8001086:	73bb      	strb	r3, [r7, #14]
	errnum += (status != HAL_OK);
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	2b00      	cmp	r3, #0
 800108c:	bf14      	ite	ne
 800108e:	2301      	movne	r3, #1
 8001090:	2300      	moveq	r3, #0
 8001092:	b2db      	uxtb	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	4413      	add	r3, r2
 800109a:	73fb      	strb	r3, [r7, #15]




	return errnum;               // 0 if all ok
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <MPU6050_read_gyro>:
	dev->acc_ms2[1] = (9.82f/2048.0f) * raw_acc_y;
	dev->acc_ms2[2] = (9.82f/2048.0f) * raw_acc_z;

}

void MPU6050_read_gyro(MPU6050 *dev){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

	// each axis is composed of 16bits from two registers (8bit-each)
	uint8_t regData[6];

	// read acc from XOUT_H and up to ZOUT_L (6 bytes)
	MPU6050_read_REGS(dev, MPU6050_REG_GYRO_XOUT_H, regData, 6);
 80010b0:	f107 020c 	add.w	r2, r7, #12
 80010b4:	2306      	movs	r3, #6
 80010b6:	2143      	movs	r1, #67	; 0x43
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f85f 	bl	800117c <MPU6050_read_REGS>

	// MSBs shifted into a int16_t then add LSBs at end
	int16_t raw_gyro_x;
	int16_t raw_gyro_y;
	int16_t raw_gyro_z;
	raw_gyro_x = ( (int16_t) regData[0] ) << 8 |  regData[1];
 80010be:	7b3b      	ldrb	r3, [r7, #12]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	7b7b      	ldrb	r3, [r7, #13]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	82fb      	strh	r3, [r7, #22]
	raw_gyro_y = ( (int16_t) regData[2] ) << 8 |  regData[3];
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	82bb      	strh	r3, [r7, #20]
	raw_gyro_z = ( (int16_t) regData[4] ) << 8 |  regData[5];
 80010da:	7c3b      	ldrb	r3, [r7, #16]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	7c7b      	ldrb	r3, [r7, #17]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	827b      	strh	r3, [r7, #18]


	// set dev measure variables
	dev->gyro_ds[0] = (1.0f/32.8f) * (float) raw_gyro_x;
 80010e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001140 <MPU6050_read_gyro+0x98>
 80010f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->gyro_ds[1] = (1.0f/32.8f) * (float) raw_gyro_y;
 8001102:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001140 <MPU6050_read_gyro+0x98>
 8001112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->gyro_ds[2] = (1.0f/32.8f) * (float) raw_gyro_z;
 800111c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001128:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001140 <MPU6050_read_gyro+0x98>
 800112c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	edc3 7a03 	vstr	s15, [r3, #12]




}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	3cf9c190 	.word	0x3cf9c190

08001144 <MPU6050_read_REG>:



//LOW LEVEL FUNCTIONS

HAL_StatusTypeDef MPU6050_read_REG(MPU6050 *dev, uint8_t reg, uint8_t *data){
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af04      	add	r7, sp, #16
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	460b      	mov	r3, r1
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	72fb      	strb	r3, [r7, #11]

	uint8_t del = 10;
 8001152:	230a      	movs	r3, #10
 8001154:	75fb      	strb	r3, [r7, #23]
return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1 ,del);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	7afb      	ldrb	r3, [r7, #11]
 800115c:	b29a      	uxth	r2, r3
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	9302      	str	r3, [sp, #8]
 8001162:	2301      	movs	r3, #1
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	21d0      	movs	r1, #208	; 0xd0
 800116e:	f002 ff85 	bl	800407c <HAL_I2C_Mem_Read>
 8001172:	4603      	mov	r3, r0

}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <MPU6050_read_REGS>:

HAL_StatusTypeDef MPU6050_read_REGS(MPU6050 *dev, uint8_t reg, uint8_t *data, uint8_t length){
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af04      	add	r7, sp, #16
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	461a      	mov	r2, r3
 8001188:	460b      	mov	r3, r1
 800118a:	72fb      	strb	r3, [r7, #11]
 800118c:	4613      	mov	r3, r2
 800118e:	72bb      	strb	r3, [r7, #10]
	uint8_t del = 10;
 8001190:	230a      	movs	r3, #10
 8001192:	75fb      	strb	r3, [r7, #23]
return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, length ,del);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	7afb      	ldrb	r3, [r7, #11]
 800119a:	b299      	uxth	r1, r3
 800119c:	7abb      	ldrb	r3, [r7, #10]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	7dfa      	ldrb	r2, [r7, #23]
 80011a2:	9202      	str	r2, [sp, #8]
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	460a      	mov	r2, r1
 80011ae:	21d0      	movs	r1, #208	; 0xd0
 80011b0:	f002 ff64 	bl	800407c <HAL_I2C_Mem_Read>
 80011b4:	4603      	mov	r3, r0

}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <MPU6050_write_REG>:

HAL_StatusTypeDef MPU6050_write_REG(MPU6050 *dev, uint8_t reg, uint8_t *data){
 80011be:	b580      	push	{r7, lr}
 80011c0:	b08a      	sub	sp, #40	; 0x28
 80011c2:	af04      	add	r7, sp, #16
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	460b      	mov	r3, r1
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	72fb      	strb	r3, [r7, #11]
	uint8_t del = 10;
 80011cc:	230a      	movs	r3, #10
 80011ce:	75fb      	strb	r3, [r7, #23]
return HAL_I2C_Mem_Write(dev->i2cHandle, MPU6050_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, del);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	21d0      	movs	r1, #208	; 0xd0
 80011e8:	f002 fe4e 	bl	8003e88 <HAL_I2C_Mem_Write>
 80011ec:	4603      	mov	r3, r0

}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <filter_init>:
 */

#include "filter.h"

// initialise filter with cutoff and dt
void filter_init(filter* filt, float cutoff, float dt){
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	ed87 0a02 	vstr	s0, [r7, #8]
 8001204:	edc7 0a01 	vstr	s1, [r7, #4]

	float RC = 1.0f / (6.28318530718f * cutoff);
 8001208:	edd7 7a02 	vldr	s15, [r7, #8]
 800120c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001270 <filter_init+0x78>
 8001210:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800121c:	edc7 7a05 	vstr	s15, [r7, #20]
	filt->coeff[0] = dt / (RC + dt);
 8001220:	ed97 7a05 	vldr	s14, [r7, #20]
 8001224:	edd7 7a01 	vldr	s15, [r7, #4]
 8001228:	ee37 7a27 	vadd.f32	s14, s14, s15
 800122c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	edc3 7a00 	vstr	s15, [r3]
	filt->coeff[1] = RC / (RC + dt);
 800123a:	ed97 7a05 	vldr	s14, [r7, #20]
 800123e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001242:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001246:	edd7 6a05 	vldr	s13, [r7, #20]
 800124a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	edc3 7a01 	vstr	s15, [r3, #4]
	filt->out[0] = 0.0f;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
	filt->out[1] = 0.0f;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
}
 8001264:	bf00      	nop
 8001266:	371c      	adds	r7, #28
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	40c90fdb 	.word	0x40c90fdb

08001274 <filter_apply>:


// apply filter on sample
float filter_apply(filter* filt, float input){
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	ed87 0a00 	vstr	s0, [r7]

	// Note: current out = out[0]
	filt->out[1] = filt->out[0];
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	60da      	str	r2, [r3, #12]
	filt->out[0] = filt->coeff[0] * input + filt->coeff[1] * filt->out[1];
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	ed93 7a00 	vldr	s14, [r3]
 800128e:	edd7 7a00 	vldr	s15, [r7]
 8001292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	edd3 6a01 	vldr	s13, [r3, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	edd3 7a03 	vldr	s15, [r3, #12]
 80012a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edc3 7a02 	vstr	s15, [r3, #8]

	return filt->out[0];
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	ee07 3a90 	vmov	s15, r3

}
 80012b8:	eeb0 0a67 	vmov.f32	s0, s15
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <delay_micros>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// micros delay function
uint16_t time_since_loop_start;
void delay_micros(uint16_t delay){
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim9, 0);
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <delay_micros+0x30>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim9) < delay);
 80012da:	bf00      	nop
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <delay_micros+0x30>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d3f9      	bcc.n	80012dc <delay_micros+0x14>
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000438 	.word	0x20000438

080012fc <HAL_UARTEx_RxEventCallback>:
#define Main_Buf_SIZE 26

uint8_t RxBuf[RxBuf_SIZE];
uint8_t MainBuf[Main_Buf_SIZE];

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART1){
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a11      	ldr	r2, [pc, #68]	; (8001354 <HAL_UARTEx_RxEventCallback+0x58>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d11c      	bne.n	800134c <HAL_UARTEx_RxEventCallback+0x50>
		memcpy (MainBuf, RxBuf, RxBuf_SIZE);
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_UARTEx_RxEventCallback+0x5c>)
 8001314:	4a11      	ldr	r2, [pc, #68]	; (800135c <HAL_UARTEx_RxEventCallback+0x60>)
 8001316:	6810      	ldr	r0, [r2, #0]
 8001318:	6851      	ldr	r1, [r2, #4]
 800131a:	6895      	ldr	r5, [r2, #8]
 800131c:	68d4      	ldr	r4, [r2, #12]
 800131e:	6018      	str	r0, [r3, #0]
 8001320:	6059      	str	r1, [r3, #4]
 8001322:	609d      	str	r5, [r3, #8]
 8001324:	60dc      	str	r4, [r3, #12]
 8001326:	6910      	ldr	r0, [r2, #16]
 8001328:	6951      	ldr	r1, [r2, #20]
 800132a:	6118      	str	r0, [r3, #16]
 800132c:	6159      	str	r1, [r3, #20]
 800132e:	8b12      	ldrh	r2, [r2, #24]
 8001330:	831a      	strh	r2, [r3, #24]
		 HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, RxBuf_SIZE);
 8001332:	221a      	movs	r2, #26
 8001334:	4909      	ldr	r1, [pc, #36]	; (800135c <HAL_UARTEx_RxEventCallback+0x60>)
 8001336:	480a      	ldr	r0, [pc, #40]	; (8001360 <HAL_UARTEx_RxEventCallback+0x64>)
 8001338:	f006 fb15 	bl	8007966 <HAL_UARTEx_ReceiveToIdle_DMA>
		 __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_UARTEx_RxEventCallback+0x68>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_UARTEx_RxEventCallback+0x68>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0208 	bic.w	r2, r2, #8
 800134a:	601a      	str	r2, [r3, #0]
	}
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bdb0      	pop	{r4, r5, r7, pc}
 8001354:	40011000 	.word	0x40011000
 8001358:	200004bc 	.word	0x200004bc
 800135c:	20000490 	.word	0x20000490
 8001360:	200003a4 	.word	0x200003a4
 8001364:	20000328 	.word	0x20000328

08001368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b0c4      	sub	sp, #272	; 0x110
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	filter_init(&gyroX_filter, 75.0f, 0.0005f);
 800136e:	eddf 0aae 	vldr	s1, [pc, #696]	; 8001628 <main+0x2c0>
 8001372:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800162c <main+0x2c4>
 8001376:	48ae      	ldr	r0, [pc, #696]	; (8001630 <main+0x2c8>)
 8001378:	f7ff ff3e 	bl	80011f8 <filter_init>
	filter_init(&gyroY_filter, 75.0f, 0.0005f);
 800137c:	eddf 0aaa 	vldr	s1, [pc, #680]	; 8001628 <main+0x2c0>
 8001380:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 800162c <main+0x2c4>
 8001384:	48ab      	ldr	r0, [pc, #684]	; (8001634 <main+0x2cc>)
 8001386:	f7ff ff37 	bl	80011f8 <filter_init>
	filter_init(&gyroZ_filter, 75.0f, 0.0005f);
 800138a:	eddf 0aa7 	vldr	s1, [pc, #668]	; 8001628 <main+0x2c0>
 800138e:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 800162c <main+0x2c4>
 8001392:	48a9      	ldr	r0, [pc, #676]	; (8001638 <main+0x2d0>)
 8001394:	f7ff ff30 	bl	80011f8 <filter_init>
	filter_init(&rc_roll, 15.0f, 0.0001f);
 8001398:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800163c <main+0x2d4>
 800139c:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80013a0:	48a7      	ldr	r0, [pc, #668]	; (8001640 <main+0x2d8>)
 80013a2:	f7ff ff29 	bl	80011f8 <filter_init>
	filter_init(&rc_pitch, 15.0f, 0.0001f);
 80013a6:	eddf 0aa5 	vldr	s1, [pc, #660]	; 800163c <main+0x2d4>
 80013aa:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80013ae:	48a5      	ldr	r0, [pc, #660]	; (8001644 <main+0x2dc>)
 80013b0:	f7ff ff22 	bl	80011f8 <filter_init>
	filter_init(&rc_yaw, 15.0f, 0.0001f);
 80013b4:	eddf 0aa1 	vldr	s1, [pc, #644]	; 800163c <main+0x2d4>
 80013b8:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80013bc:	48a2      	ldr	r0, [pc, #648]	; (8001648 <main+0x2e0>)
 80013be:	f7ff ff1b 	bl	80011f8 <filter_init>
	filter_init(&rc_throttle, 15.0f, 0.0001f);
 80013c2:	eddf 0a9e 	vldr	s1, [pc, #632]	; 800163c <main+0x2d4>
 80013c6:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80013ca:	48a0      	ldr	r0, [pc, #640]	; (800164c <main+0x2e4>)
 80013cc:	f7ff ff14 	bl	80011f8 <filter_init>
	filter_init(&rc_arm, 5.0f, 0.0001f);
 80013d0:	eddf 0a9a 	vldr	s1, [pc, #616]	; 800163c <main+0x2d4>
 80013d4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80013d8:	489d      	ldr	r0, [pc, #628]	; (8001650 <main+0x2e8>)
 80013da:	f7ff ff0d 	bl	80011f8 <filter_init>
	filter_init(&rc_prearm, 4.0f, 0.0001f);
 80013de:	eddf 0a97 	vldr	s1, [pc, #604]	; 800163c <main+0x2d4>
 80013e2:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80013e6:	489b      	ldr	r0, [pc, #620]	; (8001654 <main+0x2ec>)
 80013e8:	f7ff ff06 	bl	80011f8 <filter_init>
	filter_init(&d_termX_filter, 150.0f, 0.0005f);
 80013ec:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8001628 <main+0x2c0>
 80013f0:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8001658 <main+0x2f0>
 80013f4:	4899      	ldr	r0, [pc, #612]	; (800165c <main+0x2f4>)
 80013f6:	f7ff feff 	bl	80011f8 <filter_init>
	filter_init(&d_termY_filter, 150.0f, 0.0005f);
 80013fa:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8001628 <main+0x2c0>
 80013fe:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8001658 <main+0x2f0>
 8001402:	4897      	ldr	r0, [pc, #604]	; (8001660 <main+0x2f8>)
 8001404:	f7ff fef8 	bl	80011f8 <filter_init>
	filter_init(&d_termZ_filter, 150.0f, 0.0005f);
 8001408:	eddf 0a87 	vldr	s1, [pc, #540]	; 8001628 <main+0x2c0>
 800140c:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8001658 <main+0x2f0>
 8001410:	4894      	ldr	r0, [pc, #592]	; (8001664 <main+0x2fc>)
 8001412:	f7ff fef1 	bl	80011f8 <filter_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001416:	f001 fc83 	bl	8002d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141a:	f000 ff17 	bl	800224c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141e:	f001 f8cf 	bl	80025c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001422:	f001 f8a5 	bl	8002570 <MX_DMA_Init>
  MX_I2C1_Init();
 8001426:	f000 ff79 	bl	800231c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800142a:	f001 f877 	bl	800251c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800142e:	f000 ffa3 	bl	8002378 <MX_TIM3_Init>
  MX_TIM9_Init();
 8001432:	f001 f839 	bl	80024a8 <MX_TIM9_Init>
  // test of receive IT
  //HAL_UART_Receive_IT(&huart1, RxBuf, RxBuf_SIZE);


  // timers
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001436:	2100      	movs	r1, #0
 8001438:	488b      	ldr	r0, [pc, #556]	; (8001668 <main+0x300>)
 800143a:	f005 fcd3 	bl	8006de4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800143e:	2104      	movs	r1, #4
 8001440:	4889      	ldr	r0, [pc, #548]	; (8001668 <main+0x300>)
 8001442:	f005 fccf 	bl	8006de4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001446:	2108      	movs	r1, #8
 8001448:	4887      	ldr	r0, [pc, #540]	; (8001668 <main+0x300>)
 800144a:	f005 fccb 	bl	8006de4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800144e:	210c      	movs	r1, #12
 8001450:	4885      	ldr	r0, [pc, #532]	; (8001668 <main+0x300>)
 8001452:	f005 fcc7 	bl	8006de4 <HAL_TIM_PWM_Start>
   HAL_TIM_Base_Start(&htim9);
 8001456:	4885      	ldr	r0, [pc, #532]	; (800166c <main+0x304>)
 8001458:	f005 fc10 	bl	8006c7c <HAL_TIM_Base_Start>
   // set duty to zero (oneshot125 uses 125us-250us) and the timer setup for 100mhz is 1250-2500
   uint32_t stop_motor = 1250;
 800145c:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8001460:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
   float idle = 1340.0;
 8001464:	4b82      	ldr	r3, [pc, #520]	; (8001670 <main+0x308>)
 8001466:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   float MAX_MOTOR_OUT = 2500.0;
 800146a:	4b82      	ldr	r3, [pc, #520]	; (8001674 <main+0x30c>)
 800146c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

   HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // turn LED on to indicate delay
 8001470:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001474:	4880      	ldr	r0, [pc, #512]	; (8001678 <main+0x310>)
 8001476:	f002 fba8 	bl	8003bca <HAL_GPIO_TogglePin>
   HAL_Delay(7000);
 800147a:	f641 3058 	movw	r0, #7000	; 0x1b58
 800147e:	f001 fcc1 	bl	8002e04 <HAL_Delay>
   htim3.Instance->CCR1 = stop_motor; // when written zero throttle 125us the ESC makes the final beep
 8001482:	4b79      	ldr	r3, [pc, #484]	; (8001668 <main+0x300>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800148a:	635a      	str	r2, [r3, #52]	; 0x34
   htim3.Instance->CCR2 = stop_motor;
 800148c:	4b76      	ldr	r3, [pc, #472]	; (8001668 <main+0x300>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001494:	639a      	str	r2, [r3, #56]	; 0x38
   htim3.Instance->CCR3 = stop_motor;
 8001496:	4b74      	ldr	r3, [pc, #464]	; (8001668 <main+0x300>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800149e:	63da      	str	r2, [r3, #60]	; 0x3c
   htim3.Instance->CCR4 = stop_motor;
 80014a0:	4b71      	ldr	r3, [pc, #452]	; (8001668 <main+0x300>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80014a8:	641a      	str	r2, [r3, #64]	; 0x40
   HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 80014aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ae:	4872      	ldr	r0, [pc, #456]	; (8001678 <main+0x310>)
 80014b0:	f002 fb8b 	bl	8003bca <HAL_GPIO_TogglePin>
   HAL_Delay(2000);
 80014b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014b8:	f001 fca4 	bl	8002e04 <HAL_Delay>

  // receiver
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, RxBuf_SIZE);
 80014bc:	221a      	movs	r2, #26
 80014be:	496f      	ldr	r1, [pc, #444]	; (800167c <main+0x314>)
 80014c0:	486f      	ldr	r0, [pc, #444]	; (8001680 <main+0x318>)
 80014c2:	f006 fa50 	bl	8007966 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80014c6:	4b6f      	ldr	r3, [pc, #444]	; (8001684 <main+0x31c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b6d      	ldr	r3, [pc, #436]	; (8001684 <main+0x31c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0208 	bic.w	r2, r2, #8
 80014d4:	601a      	str	r2, [r3, #0]

  char buf[16];
  uint16_t prearm = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  uint16_t throttle = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
  uint16_t roll = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
  uint16_t pitch = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
  uint16_t yaw = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
  uint16_t beep = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
  uint16_t arm = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
  uint16_t wheel = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
  uint16_t time_passed = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  float roll_filt = 0;
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  float pitch_filt = 0;
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  float yaw_filt = 0;
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  float throttle_filt = 0;
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  float arm_filt = 0;
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  float prearm_filt = 0;
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  float M1 = 1400.0;
 800153c:	4b52      	ldr	r3, [pc, #328]	; (8001688 <main+0x320>)
 800153e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  float M2 = 1400.0;
 8001542:	4b51      	ldr	r3, [pc, #324]	; (8001688 <main+0x320>)
 8001544:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  float M3 = 1400.0;
 8001548:	4b4f      	ldr	r3, [pc, #316]	; (8001688 <main+0x320>)
 800154a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  float M4 = 1400.0;
 800154e:	4b4e      	ldr	r3, [pc, #312]	; (8001688 <main+0x320>)
 8001550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  float roll_PID = 0.0;
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  float pitch_PID = 0.0;
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  float yaw_PID = 0.0;
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	67fb      	str	r3, [r7, #124]	; 0x7c
  float d_termX = 0.0;
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	67bb      	str	r3, [r7, #120]	; 0x78
  float d_termY = 0.0;
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	677b      	str	r3, [r7, #116]	; 0x74
  float d_termZ = 0.0;
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	673b      	str	r3, [r7, #112]	; 0x70
  float I_termX = 0.0;
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  float I_termY = 0.0;
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  float I_termZ = 0.0;
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

  float P_termX = 0.0;
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	66fb      	str	r3, [r7, #108]	; 0x6c
  float P_termY = 0.0;
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	66bb      	str	r3, [r7, #104]	; 0x68
  float P_termZ = 0.0;
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	667b      	str	r3, [r7, #100]	; 0x64

  uint8_t counting = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7




  // pid for tuning
  float Kp_X = 0.6f;
 80015ac:	4b37      	ldr	r3, [pc, #220]	; (800168c <main+0x324>)
 80015ae:	663b      	str	r3, [r7, #96]	; 0x60
  float Kp_Y = 0.6f;
 80015b0:	4b36      	ldr	r3, [pc, #216]	; (800168c <main+0x324>)
 80015b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  float Kp_Z = 0.6f;
 80015b4:	4b35      	ldr	r3, [pc, #212]	; (800168c <main+0x324>)
 80015b6:	65bb      	str	r3, [r7, #88]	; 0x58
  float Ki_X = 0.0001f;
 80015b8:	4b35      	ldr	r3, [pc, #212]	; (8001690 <main+0x328>)
 80015ba:	657b      	str	r3, [r7, #84]	; 0x54
  float Ki_Y = 0.0001f;
 80015bc:	4b34      	ldr	r3, [pc, #208]	; (8001690 <main+0x328>)
 80015be:	653b      	str	r3, [r7, #80]	; 0x50
  float Ki_Z = 0.0001f;
 80015c0:	4b33      	ldr	r3, [pc, #204]	; (8001690 <main+0x328>)
 80015c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  float Kd_X = 0.001f;
 80015c4:	4b33      	ldr	r3, [pc, #204]	; (8001694 <main+0x32c>)
 80015c6:	64bb      	str	r3, [r7, #72]	; 0x48
  float Kd_Y = 0.001f;
 80015c8:	4b32      	ldr	r3, [pc, #200]	; (8001694 <main+0x32c>)
 80015ca:	647b      	str	r3, [r7, #68]	; 0x44
  float Kd_Z = 0.001f;
 80015cc:	4b31      	ldr	r3, [pc, #196]	; (8001694 <main+0x32c>)
 80015ce:	643b      	str	r3, [r7, #64]	; 0x40

  // receiver end

  // gyro init
  uint8_t IMU_check;
  IMU_check = MPU6050_initialise(&gyro, &hi2c1);
 80015d0:	4931      	ldr	r1, [pc, #196]	; (8001698 <main+0x330>)
 80015d2:	4832      	ldr	r0, [pc, #200]	; (800169c <main+0x334>)
 80015d4:	f7ff fcbc 	bl	8000f50 <MPU6050_initialise>
 80015d8:	4603      	mov	r3, r0
 80015da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (IMU_check == 0){
 80015de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10d      	bne.n	8001602 <main+0x29a>
  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 80015e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ea:	4823      	ldr	r0, [pc, #140]	; (8001678 <main+0x310>)
 80015ec:	f002 faed 	bl	8003bca <HAL_GPIO_TogglePin>
  HAL_Delay(2000);
 80015f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015f4:	f001 fc06 	bl	8002e04 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 80015f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015fc:	481e      	ldr	r0, [pc, #120]	; (8001678 <main+0x310>)
 80015fe:	f002 fae4 	bl	8003bca <HAL_GPIO_TogglePin>

  float gyroX;
  float gyroY;
  float gyroZ;

  float gyroOffsetX = 0;
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  float gyroOffsetY = 0;
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  float gyroOffsetZ = 0;
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint8_t cnt = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  float offset_cnt = 100;
 8001620:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <main+0x338>)
 8001622:	63bb      	str	r3, [r7, #56]	; 0x38
  while(cnt < offset_cnt){
 8001624:	e06d      	b.n	8001702 <main+0x39a>
 8001626:	bf00      	nop
 8001628:	3a03126f 	.word	0x3a03126f
 800162c:	42960000 	.word	0x42960000
 8001630:	20000428 	.word	0x20000428
 8001634:	200004e8 	.word	0x200004e8
 8001638:	200003f8 	.word	0x200003f8
 800163c:	38d1b717 	.word	0x38d1b717
 8001640:	20000480 	.word	0x20000480
 8001644:	20000408 	.word	0x20000408
 8001648:	20000418 	.word	0x20000418
 800164c:	200004d8 	.word	0x200004d8
 8001650:	2000020c 	.word	0x2000020c
 8001654:	20000270 	.word	0x20000270
 8001658:	43160000 	.word	0x43160000
 800165c:	200004f8 	.word	0x200004f8
 8001660:	200003e8 	.word	0x200003e8
 8001664:	200004ac 	.word	0x200004ac
 8001668:	20000280 	.word	0x20000280
 800166c:	20000438 	.word	0x20000438
 8001670:	44a78000 	.word	0x44a78000
 8001674:	451c4000 	.word	0x451c4000
 8001678:	40020400 	.word	0x40020400
 800167c:	20000490 	.word	0x20000490
 8001680:	200003a4 	.word	0x200003a4
 8001684:	20000328 	.word	0x20000328
 8001688:	44af0000 	.word	0x44af0000
 800168c:	3f19999a 	.word	0x3f19999a
 8001690:	38d1b717 	.word	0x38d1b717
 8001694:	3a83126f 	.word	0x3a83126f
 8001698:	2000021c 	.word	0x2000021c
 800169c:	20000388 	.word	0x20000388
 80016a0:	42c80000 	.word	0x42c80000
	  MPU6050_read_gyro(&gyro);
 80016a4:	48ca      	ldr	r0, [pc, #808]	; (80019d0 <main+0x668>)
 80016a6:	f7ff fcff 	bl	80010a8 <MPU6050_read_gyro>
	  gyroOffsetX += ((gyro.gyro_ds[0])/offset_cnt);
 80016aa:	4bc9      	ldr	r3, [pc, #804]	; (80019d0 <main+0x668>)
 80016ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80016b0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80016b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016b8:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 80016bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c0:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
	  gyroOffsetY += ((gyro.gyro_ds[1])/offset_cnt);
 80016c4:	4bc2      	ldr	r3, [pc, #776]	; (80019d0 <main+0x668>)
 80016c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80016ca:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80016ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d2:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80016d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016da:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
	  gyroOffsetZ += ((gyro.gyro_ds[2])/offset_cnt);
 80016de:	4bbc      	ldr	r3, [pc, #752]	; (80019d0 <main+0x668>)
 80016e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80016e4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80016e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ec:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80016f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f4:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
	  cnt++;
 80016f8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80016fc:	3301      	adds	r3, #1
 80016fe:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  while(cnt < offset_cnt){
 8001702:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001712:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	dcc3      	bgt.n	80016a4 <main+0x33c>

 // gyro end


// due to rotating receiver packages, skip 10 package as soon as strange data arrives
  uint8_t cnt_bad_data_throttle = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
  uint16_t prev_throttle = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
  uint8_t cnt_bad_data_roll = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint16_t prev_roll = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
  uint8_t cnt_bad_data_pitch = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
  uint16_t prev_pitch = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
  uint8_t cnt_bad_data_yaw = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  uint16_t prev_yaw = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
  uint8_t cnt_bad_data_arm = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
  uint16_t prev_arm = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
  uint8_t cnt_bad_data_prearm = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
   uint16_t prev_prearm = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176a:	489a      	ldr	r0, [pc, #616]	; (80019d4 <main+0x66c>)
 800176c:	f002 fa14 	bl	8003b98 <HAL_GPIO_WritePin>
	  // MOTORS to zero
	   htim3.Instance->CCR1 = stop_motor;
 8001770:	4b99      	ldr	r3, [pc, #612]	; (80019d8 <main+0x670>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001778:	635a      	str	r2, [r3, #52]	; 0x34
	   htim3.Instance->CCR2 = stop_motor;
 800177a:	4b97      	ldr	r3, [pc, #604]	; (80019d8 <main+0x670>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001782:	639a      	str	r2, [r3, #56]	; 0x38
	   htim3.Instance->CCR3 = stop_motor;
 8001784:	4b94      	ldr	r3, [pc, #592]	; (80019d8 <main+0x670>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800178c:	63da      	str	r2, [r3, #60]	; 0x3c
	   htim3.Instance->CCR4 = stop_motor;
 800178e:	4b92      	ldr	r3, [pc, #584]	; (80019d8 <main+0x670>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
	   htim3.Instance->CCR3 = idle;
	   htim3.Instance->CCR4 = idle;
*/

	  // before arm all ok
	  throttle = ((MainBuf[4] & 0x07) << 8) | MainBuf[3]; // 196-1792
 8001798:	4b90      	ldr	r3, [pc, #576]	; (80019dc <main+0x674>)
 800179a:	791b      	ldrb	r3, [r3, #4]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b21b      	sxth	r3, r3
 80017a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	4b8d      	ldr	r3, [pc, #564]	; (80019dc <main+0x674>)
 80017a8:	78db      	ldrb	r3, [r3, #3]
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
	  prearm = ((MainBuf[11] & 0x03) << 9) | (MainBuf[10] << 1); // > 1000 prearm ok
 80017b4:	4b89      	ldr	r3, [pc, #548]	; (80019dc <main+0x674>)
 80017b6:	7adb      	ldrb	r3, [r3, #11]
 80017b8:	025b      	lsls	r3, r3, #9
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	4b86      	ldr	r3, [pc, #536]	; (80019dc <main+0x674>)
 80017c4:	7a9b      	ldrb	r3, [r3, #10]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	  prearm = ((MainBuf[9] & 0x80) >> 7) | prearm;
 80017d2:	4b82      	ldr	r3, [pc, #520]	; (80019dc <main+0x674>)
 80017d4:	7a5b      	ldrb	r3, [r3, #9]
 80017d6:	09db      	lsrs	r3, r3, #7
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	b29a      	uxth	r2, r3
 80017dc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80017e0:	4313      	orrs	r3, r2
 80017e2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	  arm = ((MainBuf[9] & 0b01111111) << 4) | ((MainBuf[8] & 0b11110000) >> 4);
 80017e6:	4b7d      	ldr	r3, [pc, #500]	; (80019dc <main+0x674>)
 80017e8:	7a5b      	ldrb	r3, [r3, #9]
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	4b79      	ldr	r3, [pc, #484]	; (80019dc <main+0x674>)
 80017f6:	7a1b      	ldrb	r3, [r3, #8]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	4313      	orrs	r3, r2
 8001800:	b21b      	sxth	r3, r3
 8001802:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104

	  // due to rotating receiver data
	  if(throttle < 100 && cnt_bad_data_throttle <= 15){
 8001806:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800180a:	2b63      	cmp	r3, #99	; 0x63
 800180c:	d80d      	bhi.n	800182a <main+0x4c2>
 800180e:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8001812:	2b0f      	cmp	r3, #15
 8001814:	d809      	bhi.n	800182a <main+0x4c2>
		  cnt_bad_data_throttle++;
 8001816:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 800181a:	3301      	adds	r3, #1
 800181c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
		  throttle = prev_throttle;
 8001820:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8001824:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8001828:	e006      	b.n	8001838 <main+0x4d0>
	  }else{
		  cnt_bad_data_throttle = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
		  prev_throttle = throttle;
 8001830:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001834:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
	  }


	  if(arm < 100 && cnt_bad_data_arm <= 20){
 8001838:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800183c:	2b63      	cmp	r3, #99	; 0x63
 800183e:	d80d      	bhi.n	800185c <main+0x4f4>
 8001840:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001844:	2b14      	cmp	r3, #20
 8001846:	d809      	bhi.n	800185c <main+0x4f4>
			  cnt_bad_data_arm++;
 8001848:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800184c:	3301      	adds	r3, #1
 800184e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
			  arm = prev_arm;
 8001852:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8001856:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 800185a:	e006      	b.n	800186a <main+0x502>
		  }else{
			  cnt_bad_data_arm = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
			  prev_arm = arm;
 8001862:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8001866:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		  }

	  if(prearm < 100 && cnt_bad_data_prearm <= 20){
 800186a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800186e:	2b63      	cmp	r3, #99	; 0x63
 8001870:	d80d      	bhi.n	800188e <main+0x526>
 8001872:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001876:	2b14      	cmp	r3, #20
 8001878:	d809      	bhi.n	800188e <main+0x526>
			  cnt_bad_data_arm++;
 800187a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800187e:	3301      	adds	r3, #1
 8001880:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
			  prearm = prev_prearm;
 8001884:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8001888:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800188c:	e006      	b.n	800189c <main+0x534>
		  }else{
			  cnt_bad_data_prearm = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			  prev_prearm = prearm;
 8001894:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001898:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
		  }
	  // filter rc commands

	  throttle_filt = filter_apply(&rc_throttle, (float) throttle);
 800189c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018a8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ac:	484c      	ldr	r0, [pc, #304]	; (80019e0 <main+0x678>)
 80018ae:	f7ff fce1 	bl	8001274 <filter_apply>
 80018b2:	ed87 0a28 	vstr	s0, [r7, #160]	; 0xa0
	  arm_filt = filter_apply(&rc_arm, (float) arm);
 80018b6:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 80018ba:	ee07 3a90 	vmov	s15, r3
 80018be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018c2:	eeb0 0a67 	vmov.f32	s0, s15
 80018c6:	4847      	ldr	r0, [pc, #284]	; (80019e4 <main+0x67c>)
 80018c8:	f7ff fcd4 	bl	8001274 <filter_apply>
 80018cc:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c
	  prearm_filt = filter_apply(&rc_prearm, (float) prearm);
 80018d0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018dc:	eeb0 0a67 	vmov.f32	s0, s15
 80018e0:	4841      	ldr	r0, [pc, #260]	; (80019e8 <main+0x680>)
 80018e2:	f7ff fcc7 	bl	8001274 <filter_apply>
 80018e6:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98


	  // throttle 196-1792
	  if (throttle < 1800 && throttle > 100){ // check actual value for failsafe
 80018ea:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80018ee:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80018f2:	d207      	bcs.n	8001904 <main+0x59c>
 80018f4:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80018f8:	2b64      	cmp	r3, #100	; 0x64
 80018fa:	d903      	bls.n	8001904 <main+0x59c>
		  failsafe = 0;
 80018fc:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <main+0x684>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	e002      	b.n	800190a <main+0x5a2>
	  } else failsafe = 1;
 8001904:	4b39      	ldr	r3, [pc, #228]	; (80019ec <main+0x684>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]

	  if (IMU_check == 0 && throttle < 300  && prearm > 500 && arm < 500 && (failsafe == 0)){
 800190a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800190e:	2b00      	cmp	r3, #0
 8001910:	d118      	bne.n	8001944 <main+0x5dc>
 8001912:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001916:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800191a:	d213      	bcs.n	8001944 <main+0x5dc>
 800191c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001920:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001924:	d90e      	bls.n	8001944 <main+0x5dc>
 8001926:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800192a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800192e:	d209      	bcs.n	8001944 <main+0x5dc>
 8001930:	4b2e      	ldr	r3, [pc, #184]	; (80019ec <main+0x684>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	f083 0301 	eor.w	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <main+0x5dc>
		  arm_ok = 1;
 800193e:	4b2c      	ldr	r3, [pc, #176]	; (80019f0 <main+0x688>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
	  }

	  // check if gyro is not calibrated correctly upon first arm
	  if (first_arm){
 8001944:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <main+0x68c>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 8468 	beq.w	800221e <main+0xeb6>
		  first_arm = 0;
 800194e:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <main+0x68c>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
		  MPU6050_read_gyro(&gyro);
 8001954:	481e      	ldr	r0, [pc, #120]	; (80019d0 <main+0x668>)
 8001956:	f7ff fba7 	bl	80010a8 <MPU6050_read_gyro>
		  gyroX = gyro.gyro_ds[0] - gyroOffsetX;
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <main+0x668>)
 800195c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001960:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8001964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001968:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		  gyroY = gyro.gyro_ds[1] - gyroOffsetY;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <main+0x668>)
 800196e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001972:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		  gyroZ = gyro.gyro_ds[2] - gyroOffsetZ;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <main+0x668>)
 8001980:	ed93 7a03 	vldr	s14, [r3, #12]
 8001984:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		 if (gyroX > 4 || gyroY > 4 || gyroZ > 4){
 8001990:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001994:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a0:	dc11      	bgt.n	80019c6 <main+0x65e>
 80019a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019a6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80019aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b2:	dc08      	bgt.n	80019c6 <main+0x65e>
 80019b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019b8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80019bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c4:	dd02      	ble.n	80019cc <main+0x664>
			 arm_ok = 0;
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <main+0x688>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
		 }
	  }

      //arm_ok = 1; // for test
	  // flying loop
	  while(arm_ok) {
 80019cc:	f000 bc27 	b.w	800221e <main+0xeb6>
 80019d0:	20000388 	.word	0x20000388
 80019d4:	40020400 	.word	0x40020400
 80019d8:	20000280 	.word	0x20000280
 80019dc:	200004bc 	.word	0x200004bc
 80019e0:	200004d8 	.word	0x200004d8
 80019e4:	2000020c 	.word	0x2000020c
 80019e8:	20000270 	.word	0x20000270
 80019ec:	20000001 	.word	0x20000001
 80019f0:	200001fc 	.word	0x200001fc
 80019f4:	20000000 	.word	0x20000000
		  counting++;
 80019f8:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 80019fc:	3301      	adds	r3, #1
 80019fe:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_SET);
 8001a02:	2201      	movs	r2, #1
 8001a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a08:	4875      	ldr	r0, [pc, #468]	; (8001be0 <main+0x878>)
 8001a0a:	f002 f8c5 	bl	8003b98 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COUNTER(&htim9, 0); // use tim9 for time-control (loop time)
 8001a0e:	4b75      	ldr	r3, [pc, #468]	; (8001be4 <main+0x87c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24

	  //time_since_loop_start = __HAL_TIM_GET_COUNTER(&htim9);
	  // RC COMMANDS
	  arm = ((MainBuf[9] & 0b01111111) << 4) | ((MainBuf[8] & 0b11110000) >> 4); // if < 1000 = armed
 8001a16:	4b74      	ldr	r3, [pc, #464]	; (8001be8 <main+0x880>)
 8001a18:	7a5b      	ldrb	r3, [r3, #9]
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	4b70      	ldr	r3, [pc, #448]	; (8001be8 <main+0x880>)
 8001a26:	7a1b      	ldrb	r3, [r3, #8]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	b21b      	sxth	r3, r3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
	  throttle = ((MainBuf[4] & 0x07) << 8) | MainBuf[3]; // 196-1792
 8001a36:	4b6c      	ldr	r3, [pc, #432]	; (8001be8 <main+0x880>)
 8001a38:	791b      	ldrb	r3, [r3, #4]
 8001a3a:	021b      	lsls	r3, r3, #8
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	4b68      	ldr	r3, [pc, #416]	; (8001be8 <main+0x880>)
 8001a46:	78db      	ldrb	r3, [r3, #3]
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
	  pitch = ((MainBuf[7] & 0x01) << 10) | (MainBuf[6] << 2);
 8001a52:	4b65      	ldr	r3, [pc, #404]	; (8001be8 <main+0x880>)
 8001a54:	79db      	ldrb	r3, [r3, #7]
 8001a56:	029b      	lsls	r3, r3, #10
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5e:	b21a      	sxth	r2, r3
 8001a60:	4b61      	ldr	r3, [pc, #388]	; (8001be8 <main+0x880>)
 8001a62:	799b      	ldrb	r3, [r3, #6]
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	  pitch = ((MainBuf[5] & 0xC0) >> 6) | pitch;
 8001a70:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <main+0x880>)
 8001a72:	795b      	ldrb	r3, [r3, #5]
 8001a74:	099b      	lsrs	r3, r3, #6
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	  yaw = ((MainBuf[8] & 0x0F) << 7) | ((MainBuf[7] & 0b11111110) >> 1);
 8001a84:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <main+0x880>)
 8001a86:	7a1b      	ldrb	r3, [r3, #8]
 8001a88:	01db      	lsls	r3, r3, #7
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8001a90:	b21a      	sxth	r2, r3
 8001a92:	4b55      	ldr	r3, [pc, #340]	; (8001be8 <main+0x880>)
 8001a94:	79db      	ldrb	r3, [r3, #7]
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	  roll = ((MainBuf[5] & 0x3F) << 5) | ((MainBuf[4] & 0xF8) >> 3); // 192-1792
 8001aa4:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <main+0x880>)
 8001aa6:	795b      	ldrb	r3, [r3, #5]
 8001aa8:	015b      	lsls	r3, r3, #5
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <main+0x880>)
 8001ab4:	791b      	ldrb	r3, [r3, #4]
 8001ab6:	08db      	lsrs	r3, r3, #3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	4313      	orrs	r3, r2
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	  // due to rotating receiver data
	 	  if(throttle < 100 && cnt_bad_data_throttle <= 15){
 8001ac4:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001ac8:	2b63      	cmp	r3, #99	; 0x63
 8001aca:	d80d      	bhi.n	8001ae8 <main+0x780>
 8001acc:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	d809      	bhi.n	8001ae8 <main+0x780>
	 		  cnt_bad_data_throttle++;
 8001ad4:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	 		  throttle = prev_throttle;
 8001ade:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8001ae2:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8001ae6:	e006      	b.n	8001af6 <main+0x78e>
	 	  }else{
	 		  cnt_bad_data_throttle = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	 		  prev_throttle = throttle;
 8001aee:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001af2:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
	 	  }

	 	  if(((roll-prev_roll < -300)||(roll-prev_roll > 300)) && cnt_bad_data_roll <= 15){
 8001af6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8001afa:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8001b04:	db07      	blt.n	8001b16 <main+0x7ae>
 8001b06:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8001b0a:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b14:	dd0d      	ble.n	8001b32 <main+0x7ca>
 8001b16:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001b1a:	2b0f      	cmp	r3, #15
 8001b1c:	d809      	bhi.n	8001b32 <main+0x7ca>
	 			  cnt_bad_data_roll++;
 8001b1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001b22:	3301      	adds	r3, #1
 8001b24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	 			  roll = prev_roll;
 8001b28:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8001b2c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8001b30:	e006      	b.n	8001b40 <main+0x7d8>
	 		  }else{
	 			  cnt_bad_data_roll = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	 			  prev_roll = roll;
 8001b38:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8001b3c:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	 		  }

	 	  if(pitch < 170 && cnt_bad_data_pitch <= 15){
 8001b40:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8001b44:	2ba9      	cmp	r3, #169	; 0xa9
 8001b46:	d80d      	bhi.n	8001b64 <main+0x7fc>
 8001b48:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d809      	bhi.n	8001b64 <main+0x7fc>
	 			  cnt_bad_data_pitch++;
 8001b50:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8001b54:	3301      	adds	r3, #1
 8001b56:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	 			  pitch = prev_pitch;
 8001b5a:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8001b5e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
 8001b62:	e006      	b.n	8001b72 <main+0x80a>
	 		  }else{
	 			  cnt_bad_data_pitch = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	 			  prev_pitch = pitch;
 8001b6a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8001b6e:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
	 		  }

	 	  if(((yaw-prev_yaw < -300)||(yaw-prev_yaw > 300)) && cnt_bad_data_yaw <= 15){
 8001b72:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8001b76:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8001b80:	db07      	blt.n	8001b92 <main+0x82a>
 8001b82:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8001b86:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b90:	dd0d      	ble.n	8001bae <main+0x846>
 8001b92:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001b96:	2b0f      	cmp	r3, #15
 8001b98:	d809      	bhi.n	8001bae <main+0x846>
	 			  cnt_bad_data_yaw++;
 8001b9a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	 			  yaw = prev_yaw;
 8001ba4:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8001ba8:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 8001bac:	e006      	b.n	8001bbc <main+0x854>
	 		  }else{
	 			  cnt_bad_data_yaw = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	 			  prev_yaw = yaw;
 8001bb4:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8001bb8:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
	 		  }




	 	  if(arm < 100 && cnt_bad_data_arm <= 30){
 8001bbc:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8001bc0:	2b63      	cmp	r3, #99	; 0x63
 8001bc2:	d813      	bhi.n	8001bec <main+0x884>
 8001bc4:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001bc8:	2b1e      	cmp	r3, #30
 8001bca:	d80f      	bhi.n	8001bec <main+0x884>
	 			  cnt_bad_data_arm++;
 8001bcc:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
	 			  arm = prev_arm;
 8001bd6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8001bda:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 8001bde:	e00c      	b.n	8001bfa <main+0x892>
 8001be0:	40020400 	.word	0x40020400
 8001be4:	20000438 	.word	0x20000438
 8001be8:	200004bc 	.word	0x200004bc
	 		  }else{
	 			  cnt_bad_data_arm = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
	 			  prev_arm = arm;
 8001bf2:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8001bf6:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
	 		  }



	  // filter rc commands
	  roll_filt = filter_apply(&rc_roll, (float) roll); // this is wrong values, prior to filter
 8001bfa:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c06:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0a:	48e7      	ldr	r0, [pc, #924]	; (8001fa8 <main+0xc40>)
 8001c0c:	f7ff fb32 	bl	8001274 <filter_apply>
 8001c10:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
	  pitch_filt = filter_apply(&rc_pitch, (float) pitch);
 8001c14:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	48e1      	ldr	r0, [pc, #900]	; (8001fac <main+0xc44>)
 8001c26:	f7ff fb25 	bl	8001274 <filter_apply>
 8001c2a:	ed87 0a2a 	vstr	s0, [r7, #168]	; 0xa8
	  yaw_filt = filter_apply(&rc_yaw, (float) yaw);
 8001c2e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3e:	48dc      	ldr	r0, [pc, #880]	; (8001fb0 <main+0xc48>)
 8001c40:	f7ff fb18 	bl	8001274 <filter_apply>
 8001c44:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	  throttle_filt = filter_apply(&rc_throttle, (float) throttle);
 8001c48:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c54:	eeb0 0a67 	vmov.f32	s0, s15
 8001c58:	48d6      	ldr	r0, [pc, #856]	; (8001fb4 <main+0xc4c>)
 8001c5a:	f7ff fb0b 	bl	8001274 <filter_apply>
 8001c5e:	ed87 0a28 	vstr	s0, [r7, #160]	; 0xa0
	  arm_filt = filter_apply(&rc_arm, (float) arm);
 8001c62:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c72:	48d1      	ldr	r0, [pc, #836]	; (8001fb8 <main+0xc50>)
 8001c74:	f7ff fafe 	bl	8001274 <filter_apply>
 8001c78:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c

	  // check if disarm, check failsafe // check value
		  if (arm_filt > 600){
 8001c7c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001c80:	ed9f 7ace 	vldr	s14, [pc, #824]	; 8001fbc <main+0xc54>
 8001c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	dd02      	ble.n	8001c94 <main+0x92c>
			 arm_ok = 0;
 8001c8e:	4bcc      	ldr	r3, [pc, #816]	; (8001fc0 <main+0xc58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
		  }

		  if (throttle < 100 || throttle > 1800){
 8001c94:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001c98:	2b63      	cmp	r3, #99	; 0x63
 8001c9a:	d904      	bls.n	8001ca6 <main+0x93e>
 8001c9c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001ca0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001ca4:	d905      	bls.n	8001cb2 <main+0x94a>
			  failsafe = 1;
 8001ca6:	4bc7      	ldr	r3, [pc, #796]	; (8001fc4 <main+0xc5c>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
			  arm_ok = 0;
 8001cac:	4bc4      	ldr	r3, [pc, #784]	; (8001fc0 <main+0xc58>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
		  }

	  // MAP and CONSTRAIN RC_COMMANDS
		  roll_filt = constrain(roll_filt, 206.0, 1776.0);
 8001cb2:	ed9f 1ac5 	vldr	s2, [pc, #788]	; 8001fc8 <main+0xc60>
 8001cb6:	eddf 0ac5 	vldr	s1, [pc, #788]	; 8001fcc <main+0xc64>
 8001cba:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 8001cbe:	f000 fd0d 	bl	80026dc <constrain>
 8001cc2:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
		  pitch_filt = constrain(pitch_filt, 194.0, 1790.0);
 8001cc6:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 8001fd0 <main+0xc68>
 8001cca:	eddf 0ac2 	vldr	s1, [pc, #776]	; 8001fd4 <main+0xc6c>
 8001cce:	ed97 0a2a 	vldr	s0, [r7, #168]	; 0xa8
 8001cd2:	f000 fd03 	bl	80026dc <constrain>
 8001cd6:	ed87 0a2a 	vstr	s0, [r7, #168]	; 0xa8
		  yaw_filt =  constrain(yaw_filt, 198.0, 1768.0);
 8001cda:	ed9f 1abf 	vldr	s2, [pc, #764]	; 8001fd8 <main+0xc70>
 8001cde:	eddf 0abf 	vldr	s1, [pc, #764]	; 8001fdc <main+0xc74>
 8001ce2:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8001ce6:	f000 fcf9 	bl	80026dc <constrain>
 8001cea:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		  throttle_filt = constrain(throttle_filt, 191.0, 1788.0);
 8001cee:	ed9f 1abc 	vldr	s2, [pc, #752]	; 8001fe0 <main+0xc78>
 8001cf2:	eddf 0abc 	vldr	s1, [pc, #752]	; 8001fe4 <main+0xc7c>
 8001cf6:	ed97 0a28 	vldr	s0, [r7, #160]	; 0xa0
 8001cfa:	f000 fcef 	bl	80026dc <constrain>
 8001cfe:	ed87 0a28 	vstr	s0, [r7, #160]	; 0xa0
		  roll_filt = map(roll_filt, -1000.0, 1000.0, 206.0, 1776.0);
 8001d02:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8001fc8 <main+0xc60>
 8001d06:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8001fcc <main+0xc64>
 8001d0a:	ed9f 1ab7 	vldr	s2, [pc, #732]	; 8001fe8 <main+0xc80>
 8001d0e:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8001fec <main+0xc84>
 8001d12:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 8001d16:	f000 fcaa 	bl	800266e <map>
 8001d1a:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
		  pitch_filt = map(pitch_filt, -1000.0, 1000.0, 194.0, 1790.0);
 8001d1e:	ed9f 2aac 	vldr	s4, [pc, #688]	; 8001fd0 <main+0xc68>
 8001d22:	eddf 1aac 	vldr	s3, [pc, #688]	; 8001fd4 <main+0xc6c>
 8001d26:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 8001fe8 <main+0xc80>
 8001d2a:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8001fec <main+0xc84>
 8001d2e:	ed97 0a2a 	vldr	s0, [r7, #168]	; 0xa8
 8001d32:	f000 fc9c 	bl	800266e <map>
 8001d36:	ed87 0a2a 	vstr	s0, [r7, #168]	; 0xa8
		  yaw_filt =  map(yaw_filt, -1000.0, 1000.0, 198.0, 1768.0);
 8001d3a:	ed9f 2aa7 	vldr	s4, [pc, #668]	; 8001fd8 <main+0xc70>
 8001d3e:	eddf 1aa7 	vldr	s3, [pc, #668]	; 8001fdc <main+0xc74>
 8001d42:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 8001fe8 <main+0xc80>
 8001d46:	eddf 0aa9 	vldr	s1, [pc, #676]	; 8001fec <main+0xc84>
 8001d4a:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8001d4e:	f000 fc8e 	bl	800266e <map>
 8001d52:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		  throttle_filt = map(throttle_filt, 1250.0, 2500.0, 191.0, 1788.0);
 8001d56:	ed9f 2aa2 	vldr	s4, [pc, #648]	; 8001fe0 <main+0xc78>
 8001d5a:	eddf 1aa2 	vldr	s3, [pc, #648]	; 8001fe4 <main+0xc7c>
 8001d5e:	ed9f 1aa4 	vldr	s2, [pc, #656]	; 8001ff0 <main+0xc88>
 8001d62:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8001ff4 <main+0xc8c>
 8001d66:	ed97 0a28 	vldr	s0, [r7, #160]	; 0xa0
 8001d6a:	f000 fc80 	bl	800266e <map>
 8001d6e:	ed87 0a28 	vstr	s0, [r7, #160]	; 0xa0
		  throttle_filt = constrain(throttle_filt, idle, 2000.0);
 8001d72:	ed9f 1aa1 	vldr	s2, [pc, #644]	; 8001ff8 <main+0xc90>
 8001d76:	edd7 0a2f 	vldr	s1, [r7, #188]	; 0xbc
 8001d7a:	ed97 0a28 	vldr	s0, [r7, #160]	; 0xa0
 8001d7e:	f000 fcad 	bl	80026dc <constrain>
 8001d82:	ed87 0a28 	vstr	s0, [r7, #160]	; 0xa0

	  // GYRO READ
      MPU6050_read_gyro(&gyro);
 8001d86:	489d      	ldr	r0, [pc, #628]	; (8001ffc <main+0xc94>)
 8001d88:	f7ff f98e 	bl	80010a8 <MPU6050_read_gyro>
	  gyroX = gyro.gyro_ds[0] - gyroOffsetX;
 8001d8c:	4b9b      	ldr	r3, [pc, #620]	; (8001ffc <main+0xc94>)
 8001d8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d92:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8001d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d9a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	  gyroY = gyro.gyro_ds[1] - gyroOffsetY;
 8001d9e:	4b97      	ldr	r3, [pc, #604]	; (8001ffc <main+0xc94>)
 8001da0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001da4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dac:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	  gyroZ = gyro.gyro_ds[2] - gyroOffsetZ;
 8001db0:	4b92      	ldr	r3, [pc, #584]	; (8001ffc <main+0xc94>)
 8001db2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001db6:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dbe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	  // filters
	  gyroX_filtered = filter_apply(&gyroX_filter, gyroX);
 8001dc2:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001dc6:	488e      	ldr	r0, [pc, #568]	; (8002000 <main+0xc98>)
 8001dc8:	f7ff fa54 	bl	8001274 <filter_apply>
 8001dcc:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	  gyroY_filtered = filter_apply(&gyroY_filter, gyroY);
 8001dd0:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001dd4:	488b      	ldr	r0, [pc, #556]	; (8002004 <main+0xc9c>)
 8001dd6:	f7ff fa4d 	bl	8001274 <filter_apply>
 8001dda:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	  gyroZ_filtered = filter_apply(&gyroZ_filter, gyroZ);
 8001dde:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001de2:	4889      	ldr	r0, [pc, #548]	; (8002008 <main+0xca0>)
 8001de4:	f7ff fa46 	bl	8001274 <filter_apply>
 8001de8:	ed87 0a08 	vstr	s0, [r7, #32]
	  // PID



	  // compute proportional term
	  P_termX = - pitch_filt - gyroX_filtered;
 8001dec:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001df0:	eeb1 7a67 	vneg.f32	s14, s15
 8001df4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	  P_termY =   roll_filt -  gyroY_filtered;
 8001e00:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001e04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	  P_termZ =  - yaw_filt -  gyroZ_filtered;
 8001e10:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001e14:	eeb1 7a67 	vneg.f32	s14, s15
 8001e18:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e20:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	  // compute derivative term
	  d_termX = gyroX_filtered - gyroX_filtered_prev;
 8001e24:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e28:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8001e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e30:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	  d_termY = gyroY_filtered - gyroY_filtered_prev;
 8001e34:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e38:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8001e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e40:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	  d_termZ = gyroZ_filtered - gyroZ_filtered_prev;
 8001e44:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e48:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8001e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e50:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	  // filter derivative term
	  D_termX_filtered = filter_apply(&d_termX_filter, d_termX);
 8001e54:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8001e58:	486c      	ldr	r0, [pc, #432]	; (800200c <main+0xca4>)
 8001e5a:	f7ff fa0b 	bl	8001274 <filter_apply>
 8001e5e:	ed87 0a07 	vstr	s0, [r7, #28]
	  D_termY_filtered = filter_apply(&d_termY_filter, d_termY);
 8001e62:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8001e66:	486a      	ldr	r0, [pc, #424]	; (8002010 <main+0xca8>)
 8001e68:	f7ff fa04 	bl	8001274 <filter_apply>
 8001e6c:	ed87 0a06 	vstr	s0, [r7, #24]
	  D_termZ_filtered = filter_apply(&d_termZ_filter, d_termZ);
 8001e70:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8001e74:	4867      	ldr	r0, [pc, #412]	; (8002014 <main+0xcac>)
 8001e76:	f7ff f9fd 	bl	8001274 <filter_apply>
 8001e7a:	ed87 0a05 	vstr	s0, [r7, #20]

	  // shift
	  gyroX_filtered_prev = gyroX_filtered;
 8001e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  gyroY_filtered_prev = gyroY_filtered;
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  gyroZ_filtered_prev = gyroZ_filtered;
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

	  // compute I term
	  I_termX = I_termX + P_termX * 0.0005;
 8001e90:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8001e94:	f7fe fb60 	bl	8000558 <__aeabi_f2d>
 8001e98:	4604      	mov	r4, r0
 8001e9a:	460d      	mov	r5, r1
 8001e9c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001e9e:	f7fe fb5b 	bl	8000558 <__aeabi_f2d>
 8001ea2:	a33f      	add	r3, pc, #252	; (adr r3, 8001fa0 <main+0xc38>)
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	f7fe fbae 	bl	8000608 <__aeabi_dmul>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	4629      	mov	r1, r5
 8001eb4:	f7fe f9f2 	bl	800029c <__adddf3>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe fe7a 	bl	8000bb8 <__aeabi_d2f>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  I_termY = I_termY + P_termY * 0.0005;
 8001eca:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8001ece:	f7fe fb43 	bl	8000558 <__aeabi_f2d>
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	460d      	mov	r5, r1
 8001ed6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001ed8:	f7fe fb3e 	bl	8000558 <__aeabi_f2d>
 8001edc:	a330      	add	r3, pc, #192	; (adr r3, 8001fa0 <main+0xc38>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe fb91 	bl	8000608 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4620      	mov	r0, r4
 8001eec:	4629      	mov	r1, r5
 8001eee:	f7fe f9d5 	bl	800029c <__adddf3>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fe5d 	bl	8000bb8 <__aeabi_d2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  I_termZ = I_termZ + P_termZ * 0.0005;
 8001f04:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8001f08:	f7fe fb26 	bl	8000558 <__aeabi_f2d>
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	460d      	mov	r5, r1
 8001f10:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001f12:	f7fe fb21 	bl	8000558 <__aeabi_f2d>
 8001f16:	a322      	add	r3, pc, #136	; (adr r3, 8001fa0 <main+0xc38>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe fb74 	bl	8000608 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4620      	mov	r0, r4
 8001f26:	4629      	mov	r1, r5
 8001f28:	f7fe f9b8 	bl	800029c <__adddf3>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4610      	mov	r0, r2
 8001f32:	4619      	mov	r1, r3
 8001f34:	f7fe fe40 	bl	8000bb8 <__aeabi_d2f>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	  // constrain I term
	  if (I_termX > 100.0){
 8001f3e:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 8001f42:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002024 <main+0xcbc>
 8001f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	dd02      	ble.n	8001f56 <main+0xbee>
		  I_termX = 100.0;
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <main+0xcb0>)
 8001f52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  }
	  if (I_termX < -100.0){
 8001f56:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 8001f5a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800201c <main+0xcb4>
 8001f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f66:	d502      	bpl.n	8001f6e <main+0xc06>
		  I_termX = -100.0;
 8001f68:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <main+0xcb8>)
 8001f6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  }
	  if (I_termY > 100.0){
 8001f6e:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 8001f72:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002024 <main+0xcbc>
 8001f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	dd02      	ble.n	8001f86 <main+0xc1e>
		  I_termY = 100.0;
 8001f80:	4b25      	ldr	r3, [pc, #148]	; (8002018 <main+0xcb0>)
 8001f82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  }
	  if (I_termY < -100.0){
 8001f86:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 8001f8a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800201c <main+0xcb4>
 8001f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f96:	d547      	bpl.n	8002028 <main+0xcc0>
		  I_termY = -100.0;
 8001f98:	4b21      	ldr	r3, [pc, #132]	; (8002020 <main+0xcb8>)
 8001f9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001f9e:	e043      	b.n	8002028 <main+0xcc0>
 8001fa0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001fa4:	3f40624d 	.word	0x3f40624d
 8001fa8:	20000480 	.word	0x20000480
 8001fac:	20000408 	.word	0x20000408
 8001fb0:	20000418 	.word	0x20000418
 8001fb4:	200004d8 	.word	0x200004d8
 8001fb8:	2000020c 	.word	0x2000020c
 8001fbc:	44160000 	.word	0x44160000
 8001fc0:	200001fc 	.word	0x200001fc
 8001fc4:	20000001 	.word	0x20000001
 8001fc8:	44de0000 	.word	0x44de0000
 8001fcc:	434e0000 	.word	0x434e0000
 8001fd0:	44dfc000 	.word	0x44dfc000
 8001fd4:	43420000 	.word	0x43420000
 8001fd8:	44dd0000 	.word	0x44dd0000
 8001fdc:	43460000 	.word	0x43460000
 8001fe0:	44df8000 	.word	0x44df8000
 8001fe4:	433f0000 	.word	0x433f0000
 8001fe8:	447a0000 	.word	0x447a0000
 8001fec:	c47a0000 	.word	0xc47a0000
 8001ff0:	451c4000 	.word	0x451c4000
 8001ff4:	449c4000 	.word	0x449c4000
 8001ff8:	44fa0000 	.word	0x44fa0000
 8001ffc:	20000388 	.word	0x20000388
 8002000:	20000428 	.word	0x20000428
 8002004:	200004e8 	.word	0x200004e8
 8002008:	200003f8 	.word	0x200003f8
 800200c:	200004f8 	.word	0x200004f8
 8002010:	200003e8 	.word	0x200003e8
 8002014:	200004ac 	.word	0x200004ac
 8002018:	42c80000 	.word	0x42c80000
 800201c:	c2c80000 	.word	0xc2c80000
 8002020:	c2c80000 	.word	0xc2c80000
 8002024:	42c80000 	.word	0x42c80000
	  }
	  if (I_termZ > 100.0){
 8002028:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 800202c:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8002024 <main+0xcbc>
 8002030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002038:	dd02      	ble.n	8002040 <main+0xcd8>
		  I_termZ = 100.0;
 800203a:	4b7c      	ldr	r3, [pc, #496]	; (800222c <main+0xec4>)
 800203c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  }
	  if (I_termZ < -100.0){
 8002040:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8002044:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002230 <main+0xec8>
 8002048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002050:	d502      	bpl.n	8002058 <main+0xcf0>
		  I_termZ = -100.0;
 8002052:	4b78      	ldr	r3, [pc, #480]	; (8002234 <main+0xecc>)
 8002054:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  }


	  // compute pids
	  roll_PID  = Kp_Y * P_termY + Ki_Y * I_termY - Kd_Y * D_termY_filtered;
 8002058:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800205c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002060:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002064:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002068:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800206c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002070:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002074:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002078:	edd7 7a06 	vldr	s15, [r7, #24]
 800207c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002084:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	  pitch_PID = Kp_X * P_termX + Ki_X * I_termX - Kd_X * D_termX_filtered;
 8002088:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800208c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002090:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002094:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002098:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 800209c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80020a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80020ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	  yaw_PID   = Kp_Z * P_termZ + Ki_Z * I_termZ;// - Kd_Z * D_termZ_filtered;
 80020b8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80020bc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80020c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80020c8:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 80020cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

	  //time_since_loop_start = __HAL_TIM_GET_COUNTER(&htim9);

	  // MIXER
	   M1 = throttle_filt + pitch_PID + roll_PID + yaw_PID;
 80020d8:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80020dc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80020e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020e4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80020e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ec:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80020f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	   M2 = throttle_filt + pitch_PID - roll_PID - yaw_PID;
 80020f8:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80020fc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002100:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002104:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002108:	ee37 7a67 	vsub.f32	s14, s14, s15
 800210c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002114:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	   M3 = throttle_filt - pitch_PID - roll_PID + yaw_PID;
 8002118:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800211c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002120:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002124:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002134:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	   M4 = throttle_filt - pitch_PID + roll_PID - yaw_PID;
 8002138:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800213c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002140:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002144:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002148:	ee37 7a27 	vadd.f32	s14, s14, s15
 800214c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002154:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	   M1 = throttle_filt + pitch_PID + roll_PID + yaw_PID;
	   M2 = throttle_filt + pitch_PID - roll_PID - yaw_PID;
	   M3 = throttle_filt - pitch_PID - roll_PID + yaw_PID;
	   M4 = throttle_filt - pitch_PID + roll_PID - yaw_PID;
*/
	M1 = constrain(M1, idle, 2500.0);
 8002158:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8002238 <main+0xed0>
 800215c:	edd7 0a2f 	vldr	s1, [r7, #188]	; 0xbc
 8002160:	ed97 0a25 	vldr	s0, [r7, #148]	; 0x94
 8002164:	f000 faba 	bl	80026dc <constrain>
 8002168:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	M2 = constrain(M2, idle, 2500.0);
 800216c:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8002238 <main+0xed0>
 8002170:	edd7 0a2f 	vldr	s1, [r7, #188]	; 0xbc
 8002174:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 8002178:	f000 fab0 	bl	80026dc <constrain>
 800217c:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
	M3 = constrain(M3, idle, 2500.0);
 8002180:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8002238 <main+0xed0>
 8002184:	edd7 0a2f 	vldr	s1, [r7, #188]	; 0xbc
 8002188:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 800218c:	f000 faa6 	bl	80026dc <constrain>
 8002190:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
	M4 = constrain(M4, idle, 2500.0);
 8002194:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8002238 <main+0xed0>
 8002198:	edd7 0a2f 	vldr	s1, [r7, #188]	; 0xbc
 800219c:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 80021a0:	f000 fa9c 	bl	80026dc <constrain>
 80021a4:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
	   //htim3.Instance->CCR1 = M4; //M1
	   //htim3.Instance->CCR2 = M1; //M3
	   //htim3.Instance->CCR3 = M2; //M2
	   //htim3.Instance->CCR4 = M3; //M4

	   htim3.Instance->CCR1 = M2;//M2;
 80021a8:	4b24      	ldr	r3, [pc, #144]	; (800223c <main+0xed4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80021b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b4:	ee17 2a90 	vmov	r2, s15
 80021b8:	635a      	str	r2, [r3, #52]	; 0x34
	   htim3.Instance->CCR2 = M3;//M3;
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <main+0xed4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80021c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021c6:	ee17 2a90 	vmov	r2, s15
 80021ca:	639a      	str	r2, [r3, #56]	; 0x38
	   htim3.Instance->CCR3 = M1;//M1;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <main+0xed4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80021d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021d8:	ee17 2a90 	vmov	r2, s15
 80021dc:	63da      	str	r2, [r3, #60]	; 0x3c
	   htim3.Instance->CCR4 = M4;//M4;
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <main+0xed4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80021e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ea:	ee17 2a90 	vmov	r2, s15
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40




	   // TIME-CONTROL
	  time_since_loop_start = __HAL_TIM_GET_COUNTER(&htim9); // one cnt == 1 micros
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <main+0xed8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <main+0xedc>)
 80021fa:	801a      	strh	r2, [r3, #0]
	  time_passed = time_since_loop_start;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <main+0xedc>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	  if (time_since_loop_start < 500){
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <main+0xedc>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800220c:	d207      	bcs.n	800221e <main+0xeb6>
		  delay_micros(500 - time_since_loop_start);
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <main+0xedc>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8002216:	b29b      	uxth	r3, r3
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f855 	bl	80012c8 <delay_micros>
	  while(arm_ok) {
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <main+0xee0>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f47f abe8 	bne.w	80019f8 <main+0x690>
	  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8002228:	f7ff ba9c 	b.w	8001764 <main+0x3fc>
 800222c:	42c80000 	.word	0x42c80000
 8002230:	c2c80000 	.word	0xc2c80000
 8002234:	c2c80000 	.word	0xc2c80000
 8002238:	451c4000 	.word	0x451c4000
 800223c:	20000280 	.word	0x20000280
 8002240:	20000438 	.word	0x20000438
 8002244:	200004d6 	.word	0x200004d6
 8002248:	200001fc 	.word	0x200001fc

0800224c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b094      	sub	sp, #80	; 0x50
 8002250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002252:	f107 0320 	add.w	r3, r7, #32
 8002256:	2230      	movs	r2, #48	; 0x30
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f006 fbe4 	bl	8008a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <SystemClock_Config+0xc8>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <SystemClock_Config+0xc8>)
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227e:	6413      	str	r3, [r2, #64]	; 0x40
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <SystemClock_Config+0xc8>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800228c:	2300      	movs	r3, #0
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	4b21      	ldr	r3, [pc, #132]	; (8002318 <SystemClock_Config+0xcc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a20      	ldr	r2, [pc, #128]	; (8002318 <SystemClock_Config+0xcc>)
 8002296:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <SystemClock_Config+0xcc>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022a8:	2301      	movs	r3, #1
 80022aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b2:	2302      	movs	r3, #2
 80022b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022bc:	2304      	movs	r3, #4
 80022be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80022c0:	2364      	movs	r3, #100	; 0x64
 80022c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022c4:	2302      	movs	r3, #2
 80022c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80022c8:	2303      	movs	r3, #3
 80022ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022cc:	f107 0320 	add.w	r3, r7, #32
 80022d0:	4618      	mov	r0, r3
 80022d2:	f004 f80f 	bl	80062f4 <HAL_RCC_OscConfig>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022dc:	f000 f9c2 	bl	8002664 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e0:	230f      	movs	r3, #15
 80022e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e4:	2302      	movs	r3, #2
 80022e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	2103      	movs	r1, #3
 80022fc:	4618      	mov	r0, r3
 80022fe:	f004 fa71 	bl	80067e4 <HAL_RCC_ClockConfig>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002308:	f000 f9ac 	bl	8002664 <Error_Handler>
  }
}
 800230c:	bf00      	nop
 800230e:	3750      	adds	r7, #80	; 0x50
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40023800 	.word	0x40023800
 8002318:	40007000 	.word	0x40007000

0800231c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <MX_I2C1_Init+0x50>)
 8002322:	4a13      	ldr	r2, [pc, #76]	; (8002370 <MX_I2C1_Init+0x54>)
 8002324:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <MX_I2C1_Init+0x50>)
 8002328:	4a12      	ldr	r2, [pc, #72]	; (8002374 <MX_I2C1_Init+0x58>)
 800232a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <MX_I2C1_Init+0x50>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <MX_I2C1_Init+0x50>)
 8002334:	2200      	movs	r2, #0
 8002336:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <MX_I2C1_Init+0x50>)
 800233a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800233e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <MX_I2C1_Init+0x50>)
 8002342:	2200      	movs	r2, #0
 8002344:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <MX_I2C1_Init+0x50>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800234c:	4b07      	ldr	r3, [pc, #28]	; (800236c <MX_I2C1_Init+0x50>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <MX_I2C1_Init+0x50>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002358:	4804      	ldr	r0, [pc, #16]	; (800236c <MX_I2C1_Init+0x50>)
 800235a:	f001 fc51 	bl	8003c00 <HAL_I2C_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002364:	f000 f97e 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	2000021c 	.word	0x2000021c
 8002370:	40005400 	.word	0x40005400
 8002374:	00061a80 	.word	0x00061a80

08002378 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08e      	sub	sp, #56	; 0x38
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238c:	f107 0320 	add.w	r3, r7, #32
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
 80023a4:	615a      	str	r2, [r3, #20]
 80023a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023a8:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <MX_TIM3_Init+0x128>)
 80023aa:	4a3e      	ldr	r2, [pc, #248]	; (80024a4 <MX_TIM3_Init+0x12c>)
 80023ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 80023ae:	4b3c      	ldr	r3, [pc, #240]	; (80024a0 <MX_TIM3_Init+0x128>)
 80023b0:	2209      	movs	r2, #9
 80023b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b4:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <MX_TIM3_Init+0x128>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500-1;
 80023ba:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <MX_TIM3_Init+0x128>)
 80023bc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80023c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c2:	4b37      	ldr	r3, [pc, #220]	; (80024a0 <MX_TIM3_Init+0x128>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c8:	4b35      	ldr	r3, [pc, #212]	; (80024a0 <MX_TIM3_Init+0x128>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023ce:	4834      	ldr	r0, [pc, #208]	; (80024a0 <MX_TIM3_Init+0x128>)
 80023d0:	f004 fc04 	bl	8006bdc <HAL_TIM_Base_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80023da:	f000 f943 	bl	8002664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023e8:	4619      	mov	r1, r3
 80023ea:	482d      	ldr	r0, [pc, #180]	; (80024a0 <MX_TIM3_Init+0x128>)
 80023ec:	f004 fe6c 	bl	80070c8 <HAL_TIM_ConfigClockSource>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80023f6:	f000 f935 	bl	8002664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023fa:	4829      	ldr	r0, [pc, #164]	; (80024a0 <MX_TIM3_Init+0x128>)
 80023fc:	f004 fc98 	bl	8006d30 <HAL_TIM_PWM_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002406:	f000 f92d 	bl	8002664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002412:	f107 0320 	add.w	r3, r7, #32
 8002416:	4619      	mov	r1, r3
 8002418:	4821      	ldr	r0, [pc, #132]	; (80024a0 <MX_TIM3_Init+0x128>)
 800241a:	f005 f9e9 	bl	80077f0 <HAL_TIMEx_MasterConfigSynchronization>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002424:	f000 f91e 	bl	8002664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002428:	2360      	movs	r3, #96	; 0x60
 800242a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	2200      	movs	r2, #0
 800243c:	4619      	mov	r1, r3
 800243e:	4818      	ldr	r0, [pc, #96]	; (80024a0 <MX_TIM3_Init+0x128>)
 8002440:	f004 fd80 	bl	8006f44 <HAL_TIM_PWM_ConfigChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800244a:	f000 f90b 	bl	8002664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	2204      	movs	r2, #4
 8002452:	4619      	mov	r1, r3
 8002454:	4812      	ldr	r0, [pc, #72]	; (80024a0 <MX_TIM3_Init+0x128>)
 8002456:	f004 fd75 	bl	8006f44 <HAL_TIM_PWM_ConfigChannel>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002460:	f000 f900 	bl	8002664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	2208      	movs	r2, #8
 8002468:	4619      	mov	r1, r3
 800246a:	480d      	ldr	r0, [pc, #52]	; (80024a0 <MX_TIM3_Init+0x128>)
 800246c:	f004 fd6a 	bl	8006f44 <HAL_TIM_PWM_ConfigChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002476:	f000 f8f5 	bl	8002664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	220c      	movs	r2, #12
 800247e:	4619      	mov	r1, r3
 8002480:	4807      	ldr	r0, [pc, #28]	; (80024a0 <MX_TIM3_Init+0x128>)
 8002482:	f004 fd5f 	bl	8006f44 <HAL_TIM_PWM_ConfigChannel>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800248c:	f000 f8ea 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002490:	4803      	ldr	r0, [pc, #12]	; (80024a0 <MX_TIM3_Init+0x128>)
 8002492:	f000 f9ff 	bl	8002894 <HAL_TIM_MspPostInit>

}
 8002496:	bf00      	nop
 8002498:	3738      	adds	r7, #56	; 0x38
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000280 	.word	0x20000280
 80024a4:	40000400 	.word	0x40000400

080024a8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ae:	463b      	mov	r3, r7
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <MX_TIM9_Init+0x6c>)
 80024bc:	4a16      	ldr	r2, [pc, #88]	; (8002518 <MX_TIM9_Init+0x70>)
 80024be:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <MX_TIM9_Init+0x6c>)
 80024c2:	2263      	movs	r2, #99	; 0x63
 80024c4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <MX_TIM9_Init+0x6c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <MX_TIM9_Init+0x6c>)
 80024ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024d2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <MX_TIM9_Init+0x6c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <MX_TIM9_Init+0x6c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80024e0:	480c      	ldr	r0, [pc, #48]	; (8002514 <MX_TIM9_Init+0x6c>)
 80024e2:	f004 fb7b 	bl	8006bdc <HAL_TIM_Base_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80024ec:	f000 f8ba 	bl	8002664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80024f6:	463b      	mov	r3, r7
 80024f8:	4619      	mov	r1, r3
 80024fa:	4806      	ldr	r0, [pc, #24]	; (8002514 <MX_TIM9_Init+0x6c>)
 80024fc:	f004 fde4 	bl	80070c8 <HAL_TIM_ConfigClockSource>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002506:	f000 f8ad 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000438 	.word	0x20000438
 8002518:	40014000 	.word	0x40014000

0800251c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <MX_USART1_UART_Init+0x48>)
 8002522:	4a11      	ldr	r2, [pc, #68]	; (8002568 <MX_USART1_UART_Init+0x4c>)
 8002524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <MX_USART1_UART_Init+0x48>)
 8002528:	4a10      	ldr	r2, [pc, #64]	; (800256c <MX_USART1_UART_Init+0x50>)
 800252a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <MX_USART1_UART_Init+0x48>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002532:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <MX_USART1_UART_Init+0x48>)
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <MX_USART1_UART_Init+0x48>)
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <MX_USART1_UART_Init+0x48>)
 8002540:	220c      	movs	r2, #12
 8002542:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <MX_USART1_UART_Init+0x48>)
 8002546:	2200      	movs	r2, #0
 8002548:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <MX_USART1_UART_Init+0x48>)
 800254c:	2200      	movs	r2, #0
 800254e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002550:	4804      	ldr	r0, [pc, #16]	; (8002564 <MX_USART1_UART_Init+0x48>)
 8002552:	f005 f9bb 	bl	80078cc <HAL_UART_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 800255c:	f000 f882 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}
 8002564:	200003a4 	.word	0x200003a4
 8002568:	40011000 	.word	0x40011000
 800256c:	000668a0 	.word	0x000668a0

08002570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <MX_DMA_Init+0x4c>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <MX_DMA_Init+0x4c>)
 8002580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <MX_DMA_Init+0x4c>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	203a      	movs	r0, #58	; 0x3a
 8002598:	f000 fd33 	bl	8003002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800259c:	203a      	movs	r0, #58	; 0x3a
 800259e:	f000 fd4c 	bl	800303a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	2046      	movs	r0, #70	; 0x46
 80025a8:	f000 fd2b 	bl	8003002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80025ac:	2046      	movs	r0, #70	; 0x46
 80025ae:	f000 fd44 	bl	800303a <HAL_NVIC_EnableIRQ>

}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800

080025c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c6:	f107 030c 	add.w	r3, r7, #12
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]
 80025d2:	60da      	str	r2, [r3, #12]
 80025d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <MX_GPIO_Init+0x9c>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a1f      	ldr	r2, [pc, #124]	; (800265c <MX_GPIO_Init+0x9c>)
 80025e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <MX_GPIO_Init+0x9c>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <MX_GPIO_Init+0x9c>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a18      	ldr	r2, [pc, #96]	; (800265c <MX_GPIO_Init+0x9c>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <MX_GPIO_Init+0x9c>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <MX_GPIO_Init+0x9c>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4a11      	ldr	r2, [pc, #68]	; (800265c <MX_GPIO_Init+0x9c>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6313      	str	r3, [r2, #48]	; 0x30
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <MX_GPIO_Init+0x9c>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 800262a:	2200      	movs	r2, #0
 800262c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002630:	480b      	ldr	r0, [pc, #44]	; (8002660 <MX_GPIO_Init+0xa0>)
 8002632:	f001 fab1 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8002636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800263a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263c:	2301      	movs	r3, #1
 800263e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002648:	f107 030c 	add.w	r3, r7, #12
 800264c:	4619      	mov	r1, r3
 800264e:	4804      	ldr	r0, [pc, #16]	; (8002660 <MX_GPIO_Init+0xa0>)
 8002650:	f001 f91e 	bl	8003890 <HAL_GPIO_Init>

}
 8002654:	bf00      	nop
 8002656:	3720      	adds	r7, #32
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	40020400 	.word	0x40020400

08002664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002668:	b672      	cpsid	i
}
 800266a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800266c:	e7fe      	b.n	800266c <Error_Handler+0x8>

0800266e <map>:

#include "map.h"



float map(float value, float MIN_DES, float MAX_DES, float MIN_IN, float MAX_IN){
 800266e:	b480      	push	{r7}
 8002670:	b089      	sub	sp, #36	; 0x24
 8002672:	af00      	add	r7, sp, #0
 8002674:	ed87 0a05 	vstr	s0, [r7, #20]
 8002678:	edc7 0a04 	vstr	s1, [r7, #16]
 800267c:	ed87 1a03 	vstr	s2, [r7, #12]
 8002680:	edc7 1a02 	vstr	s3, [r7, #8]
 8002684:	ed87 2a01 	vstr	s4, [r7, #4]
float out;
float slope = (MAX_DES-MIN_DES) / (MAX_IN - MIN_IN);
 8002688:	ed97 7a03 	vldr	s14, [r7, #12]
 800268c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002690:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002694:	ed97 7a01 	vldr	s14, [r7, #4]
 8002698:	edd7 7a02 	vldr	s15, [r7, #8]
 800269c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026a4:	edc7 7a07 	vstr	s15, [r7, #28]
out = slope * (value - MIN_IN) + MIN_DES;
 80026a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80026ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80026b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80026b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80026c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c4:	edc7 7a06 	vstr	s15, [r7, #24]
return (out);
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	ee07 3a90 	vmov	s15, r3
}
 80026ce:	eeb0 0a67 	vmov.f32	s0, s15
 80026d2:	3724      	adds	r7, #36	; 0x24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <constrain>:


float constrain(float value, float MIN, float MAX){
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80026e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80026ea:	ed87 1a01 	vstr	s2, [r7, #4]
	float out = value;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	617b      	str	r3, [r7, #20]
if (out < MIN){
 80026f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80026f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002702:	d501      	bpl.n	8002708 <constrain+0x2c>
	out = MIN;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	617b      	str	r3, [r7, #20]
}
if (out > MAX){
 8002708:	ed97 7a05 	vldr	s14, [r7, #20]
 800270c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002718:	dd01      	ble.n	800271e <constrain+0x42>
	out = MAX;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	617b      	str	r3, [r7, #20]
}
return out;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	ee07 3a90 	vmov	s15, r3
}
 8002724:	eeb0 0a67 	vmov.f32	s0, s15
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_MspInit+0x4c>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	4a0f      	ldr	r2, [pc, #60]	; (8002780 <HAL_MspInit+0x4c>)
 8002744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002748:	6453      	str	r3, [r2, #68]	; 0x44
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <HAL_MspInit+0x4c>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_MspInit+0x4c>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a08      	ldr	r2, [pc, #32]	; (8002780 <HAL_MspInit+0x4c>)
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_MspInit+0x4c>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800

08002784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_I2C_MspInit+0x94>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d133      	bne.n	800280e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <HAL_I2C_MspInit+0x98>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a1b      	ldr	r2, [pc, #108]	; (800281c <HAL_I2C_MspInit+0x98>)
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_I2C_MspInit+0x98>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027c2:	23c0      	movs	r3, #192	; 0xc0
 80027c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c6:	2312      	movs	r3, #18
 80027c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ce:	2303      	movs	r3, #3
 80027d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027d2:	2304      	movs	r3, #4
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	4810      	ldr	r0, [pc, #64]	; (8002820 <HAL_I2C_MspInit+0x9c>)
 80027de:	f001 f857 	bl	8003890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	4b0d      	ldr	r3, [pc, #52]	; (800281c <HAL_I2C_MspInit+0x98>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	4a0c      	ldr	r2, [pc, #48]	; (800281c <HAL_I2C_MspInit+0x98>)
 80027ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027f0:	6413      	str	r3, [r2, #64]	; 0x40
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_I2C_MspInit+0x98>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	201f      	movs	r0, #31
 8002804:	f000 fbfd 	bl	8003002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002808:	201f      	movs	r0, #31
 800280a:	f000 fc16 	bl	800303a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800280e:	bf00      	nop
 8002810:	3728      	adds	r7, #40	; 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40005400 	.word	0x40005400
 800281c:	40023800 	.word	0x40023800
 8002820:	40020400 	.word	0x40020400

08002824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a15      	ldr	r2, [pc, #84]	; (8002888 <HAL_TIM_Base_MspInit+0x64>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10e      	bne.n	8002854 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_TIM_Base_MspInit+0x68>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a13      	ldr	r2, [pc, #76]	; (800288c <HAL_TIM_Base_MspInit+0x68>)
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_TIM_Base_MspInit+0x68>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002852:	e012      	b.n	800287a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM9)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <HAL_TIM_Base_MspInit+0x6c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10d      	bne.n	800287a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_TIM_Base_MspInit+0x68>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_TIM_Base_MspInit+0x68>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	6453      	str	r3, [r2, #68]	; 0x44
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <HAL_TIM_Base_MspInit+0x68>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40000400 	.word	0x40000400
 800288c:	40023800 	.word	0x40023800
 8002890:	40014000 	.word	0x40014000

08002894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a12      	ldr	r2, [pc, #72]	; (80028fc <HAL_TIM_MspPostInit+0x68>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d11d      	bne.n	80028f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_TIM_MspPostInit+0x6c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a10      	ldr	r2, [pc, #64]	; (8002900 <HAL_TIM_MspPostInit+0x6c>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <HAL_TIM_MspPostInit+0x6c>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80028d2:	2333      	movs	r3, #51	; 0x33
 80028d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d6:	2302      	movs	r3, #2
 80028d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028e2:	2302      	movs	r3, #2
 80028e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e6:	f107 030c 	add.w	r3, r7, #12
 80028ea:	4619      	mov	r1, r3
 80028ec:	4805      	ldr	r0, [pc, #20]	; (8002904 <HAL_TIM_MspPostInit+0x70>)
 80028ee:	f000 ffcf 	bl	8003890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028f2:	bf00      	nop
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40000400 	.word	0x40000400
 8002900:	40023800 	.word	0x40023800
 8002904:	40020400 	.word	0x40020400

08002908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a4d      	ldr	r2, [pc, #308]	; (8002a5c <HAL_UART_MspInit+0x154>)
 8002926:	4293      	cmp	r3, r2
 8002928:	f040 8093 	bne.w	8002a52 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800292c:	2300      	movs	r3, #0
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	4b4b      	ldr	r3, [pc, #300]	; (8002a60 <HAL_UART_MspInit+0x158>)
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_UART_MspInit+0x158>)
 8002936:	f043 0310 	orr.w	r3, r3, #16
 800293a:	6453      	str	r3, [r2, #68]	; 0x44
 800293c:	4b48      	ldr	r3, [pc, #288]	; (8002a60 <HAL_UART_MspInit+0x158>)
 800293e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	4b44      	ldr	r3, [pc, #272]	; (8002a60 <HAL_UART_MspInit+0x158>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	4a43      	ldr	r2, [pc, #268]	; (8002a60 <HAL_UART_MspInit+0x158>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6313      	str	r3, [r2, #48]	; 0x30
 8002958:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <HAL_UART_MspInit+0x158>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002964:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002976:	2307      	movs	r3, #7
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	4838      	ldr	r0, [pc, #224]	; (8002a64 <HAL_UART_MspInit+0x15c>)
 8002982:	f000 ff85 	bl	8003890 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002986:	4b38      	ldr	r3, [pc, #224]	; (8002a68 <HAL_UART_MspInit+0x160>)
 8002988:	4a38      	ldr	r2, [pc, #224]	; (8002a6c <HAL_UART_MspInit+0x164>)
 800298a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800298c:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <HAL_UART_MspInit+0x160>)
 800298e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002992:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002994:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <HAL_UART_MspInit+0x160>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800299a:	4b33      	ldr	r3, [pc, #204]	; (8002a68 <HAL_UART_MspInit+0x160>)
 800299c:	2200      	movs	r2, #0
 800299e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029a0:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_UART_MspInit+0x160>)
 80029a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029a8:	4b2f      	ldr	r3, [pc, #188]	; (8002a68 <HAL_UART_MspInit+0x160>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ae:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <HAL_UART_MspInit+0x160>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80029b4:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <HAL_UART_MspInit+0x160>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029ba:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <HAL_UART_MspInit+0x160>)
 80029bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029c0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029c2:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <HAL_UART_MspInit+0x160>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029c8:	4827      	ldr	r0, [pc, #156]	; (8002a68 <HAL_UART_MspInit+0x160>)
 80029ca:	f000 fb51 	bl	8003070 <HAL_DMA_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80029d4:	f7ff fe46 	bl	8002664 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a23      	ldr	r2, [pc, #140]	; (8002a68 <HAL_UART_MspInit+0x160>)
 80029dc:	639a      	str	r2, [r3, #56]	; 0x38
 80029de:	4a22      	ldr	r2, [pc, #136]	; (8002a68 <HAL_UART_MspInit+0x160>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80029e4:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <HAL_UART_MspInit+0x168>)
 80029e6:	4a23      	ldr	r2, [pc, #140]	; (8002a74 <HAL_UART_MspInit+0x16c>)
 80029e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80029ea:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <HAL_UART_MspInit+0x168>)
 80029ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029f2:	4b1f      	ldr	r3, [pc, #124]	; (8002a70 <HAL_UART_MspInit+0x168>)
 80029f4:	2240      	movs	r2, #64	; 0x40
 80029f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029f8:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <HAL_UART_MspInit+0x168>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029fe:	4b1c      	ldr	r3, [pc, #112]	; (8002a70 <HAL_UART_MspInit+0x168>)
 8002a00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a04:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <HAL_UART_MspInit+0x168>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a0c:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <HAL_UART_MspInit+0x168>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a12:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <HAL_UART_MspInit+0x168>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <HAL_UART_MspInit+0x168>)
 8002a1a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a1e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <HAL_UART_MspInit+0x168>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a26:	4812      	ldr	r0, [pc, #72]	; (8002a70 <HAL_UART_MspInit+0x168>)
 8002a28:	f000 fb22 	bl	8003070 <HAL_DMA_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002a32:	f7ff fe17 	bl	8002664 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <HAL_UART_MspInit+0x168>)
 8002a3a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a3c:	4a0c      	ldr	r2, [pc, #48]	; (8002a70 <HAL_UART_MspInit+0x168>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2100      	movs	r1, #0
 8002a46:	2025      	movs	r0, #37	; 0x25
 8002a48:	f000 fadb 	bl	8003002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a4c:	2025      	movs	r0, #37	; 0x25
 8002a4e:	f000 faf4 	bl	800303a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a52:	bf00      	nop
 8002a54:	3728      	adds	r7, #40	; 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40011000 	.word	0x40011000
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40020000 	.word	0x40020000
 8002a68:	20000328 	.word	0x20000328
 8002a6c:	40026440 	.word	0x40026440
 8002a70:	200002c8 	.word	0x200002c8
 8002a74:	400264b8 	.word	0x400264b8

08002a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <NMI_Handler+0x4>

08002a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a82:	e7fe      	b.n	8002a82 <HardFault_Handler+0x4>

08002a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a88:	e7fe      	b.n	8002a88 <MemManage_Handler+0x4>

08002a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a8e:	e7fe      	b.n	8002a8e <BusFault_Handler+0x4>

08002a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <UsageFault_Handler+0x4>

08002a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac4:	f000 f97e 	bl	8002dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}

08002acc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <I2C1_EV_IRQHandler+0x10>)
 8002ad2:	f001 fcf9 	bl	80044c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2000021c 	.word	0x2000021c

08002ae0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ae4:	4802      	ldr	r0, [pc, #8]	; (8002af0 <USART1_IRQHandler+0x10>)
 8002ae6:	f004 ffa3 	bl	8007a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200003a4 	.word	0x200003a4

08002af4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <DMA2_Stream2_IRQHandler+0x10>)
 8002afa:	f000 fc51 	bl	80033a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000328 	.word	0x20000328

08002b08 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <DMA2_Stream7_IRQHandler+0x10>)
 8002b0e:	f000 fc47 	bl	80033a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200002c8 	.word	0x200002c8

08002b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
	return 1;
 8002b20:	2301      	movs	r3, #1
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <_kill>:

int _kill(int pid, int sig)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b36:	f005 ff4d 	bl	80089d4 <__errno>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2216      	movs	r2, #22
 8002b3e:	601a      	str	r2, [r3, #0]
	return -1;
 8002b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_exit>:

void _exit (int status)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ffe7 	bl	8002b2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b5e:	e7fe      	b.n	8002b5e <_exit+0x12>

08002b60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	e00a      	b.n	8002b88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b72:	f3af 8000 	nop.w
 8002b76:	4601      	mov	r1, r0
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	60ba      	str	r2, [r7, #8]
 8002b7e:	b2ca      	uxtb	r2, r1
 8002b80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	3301      	adds	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	dbf0      	blt.n	8002b72 <_read+0x12>
	}

return len;
 8002b90:	687b      	ldr	r3, [r7, #4]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e009      	b.n	8002bc0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	60ba      	str	r2, [r7, #8]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	dbf1      	blt.n	8002bac <_write+0x12>
	}
	return len;
 8002bc8:	687b      	ldr	r3, [r7, #4]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <_close>:

int _close(int file)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
	return -1;
 8002bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bfa:	605a      	str	r2, [r3, #4]
	return 0;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <_isatty>:

int _isatty(int file)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
	return 1;
 8002c12:	2301      	movs	r3, #1
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
	return 0;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c44:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <_sbrk+0x5c>)
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <_sbrk+0x60>)
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c50:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <_sbrk+0x64>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <_sbrk+0x64>)
 8002c5a:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <_sbrk+0x68>)
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <_sbrk+0x64>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d207      	bcs.n	8002c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c6c:	f005 feb2 	bl	80089d4 <__errno>
 8002c70:	4603      	mov	r3, r0
 8002c72:	220c      	movs	r2, #12
 8002c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c76:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7a:	e009      	b.n	8002c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <_sbrk+0x64>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c82:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <_sbrk+0x64>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <_sbrk+0x64>)
 8002c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20020000 	.word	0x20020000
 8002c9c:	00000400 	.word	0x00000400
 8002ca0:	20000200 	.word	0x20000200
 8002ca4:	20000520 	.word	0x20000520

08002ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <SystemInit+0x20>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <SystemInit+0x20>)
 8002cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cd0:	480d      	ldr	r0, [pc, #52]	; (8002d08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cd2:	490e      	ldr	r1, [pc, #56]	; (8002d0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd8:	e002      	b.n	8002ce0 <LoopCopyDataInit>

08002cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cde:	3304      	adds	r3, #4

08002ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce4:	d3f9      	bcc.n	8002cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ce8:	4c0b      	ldr	r4, [pc, #44]	; (8002d18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cec:	e001      	b.n	8002cf2 <LoopFillZerobss>

08002cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf0:	3204      	adds	r2, #4

08002cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf4:	d3fb      	bcc.n	8002cee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cf6:	f7ff ffd7 	bl	8002ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cfa:	f005 fe71 	bl	80089e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cfe:	f7fe fb33 	bl	8001368 <main>
  bx  lr    
 8002d02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d0c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002d10:	0800b80c 	.word	0x0800b80c
  ldr r2, =_sbss
 8002d14:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002d18:	2000051c 	.word	0x2000051c

08002d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d1c:	e7fe      	b.n	8002d1c <ADC_IRQHandler>
	...

08002d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d24:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <HAL_Init+0x40>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0d      	ldr	r2, [pc, #52]	; (8002d60 <HAL_Init+0x40>)
 8002d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_Init+0x40>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <HAL_Init+0x40>)
 8002d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_Init+0x40>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <HAL_Init+0x40>)
 8002d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d48:	2003      	movs	r0, #3
 8002d4a:	f000 f94f 	bl	8002fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d4e:	200f      	movs	r0, #15
 8002d50:	f000 f808 	bl	8002d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d54:	f7ff fcee 	bl	8002734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023c00 	.word	0x40023c00

08002d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_InitTick+0x54>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_InitTick+0x58>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4619      	mov	r1, r3
 8002d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f967 	bl	8003056 <HAL_SYSTICK_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00e      	b.n	8002db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b0f      	cmp	r3, #15
 8002d96:	d80a      	bhi.n	8002dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f000 f92f 	bl	8003002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002da4:	4a06      	ldr	r2, [pc, #24]	; (8002dc0 <HAL_InitTick+0x5c>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000004 	.word	0x20000004
 8002dbc:	2000000c 	.word	0x2000000c
 8002dc0:	20000008 	.word	0x20000008

08002dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_IncTick+0x20>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_IncTick+0x24>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <HAL_IncTick+0x24>)
 8002dd6:	6013      	str	r3, [r2, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	2000000c 	.word	0x2000000c
 8002de8:	20000508 	.word	0x20000508

08002dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return uwTick;
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_GetTick+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000508 	.word	0x20000508

08002e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e0c:	f7ff ffee 	bl	8002dec <HAL_GetTick>
 8002e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d005      	beq.n	8002e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_Delay+0x44>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e2a:	bf00      	nop
 8002e2c:	f7ff ffde 	bl	8002dec <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d8f7      	bhi.n	8002e2c <HAL_Delay+0x28>
  {
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	2000000c 	.word	0x2000000c

08002e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <__NVIC_SetPriorityGrouping+0x44>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e7e:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <__NVIC_SetPriorityGrouping+0x44>)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	60d3      	str	r3, [r2, #12]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <__NVIC_GetPriorityGrouping+0x18>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	db0b      	blt.n	8002eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	f003 021f 	and.w	r2, r3, #31
 8002ec8:	4907      	ldr	r1, [pc, #28]	; (8002ee8 <__NVIC_EnableIRQ+0x38>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	e000e100 	.word	0xe000e100

08002eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	6039      	str	r1, [r7, #0]
 8002ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	db0a      	blt.n	8002f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	490c      	ldr	r1, [pc, #48]	; (8002f38 <__NVIC_SetPriority+0x4c>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	0112      	lsls	r2, r2, #4
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f14:	e00a      	b.n	8002f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4908      	ldr	r1, [pc, #32]	; (8002f3c <__NVIC_SetPriority+0x50>)
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	3b04      	subs	r3, #4
 8002f24:	0112      	lsls	r2, r2, #4
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	440b      	add	r3, r1
 8002f2a:	761a      	strb	r2, [r3, #24]
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000e100 	.word	0xe000e100
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	; 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f1c3 0307 	rsb	r3, r3, #7
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	bf28      	it	cs
 8002f5e:	2304      	movcs	r3, #4
 8002f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d902      	bls.n	8002f70 <NVIC_EncodePriority+0x30>
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3b03      	subs	r3, #3
 8002f6e:	e000      	b.n	8002f72 <NVIC_EncodePriority+0x32>
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	f04f 32ff 	mov.w	r2, #4294967295
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	401a      	ands	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f88:	f04f 31ff 	mov.w	r1, #4294967295
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	43d9      	mvns	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f98:	4313      	orrs	r3, r2
         );
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3724      	adds	r7, #36	; 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fb8:	d301      	bcc.n	8002fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e00f      	b.n	8002fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <SysTick_Config+0x40>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fc6:	210f      	movs	r1, #15
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	f7ff ff8e 	bl	8002eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <SysTick_Config+0x40>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <SysTick_Config+0x40>)
 8002fd8:	2207      	movs	r2, #7
 8002fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	e000e010 	.word	0xe000e010

08002fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ff29 	bl	8002e4c <__NVIC_SetPriorityGrouping>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003014:	f7ff ff3e 	bl	8002e94 <__NVIC_GetPriorityGrouping>
 8003018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	6978      	ldr	r0, [r7, #20]
 8003020:	f7ff ff8e 	bl	8002f40 <NVIC_EncodePriority>
 8003024:	4602      	mov	r2, r0
 8003026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff5d 	bl	8002eec <__NVIC_SetPriority>
}
 8003032:	bf00      	nop
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff31 	bl	8002eb0 <__NVIC_EnableIRQ>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ffa2 	bl	8002fa8 <SysTick_Config>
 8003064:	4603      	mov	r3, r0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff feb6 	bl	8002dec <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e099      	b.n	80031c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ac:	e00f      	b.n	80030ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ae:	f7ff fe9d 	bl	8002dec <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b05      	cmp	r3, #5
 80030ba:	d908      	bls.n	80030ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2203      	movs	r2, #3
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e078      	b.n	80031c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e8      	bne.n	80030ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4b38      	ldr	r3, [pc, #224]	; (80031c8 <HAL_DMA_Init+0x158>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	2b04      	cmp	r3, #4
 8003126:	d107      	bne.n	8003138 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	4313      	orrs	r3, r2
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f023 0307 	bic.w	r3, r3, #7
 800314e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	2b04      	cmp	r3, #4
 8003160:	d117      	bne.n	8003192 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00e      	beq.n	8003192 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fb0f 	bl	8003798 <DMA_CheckFifoParam>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2240      	movs	r2, #64	; 0x40
 8003184:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800318e:	2301      	movs	r3, #1
 8003190:	e016      	b.n	80031c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fac6 	bl	800372c <DMA_CalcBaseAndBitshift>
 80031a0:	4603      	mov	r3, r0
 80031a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a8:	223f      	movs	r2, #63	; 0x3f
 80031aa:	409a      	lsls	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	f010803f 	.word	0xf010803f

080031cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_DMA_Start_IT+0x26>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e040      	b.n	8003274 <HAL_DMA_Start_IT+0xa8>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d12f      	bne.n	8003266 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2202      	movs	r2, #2
 800320a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fa58 	bl	80036d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003224:	223f      	movs	r2, #63	; 0x3f
 8003226:	409a      	lsls	r2, r3
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0216 	orr.w	r2, r2, #22
 800323a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0208 	orr.w	r2, r2, #8
 8003252:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e005      	b.n	8003272 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800326e:	2302      	movs	r3, #2
 8003270:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003272:	7dfb      	ldrb	r3, [r7, #23]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003288:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800328a:	f7ff fdaf 	bl	8002dec <HAL_GetTick>
 800328e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d008      	beq.n	80032ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2280      	movs	r2, #128	; 0x80
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e052      	b.n	8003354 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0216 	bic.w	r2, r2, #22
 80032bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d103      	bne.n	80032de <HAL_DMA_Abort+0x62>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d007      	beq.n	80032ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0208 	bic.w	r2, r2, #8
 80032ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032fe:	e013      	b.n	8003328 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003300:	f7ff fd74 	bl	8002dec <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b05      	cmp	r3, #5
 800330c:	d90c      	bls.n	8003328 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2220      	movs	r2, #32
 8003312:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2203      	movs	r2, #3
 8003318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e015      	b.n	8003354 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e4      	bne.n	8003300 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	223f      	movs	r2, #63	; 0x3f
 800333c:	409a      	lsls	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d004      	beq.n	800337a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e00c      	b.n	8003394 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2205      	movs	r2, #5
 800337e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033ac:	4b92      	ldr	r3, [pc, #584]	; (80035f8 <HAL_DMA_IRQHandler+0x258>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a92      	ldr	r2, [pc, #584]	; (80035fc <HAL_DMA_IRQHandler+0x25c>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	0a9b      	lsrs	r3, r3, #10
 80033b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	2208      	movs	r2, #8
 80033cc:	409a      	lsls	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d01a      	beq.n	800340c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0204 	bic.w	r2, r2, #4
 80033f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	2208      	movs	r2, #8
 80033fa:	409a      	lsls	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	2201      	movs	r2, #1
 8003412:	409a      	lsls	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d012      	beq.n	8003442 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	2201      	movs	r2, #1
 8003430:	409a      	lsls	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	f043 0202 	orr.w	r2, r3, #2
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	2204      	movs	r2, #4
 8003448:	409a      	lsls	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d012      	beq.n	8003478 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00b      	beq.n	8003478 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	2204      	movs	r2, #4
 8003466:	409a      	lsls	r2, r3
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003470:	f043 0204 	orr.w	r2, r3, #4
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	2210      	movs	r2, #16
 800347e:	409a      	lsls	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d043      	beq.n	8003510 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d03c      	beq.n	8003510 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349a:	2210      	movs	r2, #16
 800349c:	409a      	lsls	r2, r3
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d018      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d108      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d024      	beq.n	8003510 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4798      	blx	r3
 80034ce:	e01f      	b.n	8003510 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01b      	beq.n	8003510 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
 80034e0:	e016      	b.n	8003510 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d107      	bne.n	8003500 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0208 	bic.w	r2, r2, #8
 80034fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	2220      	movs	r2, #32
 8003516:	409a      	lsls	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 808e 	beq.w	800363e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8086 	beq.w	800363e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003536:	2220      	movs	r2, #32
 8003538:	409a      	lsls	r2, r3
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b05      	cmp	r3, #5
 8003548:	d136      	bne.n	80035b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0216 	bic.w	r2, r2, #22
 8003558:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695a      	ldr	r2, [r3, #20]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003568:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d103      	bne.n	800357a <HAL_DMA_IRQHandler+0x1da>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0208 	bic.w	r2, r2, #8
 8003588:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	223f      	movs	r2, #63	; 0x3f
 8003590:	409a      	lsls	r2, r3
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d07d      	beq.n	80036aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4798      	blx	r3
        }
        return;
 80035b6:	e078      	b.n	80036aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01c      	beq.n	8003600 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d108      	bne.n	80035e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d030      	beq.n	800363e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4798      	blx	r3
 80035e4:	e02b      	b.n	800363e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d027      	beq.n	800363e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
 80035f6:	e022      	b.n	800363e <HAL_DMA_IRQHandler+0x29e>
 80035f8:	20000004 	.word	0x20000004
 80035fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10f      	bne.n	800362e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0210 	bic.w	r2, r2, #16
 800361c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	2b00      	cmp	r3, #0
 8003644:	d032      	beq.n	80036ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d022      	beq.n	8003698 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2205      	movs	r2, #5
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3301      	adds	r3, #1
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	429a      	cmp	r2, r3
 8003674:	d307      	bcc.n	8003686 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f2      	bne.n	800366a <HAL_DMA_IRQHandler+0x2ca>
 8003684:	e000      	b.n	8003688 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003686:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
 80036a8:	e000      	b.n	80036ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80036aa:	bf00      	nop
    }
  }
}
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop

080036b4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036c2:	b2db      	uxtb	r3, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b40      	cmp	r3, #64	; 0x40
 80036fc:	d108      	bne.n	8003710 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800370e:	e007      	b.n	8003720 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	60da      	str	r2, [r3, #12]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	3b10      	subs	r3, #16
 800373c:	4a14      	ldr	r2, [pc, #80]	; (8003790 <DMA_CalcBaseAndBitshift+0x64>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	091b      	lsrs	r3, r3, #4
 8003744:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003746:	4a13      	ldr	r2, [pc, #76]	; (8003794 <DMA_CalcBaseAndBitshift+0x68>)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b03      	cmp	r3, #3
 8003758:	d909      	bls.n	800376e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	1d1a      	adds	r2, r3, #4
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	659a      	str	r2, [r3, #88]	; 0x58
 800376c:	e007      	b.n	800377e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003776:	f023 0303 	bic.w	r3, r3, #3
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	aaaaaaab 	.word	0xaaaaaaab
 8003794:	0800b410 	.word	0x0800b410

08003798 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d11f      	bne.n	80037f2 <DMA_CheckFifoParam+0x5a>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d856      	bhi.n	8003866 <DMA_CheckFifoParam+0xce>
 80037b8:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <DMA_CheckFifoParam+0x28>)
 80037ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037be:	bf00      	nop
 80037c0:	080037d1 	.word	0x080037d1
 80037c4:	080037e3 	.word	0x080037e3
 80037c8:	080037d1 	.word	0x080037d1
 80037cc:	08003867 	.word	0x08003867
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d046      	beq.n	800386a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e0:	e043      	b.n	800386a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037ea:	d140      	bne.n	800386e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f0:	e03d      	b.n	800386e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fa:	d121      	bne.n	8003840 <DMA_CheckFifoParam+0xa8>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d837      	bhi.n	8003872 <DMA_CheckFifoParam+0xda>
 8003802:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <DMA_CheckFifoParam+0x70>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	08003819 	.word	0x08003819
 800380c:	0800381f 	.word	0x0800381f
 8003810:	08003819 	.word	0x08003819
 8003814:	08003831 	.word	0x08003831
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      break;
 800381c:	e030      	b.n	8003880 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d025      	beq.n	8003876 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382e:	e022      	b.n	8003876 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003838:	d11f      	bne.n	800387a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800383e:	e01c      	b.n	800387a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d903      	bls.n	800384e <DMA_CheckFifoParam+0xb6>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b03      	cmp	r3, #3
 800384a:	d003      	beq.n	8003854 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800384c:	e018      	b.n	8003880 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
      break;
 8003852:	e015      	b.n	8003880 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00e      	beq.n	800387e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
      break;
 8003864:	e00b      	b.n	800387e <DMA_CheckFifoParam+0xe6>
      break;
 8003866:	bf00      	nop
 8003868:	e00a      	b.n	8003880 <DMA_CheckFifoParam+0xe8>
      break;
 800386a:	bf00      	nop
 800386c:	e008      	b.n	8003880 <DMA_CheckFifoParam+0xe8>
      break;
 800386e:	bf00      	nop
 8003870:	e006      	b.n	8003880 <DMA_CheckFifoParam+0xe8>
      break;
 8003872:	bf00      	nop
 8003874:	e004      	b.n	8003880 <DMA_CheckFifoParam+0xe8>
      break;
 8003876:	bf00      	nop
 8003878:	e002      	b.n	8003880 <DMA_CheckFifoParam+0xe8>
      break;   
 800387a:	bf00      	nop
 800387c:	e000      	b.n	8003880 <DMA_CheckFifoParam+0xe8>
      break;
 800387e:	bf00      	nop
    }
  } 
  
  return status; 
 8003880:	7bfb      	ldrb	r3, [r7, #15]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop

08003890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003890:	b480      	push	{r7}
 8003892:	b089      	sub	sp, #36	; 0x24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	e159      	b.n	8003b60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038ac:	2201      	movs	r2, #1
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4013      	ands	r3, r2
 80038be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	f040 8148 	bne.w	8003b5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d005      	beq.n	80038e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d130      	bne.n	8003944 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	2203      	movs	r2, #3
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003918:	2201      	movs	r2, #1
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 0201 	and.w	r2, r3, #1
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b03      	cmp	r3, #3
 800394e:	d017      	beq.n	8003980 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	2203      	movs	r2, #3
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d123      	bne.n	80039d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	08da      	lsrs	r2, r3, #3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3208      	adds	r2, #8
 8003994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	220f      	movs	r2, #15
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	08da      	lsrs	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3208      	adds	r2, #8
 80039ce:	69b9      	ldr	r1, [r7, #24]
 80039d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	2203      	movs	r2, #3
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0203 	and.w	r2, r3, #3
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80a2 	beq.w	8003b5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	4b57      	ldr	r3, [pc, #348]	; (8003b78 <HAL_GPIO_Init+0x2e8>)
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	4a56      	ldr	r2, [pc, #344]	; (8003b78 <HAL_GPIO_Init+0x2e8>)
 8003a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a24:	6453      	str	r3, [r2, #68]	; 0x44
 8003a26:	4b54      	ldr	r3, [pc, #336]	; (8003b78 <HAL_GPIO_Init+0x2e8>)
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a32:	4a52      	ldr	r2, [pc, #328]	; (8003b7c <HAL_GPIO_Init+0x2ec>)
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	089b      	lsrs	r3, r3, #2
 8003a38:	3302      	adds	r3, #2
 8003a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	220f      	movs	r2, #15
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4013      	ands	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a49      	ldr	r2, [pc, #292]	; (8003b80 <HAL_GPIO_Init+0x2f0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d019      	beq.n	8003a92 <HAL_GPIO_Init+0x202>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a48      	ldr	r2, [pc, #288]	; (8003b84 <HAL_GPIO_Init+0x2f4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_GPIO_Init+0x1fe>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a47      	ldr	r2, [pc, #284]	; (8003b88 <HAL_GPIO_Init+0x2f8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00d      	beq.n	8003a8a <HAL_GPIO_Init+0x1fa>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a46      	ldr	r2, [pc, #280]	; (8003b8c <HAL_GPIO_Init+0x2fc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d007      	beq.n	8003a86 <HAL_GPIO_Init+0x1f6>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a45      	ldr	r2, [pc, #276]	; (8003b90 <HAL_GPIO_Init+0x300>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <HAL_GPIO_Init+0x1f2>
 8003a7e:	2304      	movs	r3, #4
 8003a80:	e008      	b.n	8003a94 <HAL_GPIO_Init+0x204>
 8003a82:	2307      	movs	r3, #7
 8003a84:	e006      	b.n	8003a94 <HAL_GPIO_Init+0x204>
 8003a86:	2303      	movs	r3, #3
 8003a88:	e004      	b.n	8003a94 <HAL_GPIO_Init+0x204>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e002      	b.n	8003a94 <HAL_GPIO_Init+0x204>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <HAL_GPIO_Init+0x204>
 8003a92:	2300      	movs	r3, #0
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	f002 0203 	and.w	r2, r2, #3
 8003a9a:	0092      	lsls	r2, r2, #2
 8003a9c:	4093      	lsls	r3, r2
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aa4:	4935      	ldr	r1, [pc, #212]	; (8003b7c <HAL_GPIO_Init+0x2ec>)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	089b      	lsrs	r3, r3, #2
 8003aaa:	3302      	adds	r3, #2
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ab2:	4b38      	ldr	r3, [pc, #224]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ad6:	4a2f      	ldr	r2, [pc, #188]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003adc:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b00:	4a24      	ldr	r2, [pc, #144]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b06:	4b23      	ldr	r3, [pc, #140]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b2a:	4a1a      	ldr	r2, [pc, #104]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b30:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b54:	4a0f      	ldr	r2, [pc, #60]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	2b0f      	cmp	r3, #15
 8003b64:	f67f aea2 	bls.w	80038ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40013800 	.word	0x40013800
 8003b80:	40020000 	.word	0x40020000
 8003b84:	40020400 	.word	0x40020400
 8003b88:	40020800 	.word	0x40020800
 8003b8c:	40020c00 	.word	0x40020c00
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40013c00 	.word	0x40013c00

08003b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba8:	787b      	ldrb	r3, [r7, #1]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bae:	887a      	ldrh	r2, [r7, #2]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bb4:	e003      	b.n	8003bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bb6:	887b      	ldrh	r3, [r7, #2]
 8003bb8:	041a      	lsls	r2, r3, #16
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	619a      	str	r2, [r3, #24]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bdc:	887a      	ldrh	r2, [r7, #2]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4013      	ands	r3, r2
 8003be2:	041a      	lsls	r2, r3, #16
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	43d9      	mvns	r1, r3
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	400b      	ands	r3, r1
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	619a      	str	r2, [r3, #24]
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e12b      	b.n	8003e6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fe fdac 	bl	8002784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2224      	movs	r2, #36	; 0x24
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0201 	bic.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c64:	f002 ff92 	bl	8006b8c <HAL_RCC_GetPCLK1Freq>
 8003c68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4a81      	ldr	r2, [pc, #516]	; (8003e74 <HAL_I2C_Init+0x274>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d807      	bhi.n	8003c84 <HAL_I2C_Init+0x84>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4a80      	ldr	r2, [pc, #512]	; (8003e78 <HAL_I2C_Init+0x278>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bf94      	ite	ls
 8003c7c:	2301      	movls	r3, #1
 8003c7e:	2300      	movhi	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	e006      	b.n	8003c92 <HAL_I2C_Init+0x92>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4a7d      	ldr	r2, [pc, #500]	; (8003e7c <HAL_I2C_Init+0x27c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	bf94      	ite	ls
 8003c8c:	2301      	movls	r3, #1
 8003c8e:	2300      	movhi	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0e7      	b.n	8003e6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a78      	ldr	r2, [pc, #480]	; (8003e80 <HAL_I2C_Init+0x280>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	0c9b      	lsrs	r3, r3, #18
 8003ca4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a6a      	ldr	r2, [pc, #424]	; (8003e74 <HAL_I2C_Init+0x274>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d802      	bhi.n	8003cd4 <HAL_I2C_Init+0xd4>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	e009      	b.n	8003ce8 <HAL_I2C_Init+0xe8>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	4a69      	ldr	r2, [pc, #420]	; (8003e84 <HAL_I2C_Init+0x284>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	430b      	orrs	r3, r1
 8003cee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	495c      	ldr	r1, [pc, #368]	; (8003e74 <HAL_I2C_Init+0x274>)
 8003d04:	428b      	cmp	r3, r1
 8003d06:	d819      	bhi.n	8003d3c <HAL_I2C_Init+0x13c>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1e59      	subs	r1, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d16:	1c59      	adds	r1, r3, #1
 8003d18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d1c:	400b      	ands	r3, r1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_I2C_Init+0x138>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1e59      	subs	r1, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d30:	3301      	adds	r3, #1
 8003d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d36:	e051      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	e04f      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d111      	bne.n	8003d68 <HAL_I2C_Init+0x168>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1e58      	subs	r0, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	440b      	add	r3, r1
 8003d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d56:	3301      	adds	r3, #1
 8003d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e012      	b.n	8003d8e <HAL_I2C_Init+0x18e>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1e58      	subs	r0, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	0099      	lsls	r1, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Init+0x196>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e022      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10e      	bne.n	8003dbc <HAL_I2C_Init+0x1bc>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1e58      	subs	r0, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6859      	ldr	r1, [r3, #4]
 8003da6:	460b      	mov	r3, r1
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	440b      	add	r3, r1
 8003dac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db0:	3301      	adds	r3, #1
 8003db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dba:	e00f      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1e58      	subs	r0, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6859      	ldr	r1, [r3, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	0099      	lsls	r1, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	6809      	ldr	r1, [r1, #0]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6911      	ldr	r1, [r2, #16]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68d2      	ldr	r2, [r2, #12]
 8003e16:	4311      	orrs	r1, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	000186a0 	.word	0x000186a0
 8003e78:	001e847f 	.word	0x001e847f
 8003e7c:	003d08ff 	.word	0x003d08ff
 8003e80:	431bde83 	.word	0x431bde83
 8003e84:	10624dd3 	.word	0x10624dd3

08003e88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	4608      	mov	r0, r1
 8003e92:	4611      	mov	r1, r2
 8003e94:	461a      	mov	r2, r3
 8003e96:	4603      	mov	r3, r0
 8003e98:	817b      	strh	r3, [r7, #10]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	813b      	strh	r3, [r7, #8]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ea2:	f7fe ffa3 	bl	8002dec <HAL_GetTick>
 8003ea6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	f040 80d9 	bne.w	8004068 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	2319      	movs	r3, #25
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	496d      	ldr	r1, [pc, #436]	; (8004074 <HAL_I2C_Mem_Write+0x1ec>)
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f001 ffed 	bl	8005ea0 <I2C_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e0cc      	b.n	800406a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_I2C_Mem_Write+0x56>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e0c5      	b.n	800406a <HAL_I2C_Mem_Write+0x1e2>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d007      	beq.n	8003f04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2221      	movs	r2, #33	; 0x21
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2240      	movs	r2, #64	; 0x40
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a3a      	ldr	r2, [r7, #32]
 8003f2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4a4d      	ldr	r2, [pc, #308]	; (8004078 <HAL_I2C_Mem_Write+0x1f0>)
 8003f44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f46:	88f8      	ldrh	r0, [r7, #6]
 8003f48:	893a      	ldrh	r2, [r7, #8]
 8003f4a:	8979      	ldrh	r1, [r7, #10]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	9301      	str	r3, [sp, #4]
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	4603      	mov	r3, r0
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f001 fd7c 	bl	8005a54 <I2C_RequestMemoryWrite>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d052      	beq.n	8004008 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e081      	b.n	800406a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f002 f86e 	bl	800604c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00d      	beq.n	8003f92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d107      	bne.n	8003f8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06b      	b.n	800406a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	781a      	ldrb	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d11b      	bne.n	8004008 <HAL_I2C_Mem_Write+0x180>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d017      	beq.n	8004008 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	781a      	ldrb	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1aa      	bne.n	8003f66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f002 f85a 	bl	80060ce <I2C_WaitOnBTFFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00d      	beq.n	800403c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	2b04      	cmp	r3, #4
 8004026:	d107      	bne.n	8004038 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004036:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e016      	b.n	800406a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004068:	2302      	movs	r3, #2
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	00100002 	.word	0x00100002
 8004078:	ffff0000 	.word	0xffff0000

0800407c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08c      	sub	sp, #48	; 0x30
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	4608      	mov	r0, r1
 8004086:	4611      	mov	r1, r2
 8004088:	461a      	mov	r2, r3
 800408a:	4603      	mov	r3, r0
 800408c:	817b      	strh	r3, [r7, #10]
 800408e:	460b      	mov	r3, r1
 8004090:	813b      	strh	r3, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004096:	f7fe fea9 	bl	8002dec <HAL_GetTick>
 800409a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	f040 8208 	bne.w	80044ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	2319      	movs	r3, #25
 80040b0:	2201      	movs	r2, #1
 80040b2:	497b      	ldr	r1, [pc, #492]	; (80042a0 <HAL_I2C_Mem_Read+0x224>)
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f001 fef3 	bl	8005ea0 <I2C_WaitOnFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
 80040c2:	e1fb      	b.n	80044bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_I2C_Mem_Read+0x56>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e1f4      	b.n	80044bc <HAL_I2C_Mem_Read+0x440>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d007      	beq.n	80040f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004106:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2222      	movs	r2, #34	; 0x22
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2240      	movs	r2, #64	; 0x40
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004122:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004128:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4a5b      	ldr	r2, [pc, #364]	; (80042a4 <HAL_I2C_Mem_Read+0x228>)
 8004138:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800413a:	88f8      	ldrh	r0, [r7, #6]
 800413c:	893a      	ldrh	r2, [r7, #8]
 800413e:	8979      	ldrh	r1, [r7, #10]
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	4603      	mov	r3, r0
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f001 fd18 	bl	8005b80 <I2C_RequestMemoryRead>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e1b0      	b.n	80044bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415e:	2b00      	cmp	r3, #0
 8004160:	d113      	bne.n	800418a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004162:	2300      	movs	r3, #0
 8004164:	623b      	str	r3, [r7, #32]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	623b      	str	r3, [r7, #32]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	623b      	str	r3, [r7, #32]
 8004176:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	e184      	b.n	8004494 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418e:	2b01      	cmp	r3, #1
 8004190:	d11b      	bne.n	80041ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	61fb      	str	r3, [r7, #28]
 80041b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	e164      	b.n	8004494 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d11b      	bne.n	800420a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	e144      	b.n	8004494 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004220:	e138      	b.n	8004494 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	2b03      	cmp	r3, #3
 8004228:	f200 80f1 	bhi.w	800440e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004230:	2b01      	cmp	r3, #1
 8004232:	d123      	bne.n	800427c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004236:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f001 ffbb 	bl	80061b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e139      	b.n	80044bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a
 800427a:	e10b      	b.n	8004494 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004280:	2b02      	cmp	r3, #2
 8004282:	d14e      	bne.n	8004322 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428a:	2200      	movs	r2, #0
 800428c:	4906      	ldr	r1, [pc, #24]	; (80042a8 <HAL_I2C_Mem_Read+0x22c>)
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f001 fe06 	bl	8005ea0 <I2C_WaitOnFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e10e      	b.n	80044bc <HAL_I2C_Mem_Read+0x440>
 800429e:	bf00      	nop
 80042a0:	00100002 	.word	0x00100002
 80042a4:	ffff0000 	.word	0xffff0000
 80042a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004320:	e0b8      	b.n	8004494 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004328:	2200      	movs	r2, #0
 800432a:	4966      	ldr	r1, [pc, #408]	; (80044c4 <HAL_I2C_Mem_Read+0x448>)
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f001 fdb7 	bl	8005ea0 <I2C_WaitOnFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0bf      	b.n	80044bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800434a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004384:	2200      	movs	r2, #0
 8004386:	494f      	ldr	r1, [pc, #316]	; (80044c4 <HAL_I2C_Mem_Read+0x448>)
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f001 fd89 	bl	8005ea0 <I2C_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e091      	b.n	80044bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800440c:	e042      	b.n	8004494 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800440e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004410:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f001 fece 	bl	80061b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e04c      	b.n	80044bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b04      	cmp	r3, #4
 8004460:	d118      	bne.n	8004494 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	f47f aec2 	bne.w	8004222 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e000      	b.n	80044bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
  }
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3728      	adds	r7, #40	; 0x28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	00010004 	.word	0x00010004

080044c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
 80044f4:	2b10      	cmp	r3, #16
 80044f6:	d003      	beq.n	8004500 <HAL_I2C_EV_IRQHandler+0x38>
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	f040 80c1 	bne.w	8004682 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10d      	bne.n	8004536 <HAL_I2C_EV_IRQHandler+0x6e>
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004520:	d003      	beq.n	800452a <HAL_I2C_EV_IRQHandler+0x62>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004528:	d101      	bne.n	800452e <HAL_I2C_EV_IRQHandler+0x66>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <HAL_I2C_EV_IRQHandler+0x68>
 800452e:	2300      	movs	r3, #0
 8004530:	2b01      	cmp	r3, #1
 8004532:	f000 8132 	beq.w	800479a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00c      	beq.n	800455a <HAL_I2C_EV_IRQHandler+0x92>
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	0a5b      	lsrs	r3, r3, #9
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d006      	beq.n	800455a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f001 feb6 	bl	80062be <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fcd2 	bl	8004efc <I2C_Master_SB>
 8004558:	e092      	b.n	8004680 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	08db      	lsrs	r3, r3, #3
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_I2C_EV_IRQHandler+0xb2>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	0a5b      	lsrs	r3, r3, #9
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fd48 	bl	8005008 <I2C_Master_ADD10>
 8004578:	e082      	b.n	8004680 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_I2C_EV_IRQHandler+0xd2>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	0a5b      	lsrs	r3, r3, #9
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fd62 	bl	800505c <I2C_Master_ADDR>
 8004598:	e072      	b.n	8004680 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	089b      	lsrs	r3, r3, #2
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d03b      	beq.n	800461e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b4:	f000 80f3 	beq.w	800479e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	09db      	lsrs	r3, r3, #7
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00f      	beq.n	80045e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	0a9b      	lsrs	r3, r3, #10
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d009      	beq.n	80045e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	089b      	lsrs	r3, r3, #2
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f94c 	bl	800487a <I2C_MasterTransmit_TXE>
 80045e2:	e04d      	b.n	8004680 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80d6 	beq.w	800479e <HAL_I2C_EV_IRQHandler+0x2d6>
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	0a5b      	lsrs	r3, r3, #9
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80cf 	beq.w	800479e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004600:	7bbb      	ldrb	r3, [r7, #14]
 8004602:	2b21      	cmp	r3, #33	; 0x21
 8004604:	d103      	bne.n	800460e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f9d3 	bl	80049b2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800460c:	e0c7      	b.n	800479e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	2b40      	cmp	r3, #64	; 0x40
 8004612:	f040 80c4 	bne.w	800479e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa41 	bl	8004a9e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800461c:	e0bf      	b.n	800479e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462c:	f000 80b7 	beq.w	800479e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	099b      	lsrs	r3, r3, #6
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00f      	beq.n	800465c <HAL_I2C_EV_IRQHandler+0x194>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	0a9b      	lsrs	r3, r3, #10
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <HAL_I2C_EV_IRQHandler+0x194>
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d103      	bne.n	800465c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fab6 	bl	8004bc6 <I2C_MasterReceive_RXNE>
 800465a:	e011      	b.n	8004680 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 809a 	beq.w	800479e <HAL_I2C_EV_IRQHandler+0x2d6>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	0a5b      	lsrs	r3, r3, #9
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 8093 	beq.w	800479e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fb55 	bl	8004d28 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800467e:	e08e      	b.n	800479e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004680:	e08d      	b.n	800479e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	e007      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d012      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0x20e>
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	0a5b      	lsrs	r3, r3, #9
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00c      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80046cc:	69b9      	ldr	r1, [r7, #24]
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 ff13 	bl	80054fa <I2C_Slave_ADDR>
 80046d4:	e066      	b.n	80047a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_I2C_EV_IRQHandler+0x22e>
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	0a5b      	lsrs	r3, r3, #9
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 ff4e 	bl	8005590 <I2C_Slave_STOPF>
 80046f4:	e056      	b.n	80047a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046f6:	7bbb      	ldrb	r3, [r7, #14]
 80046f8:	2b21      	cmp	r3, #33	; 0x21
 80046fa:	d002      	beq.n	8004702 <HAL_I2C_EV_IRQHandler+0x23a>
 80046fc:	7bbb      	ldrb	r3, [r7, #14]
 80046fe:	2b29      	cmp	r3, #41	; 0x29
 8004700:	d125      	bne.n	800474e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	09db      	lsrs	r3, r3, #7
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00f      	beq.n	800472e <HAL_I2C_EV_IRQHandler+0x266>
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	0a9b      	lsrs	r3, r3, #10
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d009      	beq.n	800472e <HAL_I2C_EV_IRQHandler+0x266>
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fe29 	bl	800537e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800472c:	e039      	b.n	80047a2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	089b      	lsrs	r3, r3, #2
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d033      	beq.n	80047a2 <HAL_I2C_EV_IRQHandler+0x2da>
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	0a5b      	lsrs	r3, r3, #9
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d02d      	beq.n	80047a2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fe56 	bl	80053f8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800474c:	e029      	b.n	80047a2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	099b      	lsrs	r3, r3, #6
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00f      	beq.n	800477a <HAL_I2C_EV_IRQHandler+0x2b2>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	0a9b      	lsrs	r3, r3, #10
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	089b      	lsrs	r3, r3, #2
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d103      	bne.n	800477a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fe61 	bl	800543a <I2C_SlaveReceive_RXNE>
 8004778:	e014      	b.n	80047a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	089b      	lsrs	r3, r3, #2
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00e      	beq.n	80047a4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	0a5b      	lsrs	r3, r3, #9
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d008      	beq.n	80047a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fe8f 	bl	80054b6 <I2C_SlaveReceive_BTF>
 8004798:	e004      	b.n	80047a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800479a:	bf00      	nop
 800479c:	e002      	b.n	80047a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800479e:	bf00      	nop
 80047a0:	e000      	b.n	80047a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	460b      	mov	r3, r1
 8004804:	70fb      	strb	r3, [r7, #3]
 8004806:	4613      	mov	r3, r2
 8004808:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004888:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004890:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489c:	2b00      	cmp	r3, #0
 800489e:	d150      	bne.n	8004942 <I2C_MasterTransmit_TXE+0xc8>
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b21      	cmp	r3, #33	; 0x21
 80048a4:	d14d      	bne.n	8004942 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d01d      	beq.n	80048e8 <I2C_MasterTransmit_TXE+0x6e>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d01a      	beq.n	80048e8 <I2C_MasterTransmit_TXE+0x6e>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b8:	d016      	beq.n	80048e8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048c8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2211      	movs	r2, #17
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff ff62 	bl	80047aa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048e6:	e060      	b.n	80049aa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048f6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004906:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b40      	cmp	r3, #64	; 0x40
 8004920:	d107      	bne.n	8004932 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff ff7d 	bl	800482a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004930:	e03b      	b.n	80049aa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff ff35 	bl	80047aa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004940:	e033      	b.n	80049aa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	2b21      	cmp	r3, #33	; 0x21
 8004946:	d005      	beq.n	8004954 <I2C_MasterTransmit_TXE+0xda>
 8004948:	7bbb      	ldrb	r3, [r7, #14]
 800494a:	2b40      	cmp	r3, #64	; 0x40
 800494c:	d12d      	bne.n	80049aa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	2b22      	cmp	r3, #34	; 0x22
 8004952:	d12a      	bne.n	80049aa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d108      	bne.n	8004970 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800496e:	e01c      	b.n	80049aa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d103      	bne.n	8004984 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f88e 	bl	8004a9e <I2C_MemoryTransmit_TXE_BTF>
}
 8004982:	e012      	b.n	80049aa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	781a      	ldrb	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049a8:	e7ff      	b.n	80049aa <I2C_MasterTransmit_TXE+0x130>
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b21      	cmp	r3, #33	; 0x21
 80049ca:	d164      	bne.n	8004a96 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d012      	beq.n	80049fc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	781a      	ldrb	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80049fa:	e04c      	b.n	8004a96 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d01d      	beq.n	8004a3e <I2C_MasterTransmit_BTF+0x8c>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	d01a      	beq.n	8004a3e <I2C_MasterTransmit_BTF+0x8c>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a0e:	d016      	beq.n	8004a3e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a1e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2211      	movs	r2, #17
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff feb7 	bl	80047aa <HAL_I2C_MasterTxCpltCallback>
}
 8004a3c:	e02b      	b.n	8004a96 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a4c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a5c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d107      	bne.n	8004a88 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff fed2 	bl	800482a <HAL_I2C_MemTxCpltCallback>
}
 8004a86:	e006      	b.n	8004a96 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff fe8a 	bl	80047aa <HAL_I2C_MasterTxCpltCallback>
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d11d      	bne.n	8004af2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d10b      	bne.n	8004ad6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ace:	1c9a      	adds	r2, r3, #2
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004ad4:	e073      	b.n	8004bbe <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	121b      	asrs	r3, r3, #8
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004af0:	e065      	b.n	8004bbe <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d10b      	bne.n	8004b12 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b10:	e055      	b.n	8004bbe <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d151      	bne.n	8004bbe <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b22      	cmp	r3, #34	; 0x22
 8004b1e:	d10d      	bne.n	8004b3c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b2e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b3a:	e040      	b.n	8004bbe <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d015      	beq.n	8004b72 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	2b21      	cmp	r3, #33	; 0x21
 8004b4a:	d112      	bne.n	8004b72 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	781a      	ldrb	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b70:	e025      	b.n	8004bbe <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d120      	bne.n	8004bbe <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b21      	cmp	r3, #33	; 0x21
 8004b80:	d11d      	bne.n	8004bbe <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b90:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff fe36 	bl	800482a <HAL_I2C_MemTxCpltCallback>
}
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b22      	cmp	r3, #34	; 0x22
 8004bd8:	f040 80a2 	bne.w	8004d20 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d921      	bls.n	8004c2e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	f040 8082 	bne.w	8004d20 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004c2c:	e078      	b.n	8004d20 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d074      	beq.n	8004d20 <I2C_MasterReceive_RXNE+0x15a>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d002      	beq.n	8004c42 <I2C_MasterReceive_RXNE+0x7c>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d16e      	bne.n	8004d20 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f001 fa84 	bl	8006150 <I2C_WaitOnSTOPRequestThroughIT>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d142      	bne.n	8004cd4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c6c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b40      	cmp	r3, #64	; 0x40
 8004ca6:	d10a      	bne.n	8004cbe <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fdc1 	bl	800483e <HAL_I2C_MemRxCpltCallback>
}
 8004cbc:	e030      	b.n	8004d20 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2212      	movs	r2, #18
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff fd76 	bl	80047be <HAL_I2C_MasterRxCpltCallback>
}
 8004cd2:	e025      	b.n	8004d20 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ce2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff fd99 	bl	8004852 <HAL_I2C_ErrorCallback>
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d11b      	bne.n	8004d78 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004d76:	e0bd      	b.n	8004ef4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d129      	bne.n	8004dd6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d90:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d00a      	beq.n	8004dae <I2C_MasterReceive_BTF+0x86>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d007      	beq.n	8004dae <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004dd4:	e08e      	b.n	8004ef4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d176      	bne.n	8004ece <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d002      	beq.n	8004dec <I2C_MasterReceive_BTF+0xc4>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b10      	cmp	r3, #16
 8004dea:	d108      	bne.n	8004dfe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e019      	b.n	8004e32 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d002      	beq.n	8004e0a <I2C_MasterReceive_BTF+0xe2>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d108      	bne.n	8004e1c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	e00a      	b.n	8004e32 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d007      	beq.n	8004e32 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e30:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e8c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d10a      	bne.n	8004eb8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff fcc4 	bl	800483e <HAL_I2C_MemRxCpltCallback>
}
 8004eb6:	e01d      	b.n	8004ef4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2212      	movs	r2, #18
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff fc79 	bl	80047be <HAL_I2C_MasterRxCpltCallback>
}
 8004ecc:	e012      	b.n	8004ef4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d117      	bne.n	8004f40 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d109      	bne.n	8004f2c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f28:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004f2a:	e067      	b.n	8004ffc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f043 0301 	orr.w	r3, r3, #1
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	611a      	str	r2, [r3, #16]
}
 8004f3e:	e05d      	b.n	8004ffc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f48:	d133      	bne.n	8004fb2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b21      	cmp	r3, #33	; 0x21
 8004f54:	d109      	bne.n	8004f6a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f66:	611a      	str	r2, [r3, #16]
 8004f68:	e008      	b.n	8004f7c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d004      	beq.n	8004f8e <I2C_Master_SB+0x92>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d108      	bne.n	8004fa0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d032      	beq.n	8004ffc <I2C_Master_SB+0x100>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d02d      	beq.n	8004ffc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fae:	605a      	str	r2, [r3, #4]
}
 8004fb0:	e024      	b.n	8004ffc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10e      	bne.n	8004fd8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	11db      	asrs	r3, r3, #7
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f003 0306 	and.w	r3, r3, #6
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f063 030f 	orn	r3, r3, #15
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	611a      	str	r2, [r3, #16]
}
 8004fd6:	e011      	b.n	8004ffc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d10d      	bne.n	8004ffc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	11db      	asrs	r3, r3, #7
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	f003 0306 	and.w	r3, r3, #6
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f063 030e 	orn	r3, r3, #14
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	611a      	str	r2, [r3, #16]
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005014:	b2da      	uxtb	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005020:	2b00      	cmp	r3, #0
 8005022:	d004      	beq.n	800502e <I2C_Master_ADD10+0x26>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d108      	bne.n	8005040 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00c      	beq.n	8005050 <I2C_Master_ADD10+0x48>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503c:	2b00      	cmp	r3, #0
 800503e:	d007      	beq.n	8005050 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800504e:	605a      	str	r2, [r3, #4]
  }
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800505c:	b480      	push	{r7}
 800505e:	b091      	sub	sp, #68	; 0x44
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800506a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b22      	cmp	r3, #34	; 0x22
 8005084:	f040 8169 	bne.w	800535a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10f      	bne.n	80050b0 <I2C_Master_ADDR+0x54>
 8005090:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d10b      	bne.n	80050b0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005098:	2300      	movs	r3, #0
 800509a:	633b      	str	r3, [r7, #48]	; 0x30
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	633b      	str	r3, [r7, #48]	; 0x30
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	633b      	str	r3, [r7, #48]	; 0x30
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	e160      	b.n	8005372 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d11d      	bne.n	80050f4 <I2C_Master_ADDR+0x98>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050c0:	d118      	bne.n	80050f4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c2:	2300      	movs	r3, #0
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	651a      	str	r2, [r3, #80]	; 0x50
 80050f2:	e13e      	b.n	8005372 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d113      	bne.n	8005126 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050fe:	2300      	movs	r3, #0
 8005100:	62bb      	str	r3, [r7, #40]	; 0x28
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	62bb      	str	r3, [r7, #40]	; 0x28
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	62bb      	str	r3, [r7, #40]	; 0x28
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	e115      	b.n	8005352 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	f040 808a 	bne.w	8005246 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005138:	d137      	bne.n	80051aa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005148:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005158:	d113      	bne.n	8005182 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005168:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800516a:	2300      	movs	r3, #0
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	e0e7      	b.n	8005352 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005182:	2300      	movs	r3, #0
 8005184:	623b      	str	r3, [r7, #32]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	623b      	str	r3, [r7, #32]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	623b      	str	r3, [r7, #32]
 8005196:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	e0d3      	b.n	8005352 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80051aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d02e      	beq.n	800520e <I2C_Master_ADDR+0x1b2>
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d02b      	beq.n	800520e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80051b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b8:	2b12      	cmp	r3, #18
 80051ba:	d102      	bne.n	80051c2 <I2C_Master_ADDR+0x166>
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d125      	bne.n	800520e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d00e      	beq.n	80051e6 <I2C_Master_ADDR+0x18a>
 80051c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d00b      	beq.n	80051e6 <I2C_Master_ADDR+0x18a>
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	2b10      	cmp	r3, #16
 80051d2:	d008      	beq.n	80051e6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e007      	b.n	80051f6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f6:	2300      	movs	r3, #0
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	61fb      	str	r3, [r7, #28]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	e0a1      	b.n	8005352 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800521e:	2300      	movs	r3, #0
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	61bb      	str	r3, [r7, #24]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	e085      	b.n	8005352 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d14d      	bne.n	80052ec <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	2b04      	cmp	r3, #4
 8005254:	d016      	beq.n	8005284 <I2C_Master_ADDR+0x228>
 8005256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005258:	2b02      	cmp	r3, #2
 800525a:	d013      	beq.n	8005284 <I2C_Master_ADDR+0x228>
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	2b10      	cmp	r3, #16
 8005260:	d010      	beq.n	8005284 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005270:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e007      	b.n	8005294 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005292:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800529e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a2:	d117      	bne.n	80052d4 <I2C_Master_ADDR+0x278>
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052aa:	d00b      	beq.n	80052c4 <I2C_Master_ADDR+0x268>
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d008      	beq.n	80052c4 <I2C_Master_ADDR+0x268>
 80052b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d005      	beq.n	80052c4 <I2C_Master_ADDR+0x268>
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	2b10      	cmp	r3, #16
 80052bc:	d002      	beq.n	80052c4 <I2C_Master_ADDR+0x268>
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d107      	bne.n	80052d4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052d2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	e032      	b.n	8005352 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052fa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530a:	d117      	bne.n	800533c <I2C_Master_ADDR+0x2e0>
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005312:	d00b      	beq.n	800532c <I2C_Master_ADDR+0x2d0>
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	2b01      	cmp	r3, #1
 8005318:	d008      	beq.n	800532c <I2C_Master_ADDR+0x2d0>
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	2b08      	cmp	r3, #8
 800531e:	d005      	beq.n	800532c <I2C_Master_ADDR+0x2d0>
 8005320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005322:	2b10      	cmp	r3, #16
 8005324:	d002      	beq.n	800532c <I2C_Master_ADDR+0x2d0>
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	2b20      	cmp	r3, #32
 800532a:	d107      	bne.n	800533c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800533a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005358:	e00b      	b.n	8005372 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	68fb      	ldr	r3, [r7, #12]
}
 8005370:	e7ff      	b.n	8005372 <I2C_Master_ADDR+0x316>
 8005372:	bf00      	nop
 8005374:	3744      	adds	r7, #68	; 0x44
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d02b      	beq.n	80053f0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	781a      	ldrb	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d114      	bne.n	80053f0 <I2C_SlaveTransmit_TXE+0x72>
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b29      	cmp	r3, #41	; 0x29
 80053ca:	d111      	bne.n	80053f0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2221      	movs	r2, #33	; 0x21
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2228      	movs	r2, #40	; 0x28
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff f9f1 	bl	80047d2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80053f0:	bf00      	nop
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d011      	beq.n	800542e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	781a      	ldrb	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005424:	b29b      	uxth	r3, r3
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005448:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d02c      	beq.n	80054ae <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d114      	bne.n	80054ae <I2C_SlaveReceive_RXNE+0x74>
 8005484:	7bfb      	ldrb	r3, [r7, #15]
 8005486:	2b2a      	cmp	r3, #42	; 0x2a
 8005488:	d111      	bne.n	80054ae <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005498:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2222      	movs	r2, #34	; 0x22
 800549e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2228      	movs	r2, #40	; 0x28
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff f99c 	bl	80047e6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d012      	beq.n	80054ee <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005504:	2300      	movs	r3, #0
 8005506:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550e:	b2db      	uxtb	r3, r3
 8005510:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005514:	2b28      	cmp	r3, #40	; 0x28
 8005516:	d127      	bne.n	8005568 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005526:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	089b      	lsrs	r3, r3, #2
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	09db      	lsrs	r3, r3, #7
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d103      	bne.n	800554c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	81bb      	strh	r3, [r7, #12]
 800554a:	e002      	b.n	8005552 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800555a:	89ba      	ldrh	r2, [r7, #12]
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	4619      	mov	r1, r3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff f94a 	bl	80047fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005566:	e00e      	b.n	8005586 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005568:	2300      	movs	r3, #0
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	60bb      	str	r3, [r7, #8]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	60bb      	str	r3, [r7, #8]
 800557c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005586:	bf00      	nop
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80055b0:	2300      	movs	r3, #0
 80055b2:	60bb      	str	r3, [r7, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	60bb      	str	r3, [r7, #8]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0201 	orr.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ec:	d172      	bne.n	80056d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	2b22      	cmp	r3, #34	; 0x22
 80055f2:	d002      	beq.n	80055fa <I2C_Slave_STOPF+0x6a>
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b2a      	cmp	r3, #42	; 0x2a
 80055f8:	d135      	bne.n	8005666 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	b29a      	uxth	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f043 0204 	orr.w	r2, r3, #4
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800562c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	4618      	mov	r0, r3
 8005634:	f7fe f83e 	bl	80036b4 <HAL_DMA_GetState>
 8005638:	4603      	mov	r3, r0
 800563a:	2b01      	cmp	r3, #1
 800563c:	d049      	beq.n	80056d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	4a69      	ldr	r2, [pc, #420]	; (80057e8 <I2C_Slave_STOPF+0x258>)
 8005644:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	4618      	mov	r0, r3
 800564c:	f7fd fe86 	bl	800335c <HAL_DMA_Abort_IT>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d03d      	beq.n	80056d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005660:	4610      	mov	r0, r2
 8005662:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005664:	e035      	b.n	80056d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	b29a      	uxth	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005678:	b29b      	uxth	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f043 0204 	orr.w	r2, r3, #4
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005698:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe f808 	bl	80036b4 <HAL_DMA_GetState>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d014      	beq.n	80056d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ae:	4a4e      	ldr	r2, [pc, #312]	; (80057e8 <I2C_Slave_STOPF+0x258>)
 80056b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fd fe50 	bl	800335c <HAL_DMA_Abort_IT>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d008      	beq.n	80056d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056cc:	4610      	mov	r0, r2
 80056ce:	4798      	blx	r3
 80056d0:	e000      	b.n	80056d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d03e      	beq.n	800575c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d112      	bne.n	8005712 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691a      	ldr	r2, [r3, #16]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571c:	2b40      	cmp	r3, #64	; 0x40
 800571e:	d112      	bne.n	8005746 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691a      	ldr	r2, [r3, #16]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	f043 0204 	orr.w	r2, r3, #4
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f843 	bl	80057f0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800576a:	e039      	b.n	80057e0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	2b2a      	cmp	r3, #42	; 0x2a
 8005770:	d109      	bne.n	8005786 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2228      	movs	r2, #40	; 0x28
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff f830 	bl	80047e6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b28      	cmp	r3, #40	; 0x28
 8005790:	d111      	bne.n	80057b6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a15      	ldr	r2, [pc, #84]	; (80057ec <I2C_Slave_STOPF+0x25c>)
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff f831 	bl	8004816 <HAL_I2C_ListenCpltCallback>
}
 80057b4:	e014      	b.n	80057e0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ba:	2b22      	cmp	r3, #34	; 0x22
 80057bc:	d002      	beq.n	80057c4 <I2C_Slave_STOPF+0x234>
 80057be:	7bfb      	ldrb	r3, [r7, #15]
 80057c0:	2b22      	cmp	r3, #34	; 0x22
 80057c2:	d10d      	bne.n	80057e0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff f803 	bl	80047e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80057e0:	bf00      	nop
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	08005d51 	.word	0x08005d51
 80057ec:	ffff0000 	.word	0xffff0000

080057f0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005806:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005808:	7bbb      	ldrb	r3, [r7, #14]
 800580a:	2b10      	cmp	r3, #16
 800580c:	d002      	beq.n	8005814 <I2C_ITError+0x24>
 800580e:	7bbb      	ldrb	r3, [r7, #14]
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d10a      	bne.n	800582a <I2C_ITError+0x3a>
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	2b22      	cmp	r3, #34	; 0x22
 8005818:	d107      	bne.n	800582a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005828:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005830:	2b28      	cmp	r3, #40	; 0x28
 8005832:	d107      	bne.n	8005844 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2228      	movs	r2, #40	; 0x28
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005842:	e015      	b.n	8005870 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800584e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005852:	d00a      	beq.n	800586a <I2C_ITError+0x7a>
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b60      	cmp	r3, #96	; 0x60
 8005858:	d007      	beq.n	800586a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800587a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800587e:	d162      	bne.n	8005946 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800588e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005894:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b01      	cmp	r3, #1
 800589c:	d020      	beq.n	80058e0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a2:	4a6a      	ldr	r2, [pc, #424]	; (8005a4c <I2C_ITError+0x25c>)
 80058a4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fd fd56 	bl	800335c <HAL_DMA_Abort_IT>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 8089 	beq.w	80059ca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0201 	bic.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058da:	4610      	mov	r0, r2
 80058dc:	4798      	blx	r3
 80058de:	e074      	b.n	80059ca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	4a59      	ldr	r2, [pc, #356]	; (8005a4c <I2C_ITError+0x25c>)
 80058e6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fd fd35 	bl	800335c <HAL_DMA_Abort_IT>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d068      	beq.n	80059ca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005902:	2b40      	cmp	r3, #64	; 0x40
 8005904:	d10b      	bne.n	800591e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0201 	bic.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005940:	4610      	mov	r0, r2
 8005942:	4798      	blx	r3
 8005944:	e041      	b.n	80059ca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b60      	cmp	r3, #96	; 0x60
 8005950:	d125      	bne.n	800599e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596a:	2b40      	cmp	r3, #64	; 0x40
 800596c:	d10b      	bne.n	8005986 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0201 	bic.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fe ff65 	bl	8004866 <HAL_I2C_AbortCpltCallback>
 800599c:	e015      	b.n	80059ca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d10b      	bne.n	80059c4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fe ff44 	bl	8004852 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10e      	bne.n	80059f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d104      	bne.n	80059f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d007      	beq.n	8005a08 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a06:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d113      	bne.n	8005a44 <I2C_ITError+0x254>
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b28      	cmp	r3, #40	; 0x28
 8005a20:	d110      	bne.n	8005a44 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a0a      	ldr	r2, [pc, #40]	; (8005a50 <I2C_ITError+0x260>)
 8005a26:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fe fee9 	bl	8004816 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a44:	bf00      	nop
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	08005d51 	.word	0x08005d51
 8005a50:	ffff0000 	.word	0xffff0000

08005a54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	4608      	mov	r0, r1
 8005a5e:	4611      	mov	r1, r2
 8005a60:	461a      	mov	r2, r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	817b      	strh	r3, [r7, #10]
 8005a66:	460b      	mov	r3, r1
 8005a68:	813b      	strh	r3, [r7, #8]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 fa08 	bl	8005ea0 <I2C_WaitOnFlagUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00d      	beq.n	8005ab2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa4:	d103      	bne.n	8005aae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e05f      	b.n	8005b72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ab2:	897b      	ldrh	r3, [r7, #10]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ac0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	6a3a      	ldr	r2, [r7, #32]
 8005ac6:	492d      	ldr	r1, [pc, #180]	; (8005b7c <I2C_RequestMemoryWrite+0x128>)
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 fa40 	bl	8005f4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e04c      	b.n	8005b72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af0:	6a39      	ldr	r1, [r7, #32]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 faaa 	bl	800604c <I2C_WaitOnTXEFlagUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00d      	beq.n	8005b1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d107      	bne.n	8005b16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e02b      	b.n	8005b72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d105      	bne.n	8005b2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b20:	893b      	ldrh	r3, [r7, #8]
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	611a      	str	r2, [r3, #16]
 8005b2a:	e021      	b.n	8005b70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b2c:	893b      	ldrh	r3, [r7, #8]
 8005b2e:	0a1b      	lsrs	r3, r3, #8
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3c:	6a39      	ldr	r1, [r7, #32]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 fa84 	bl	800604c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00d      	beq.n	8005b66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d107      	bne.n	8005b62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e005      	b.n	8005b72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b66:	893b      	ldrh	r3, [r7, #8]
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	00010002 	.word	0x00010002

08005b80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	4608      	mov	r0, r1
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	4603      	mov	r3, r0
 8005b90:	817b      	strh	r3, [r7, #10]
 8005b92:	460b      	mov	r3, r1
 8005b94:	813b      	strh	r3, [r7, #8]
 8005b96:	4613      	mov	r3, r2
 8005b98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ba8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f96a 	bl	8005ea0 <I2C_WaitOnFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00d      	beq.n	8005bee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be0:	d103      	bne.n	8005bea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e0aa      	b.n	8005d44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bee:	897b      	ldrh	r3, [r7, #10]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	6a3a      	ldr	r2, [r7, #32]
 8005c02:	4952      	ldr	r1, [pc, #328]	; (8005d4c <I2C_RequestMemoryRead+0x1cc>)
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f9a2 	bl	8005f4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e097      	b.n	8005d44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c14:	2300      	movs	r3, #0
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2c:	6a39      	ldr	r1, [r7, #32]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fa0c 	bl	800604c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00d      	beq.n	8005c56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d107      	bne.n	8005c52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e076      	b.n	8005d44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d105      	bne.n	8005c68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c5c:	893b      	ldrh	r3, [r7, #8]
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	611a      	str	r2, [r3, #16]
 8005c66:	e021      	b.n	8005cac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c68:	893b      	ldrh	r3, [r7, #8]
 8005c6a:	0a1b      	lsrs	r3, r3, #8
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c78:	6a39      	ldr	r1, [r7, #32]
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 f9e6 	bl	800604c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00d      	beq.n	8005ca2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d107      	bne.n	8005c9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e050      	b.n	8005d44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ca2:	893b      	ldrh	r3, [r7, #8]
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cae:	6a39      	ldr	r1, [r7, #32]
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f9cb 	bl	800604c <I2C_WaitOnTXEFlagUntilTimeout>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00d      	beq.n	8005cd8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d107      	bne.n	8005cd4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e035      	b.n	8005d44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f8d3 	bl	8005ea0 <I2C_WaitOnFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00d      	beq.n	8005d1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d0e:	d103      	bne.n	8005d18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e013      	b.n	8005d44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d1c:	897b      	ldrh	r3, [r7, #10]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	6a3a      	ldr	r2, [r7, #32]
 8005d30:	4906      	ldr	r1, [pc, #24]	; (8005d4c <I2C_RequestMemoryRead+0x1cc>)
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 f90b 	bl	8005f4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	00010002 	.word	0x00010002

08005d50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d68:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d6a:	4b4b      	ldr	r3, [pc, #300]	; (8005e98 <I2C_DMAAbort+0x148>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	08db      	lsrs	r3, r3, #3
 8005d70:	4a4a      	ldr	r2, [pc, #296]	; (8005e9c <I2C_DMAAbort+0x14c>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	0a1a      	lsrs	r2, r3, #8
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	00da      	lsls	r2, r3, #3
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	f043 0220 	orr.w	r2, r3, #32
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005d96:	e00a      	b.n	8005dae <I2C_DMAAbort+0x5e>
    }
    count--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dac:	d0ea      	beq.n	8005d84 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dba:	2200      	movs	r2, #0
 8005dbc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	2200      	movs	r2, #0
 8005dcc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ddc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2200      	movs	r2, #0
 8005de2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df0:	2200      	movs	r2, #0
 8005df2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	2200      	movs	r2, #0
 8005e02:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0201 	bic.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b60      	cmp	r3, #96	; 0x60
 8005e1e:	d10e      	bne.n	8005e3e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2200      	movs	r2, #0
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e36:	6978      	ldr	r0, [r7, #20]
 8005e38:	f7fe fd15 	bl	8004866 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e3c:	e027      	b.n	8005e8e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e3e:	7cfb      	ldrb	r3, [r7, #19]
 8005e40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e44:	2b28      	cmp	r3, #40	; 0x28
 8005e46:	d117      	bne.n	8005e78 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2228      	movs	r2, #40	; 0x28
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e76:	e007      	b.n	8005e88 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005e88:	6978      	ldr	r0, [r7, #20]
 8005e8a:	f7fe fce2 	bl	8004852 <HAL_I2C_ErrorCallback>
}
 8005e8e:	bf00      	nop
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000004 	.word	0x20000004
 8005e9c:	14f8b589 	.word	0x14f8b589

08005ea0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	4613      	mov	r3, r2
 8005eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eb0:	e025      	b.n	8005efe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d021      	beq.n	8005efe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eba:	f7fc ff97 	bl	8002dec <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d302      	bcc.n	8005ed0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d116      	bne.n	8005efe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	f043 0220 	orr.w	r2, r3, #32
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e023      	b.n	8005f46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	0c1b      	lsrs	r3, r3, #16
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d10d      	bne.n	8005f24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	43da      	mvns	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4013      	ands	r3, r2
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	bf0c      	ite	eq
 8005f1a:	2301      	moveq	r3, #1
 8005f1c:	2300      	movne	r3, #0
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	461a      	mov	r2, r3
 8005f22:	e00c      	b.n	8005f3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	43da      	mvns	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	bf0c      	ite	eq
 8005f36:	2301      	moveq	r3, #1
 8005f38:	2300      	movne	r3, #0
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d0b6      	beq.n	8005eb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f5c:	e051      	b.n	8006002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f6c:	d123      	bne.n	8005fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	f043 0204 	orr.w	r2, r3, #4
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e046      	b.n	8006044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d021      	beq.n	8006002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbe:	f7fc ff15 	bl	8002dec <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d116      	bne.n	8006002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	f043 0220 	orr.w	r2, r3, #32
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e020      	b.n	8006044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	0c1b      	lsrs	r3, r3, #16
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d10c      	bne.n	8006026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	43da      	mvns	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4013      	ands	r3, r2
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	bf14      	ite	ne
 800601e:	2301      	movne	r3, #1
 8006020:	2300      	moveq	r3, #0
 8006022:	b2db      	uxtb	r3, r3
 8006024:	e00b      	b.n	800603e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	43da      	mvns	r2, r3
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	4013      	ands	r3, r2
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	bf14      	ite	ne
 8006038:	2301      	movne	r3, #1
 800603a:	2300      	moveq	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d18d      	bne.n	8005f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006058:	e02d      	b.n	80060b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 f900 	bl	8006260 <I2C_IsAcknowledgeFailed>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e02d      	b.n	80060c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006070:	d021      	beq.n	80060b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006072:	f7fc febb 	bl	8002dec <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	429a      	cmp	r2, r3
 8006080:	d302      	bcc.n	8006088 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d116      	bne.n	80060b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2220      	movs	r2, #32
 8006092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	f043 0220 	orr.w	r2, r3, #32
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e007      	b.n	80060c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c0:	2b80      	cmp	r3, #128	; 0x80
 80060c2:	d1ca      	bne.n	800605a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060da:	e02d      	b.n	8006138 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f8bf 	bl	8006260 <I2C_IsAcknowledgeFailed>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e02d      	b.n	8006148 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d021      	beq.n	8006138 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f4:	f7fc fe7a 	bl	8002dec <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	429a      	cmp	r2, r3
 8006102:	d302      	bcc.n	800610a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d116      	bne.n	8006138 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	f043 0220 	orr.w	r2, r3, #32
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e007      	b.n	8006148 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b04      	cmp	r3, #4
 8006144:	d1ca      	bne.n	80060dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800615c:	4b13      	ldr	r3, [pc, #76]	; (80061ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	08db      	lsrs	r3, r3, #3
 8006162:	4a13      	ldr	r2, [pc, #76]	; (80061b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006164:	fba2 2303 	umull	r2, r3, r2, r3
 8006168:	0a1a      	lsrs	r2, r3, #8
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	3b01      	subs	r3, #1
 8006176:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d107      	bne.n	800618e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f043 0220 	orr.w	r2, r3, #32
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e008      	b.n	80061a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800619c:	d0e9      	beq.n	8006172 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	20000004 	.word	0x20000004
 80061b0:	14f8b589 	.word	0x14f8b589

080061b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061c0:	e042      	b.n	8006248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b10      	cmp	r3, #16
 80061ce:	d119      	bne.n	8006204 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0210 	mvn.w	r2, #16
 80061d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e029      	b.n	8006258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006204:	f7fc fdf2 	bl	8002dec <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	429a      	cmp	r2, r3
 8006212:	d302      	bcc.n	800621a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d116      	bne.n	8006248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	f043 0220 	orr.w	r2, r3, #32
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e007      	b.n	8006258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	d1b5      	bne.n	80061c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006276:	d11b      	bne.n	80062b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006280:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	f043 0204 	orr.w	r2, r3, #4
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80062ce:	d103      	bne.n	80062d8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80062d6:	e007      	b.n	80062e8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80062e0:	d102      	bne.n	80062e8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2208      	movs	r2, #8
 80062e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e264      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d075      	beq.n	80063fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006312:	4ba3      	ldr	r3, [pc, #652]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 030c 	and.w	r3, r3, #12
 800631a:	2b04      	cmp	r3, #4
 800631c:	d00c      	beq.n	8006338 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800631e:	4ba0      	ldr	r3, [pc, #640]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006326:	2b08      	cmp	r3, #8
 8006328:	d112      	bne.n	8006350 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800632a:	4b9d      	ldr	r3, [pc, #628]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006336:	d10b      	bne.n	8006350 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006338:	4b99      	ldr	r3, [pc, #612]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d05b      	beq.n	80063fc <HAL_RCC_OscConfig+0x108>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d157      	bne.n	80063fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e23f      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006358:	d106      	bne.n	8006368 <HAL_RCC_OscConfig+0x74>
 800635a:	4b91      	ldr	r3, [pc, #580]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a90      	ldr	r2, [pc, #576]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e01d      	b.n	80063a4 <HAL_RCC_OscConfig+0xb0>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006370:	d10c      	bne.n	800638c <HAL_RCC_OscConfig+0x98>
 8006372:	4b8b      	ldr	r3, [pc, #556]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a8a      	ldr	r2, [pc, #552]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	4b88      	ldr	r3, [pc, #544]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a87      	ldr	r2, [pc, #540]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	e00b      	b.n	80063a4 <HAL_RCC_OscConfig+0xb0>
 800638c:	4b84      	ldr	r3, [pc, #528]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a83      	ldr	r2, [pc, #524]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	4b81      	ldr	r3, [pc, #516]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a80      	ldr	r2, [pc, #512]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 800639e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d013      	beq.n	80063d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ac:	f7fc fd1e 	bl	8002dec <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063b4:	f7fc fd1a 	bl	8002dec <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b64      	cmp	r3, #100	; 0x64
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e204      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063c6:	4b76      	ldr	r3, [pc, #472]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0f0      	beq.n	80063b4 <HAL_RCC_OscConfig+0xc0>
 80063d2:	e014      	b.n	80063fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d4:	f7fc fd0a 	bl	8002dec <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063dc:	f7fc fd06 	bl	8002dec <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b64      	cmp	r3, #100	; 0x64
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e1f0      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ee:	4b6c      	ldr	r3, [pc, #432]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0xe8>
 80063fa:	e000      	b.n	80063fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d063      	beq.n	80064d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800640a:	4b65      	ldr	r3, [pc, #404]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 030c 	and.w	r3, r3, #12
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00b      	beq.n	800642e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006416:	4b62      	ldr	r3, [pc, #392]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800641e:	2b08      	cmp	r3, #8
 8006420:	d11c      	bne.n	800645c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006422:	4b5f      	ldr	r3, [pc, #380]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d116      	bne.n	800645c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800642e:	4b5c      	ldr	r3, [pc, #368]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d005      	beq.n	8006446 <HAL_RCC_OscConfig+0x152>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d001      	beq.n	8006446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e1c4      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006446:	4b56      	ldr	r3, [pc, #344]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	4952      	ldr	r1, [pc, #328]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006456:	4313      	orrs	r3, r2
 8006458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800645a:	e03a      	b.n	80064d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d020      	beq.n	80064a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006464:	4b4f      	ldr	r3, [pc, #316]	; (80065a4 <HAL_RCC_OscConfig+0x2b0>)
 8006466:	2201      	movs	r2, #1
 8006468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646a:	f7fc fcbf 	bl	8002dec <HAL_GetTick>
 800646e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006472:	f7fc fcbb 	bl	8002dec <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e1a5      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006484:	4b46      	ldr	r3, [pc, #280]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f0      	beq.n	8006472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006490:	4b43      	ldr	r3, [pc, #268]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	4940      	ldr	r1, [pc, #256]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	600b      	str	r3, [r1, #0]
 80064a4:	e015      	b.n	80064d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064a6:	4b3f      	ldr	r3, [pc, #252]	; (80065a4 <HAL_RCC_OscConfig+0x2b0>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ac:	f7fc fc9e 	bl	8002dec <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064b4:	f7fc fc9a 	bl	8002dec <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e184      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064c6:	4b36      	ldr	r3, [pc, #216]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d030      	beq.n	8006540 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d016      	beq.n	8006514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064e6:	4b30      	ldr	r3, [pc, #192]	; (80065a8 <HAL_RCC_OscConfig+0x2b4>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ec:	f7fc fc7e 	bl	8002dec <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064f4:	f7fc fc7a 	bl	8002dec <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e164      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006506:	4b26      	ldr	r3, [pc, #152]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCC_OscConfig+0x200>
 8006512:	e015      	b.n	8006540 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006514:	4b24      	ldr	r3, [pc, #144]	; (80065a8 <HAL_RCC_OscConfig+0x2b4>)
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800651a:	f7fc fc67 	bl	8002dec <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006522:	f7fc fc63 	bl	8002dec <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e14d      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006534:	4b1a      	ldr	r3, [pc, #104]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1f0      	bne.n	8006522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 80a0 	beq.w	800668e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800654e:	2300      	movs	r3, #0
 8006550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006552:	4b13      	ldr	r3, [pc, #76]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10f      	bne.n	800657e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800655e:	2300      	movs	r3, #0
 8006560:	60bb      	str	r3, [r7, #8]
 8006562:	4b0f      	ldr	r3, [pc, #60]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	4a0e      	ldr	r2, [pc, #56]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800656c:	6413      	str	r3, [r2, #64]	; 0x40
 800656e:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <HAL_RCC_OscConfig+0x2ac>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006576:	60bb      	str	r3, [r7, #8]
 8006578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800657a:	2301      	movs	r3, #1
 800657c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800657e:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <HAL_RCC_OscConfig+0x2b8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006586:	2b00      	cmp	r3, #0
 8006588:	d121      	bne.n	80065ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800658a:	4b08      	ldr	r3, [pc, #32]	; (80065ac <HAL_RCC_OscConfig+0x2b8>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a07      	ldr	r2, [pc, #28]	; (80065ac <HAL_RCC_OscConfig+0x2b8>)
 8006590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006596:	f7fc fc29 	bl	8002dec <HAL_GetTick>
 800659a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659c:	e011      	b.n	80065c2 <HAL_RCC_OscConfig+0x2ce>
 800659e:	bf00      	nop
 80065a0:	40023800 	.word	0x40023800
 80065a4:	42470000 	.word	0x42470000
 80065a8:	42470e80 	.word	0x42470e80
 80065ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b0:	f7fc fc1c 	bl	8002dec <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e106      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c2:	4b85      	ldr	r3, [pc, #532]	; (80067d8 <HAL_RCC_OscConfig+0x4e4>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f0      	beq.n	80065b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d106      	bne.n	80065e4 <HAL_RCC_OscConfig+0x2f0>
 80065d6:	4b81      	ldr	r3, [pc, #516]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065da:	4a80      	ldr	r2, [pc, #512]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 80065dc:	f043 0301 	orr.w	r3, r3, #1
 80065e0:	6713      	str	r3, [r2, #112]	; 0x70
 80065e2:	e01c      	b.n	800661e <HAL_RCC_OscConfig+0x32a>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b05      	cmp	r3, #5
 80065ea:	d10c      	bne.n	8006606 <HAL_RCC_OscConfig+0x312>
 80065ec:	4b7b      	ldr	r3, [pc, #492]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 80065ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f0:	4a7a      	ldr	r2, [pc, #488]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 80065f2:	f043 0304 	orr.w	r3, r3, #4
 80065f6:	6713      	str	r3, [r2, #112]	; 0x70
 80065f8:	4b78      	ldr	r3, [pc, #480]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 80065fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fc:	4a77      	ldr	r2, [pc, #476]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	6713      	str	r3, [r2, #112]	; 0x70
 8006604:	e00b      	b.n	800661e <HAL_RCC_OscConfig+0x32a>
 8006606:	4b75      	ldr	r3, [pc, #468]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 8006608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660a:	4a74      	ldr	r2, [pc, #464]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 800660c:	f023 0301 	bic.w	r3, r3, #1
 8006610:	6713      	str	r3, [r2, #112]	; 0x70
 8006612:	4b72      	ldr	r3, [pc, #456]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 8006614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006616:	4a71      	ldr	r2, [pc, #452]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 8006618:	f023 0304 	bic.w	r3, r3, #4
 800661c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d015      	beq.n	8006652 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006626:	f7fc fbe1 	bl	8002dec <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800662c:	e00a      	b.n	8006644 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800662e:	f7fc fbdd 	bl	8002dec <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	f241 3288 	movw	r2, #5000	; 0x1388
 800663c:	4293      	cmp	r3, r2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e0c5      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006644:	4b65      	ldr	r3, [pc, #404]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 8006646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0ee      	beq.n	800662e <HAL_RCC_OscConfig+0x33a>
 8006650:	e014      	b.n	800667c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006652:	f7fc fbcb 	bl	8002dec <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006658:	e00a      	b.n	8006670 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800665a:	f7fc fbc7 	bl	8002dec <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	f241 3288 	movw	r2, #5000	; 0x1388
 8006668:	4293      	cmp	r3, r2
 800666a:	d901      	bls.n	8006670 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e0af      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006670:	4b5a      	ldr	r3, [pc, #360]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 8006672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1ee      	bne.n	800665a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d105      	bne.n	800668e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006682:	4b56      	ldr	r3, [pc, #344]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	4a55      	ldr	r2, [pc, #340]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 8006688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800668c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 809b 	beq.w	80067ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006698:	4b50      	ldr	r3, [pc, #320]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 030c 	and.w	r3, r3, #12
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d05c      	beq.n	800675e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d141      	bne.n	8006730 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ac:	4b4c      	ldr	r3, [pc, #304]	; (80067e0 <HAL_RCC_OscConfig+0x4ec>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b2:	f7fc fb9b 	bl	8002dec <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ba:	f7fc fb97 	bl	8002dec <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e081      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066cc:	4b43      	ldr	r3, [pc, #268]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1f0      	bne.n	80066ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	69da      	ldr	r2, [r3, #28]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	019b      	lsls	r3, r3, #6
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	3b01      	subs	r3, #1
 80066f2:	041b      	lsls	r3, r3, #16
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fa:	061b      	lsls	r3, r3, #24
 80066fc:	4937      	ldr	r1, [pc, #220]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006702:	4b37      	ldr	r3, [pc, #220]	; (80067e0 <HAL_RCC_OscConfig+0x4ec>)
 8006704:	2201      	movs	r2, #1
 8006706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006708:	f7fc fb70 	bl	8002dec <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006710:	f7fc fb6c 	bl	8002dec <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e056      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006722:	4b2e      	ldr	r3, [pc, #184]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f0      	beq.n	8006710 <HAL_RCC_OscConfig+0x41c>
 800672e:	e04e      	b.n	80067ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006730:	4b2b      	ldr	r3, [pc, #172]	; (80067e0 <HAL_RCC_OscConfig+0x4ec>)
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006736:	f7fc fb59 	bl	8002dec <HAL_GetTick>
 800673a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800673c:	e008      	b.n	8006750 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800673e:	f7fc fb55 	bl	8002dec <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e03f      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006750:	4b22      	ldr	r3, [pc, #136]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1f0      	bne.n	800673e <HAL_RCC_OscConfig+0x44a>
 800675c:	e037      	b.n	80067ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d101      	bne.n	800676a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e032      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800676a:	4b1c      	ldr	r3, [pc, #112]	; (80067dc <HAL_RCC_OscConfig+0x4e8>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d028      	beq.n	80067ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006782:	429a      	cmp	r2, r3
 8006784:	d121      	bne.n	80067ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006790:	429a      	cmp	r2, r3
 8006792:	d11a      	bne.n	80067ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800679a:	4013      	ands	r3, r2
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d111      	bne.n	80067ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b0:	085b      	lsrs	r3, r3, #1
 80067b2:	3b01      	subs	r3, #1
 80067b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d107      	bne.n	80067ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d001      	beq.n	80067ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e000      	b.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	40007000 	.word	0x40007000
 80067dc:	40023800 	.word	0x40023800
 80067e0:	42470060 	.word	0x42470060

080067e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0cc      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067f8:	4b68      	ldr	r3, [pc, #416]	; (800699c <HAL_RCC_ClockConfig+0x1b8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d90c      	bls.n	8006820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006806:	4b65      	ldr	r3, [pc, #404]	; (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800680e:	4b63      	ldr	r3, [pc, #396]	; (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d001      	beq.n	8006820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0b8      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d020      	beq.n	800686e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006838:	4b59      	ldr	r3, [pc, #356]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	4a58      	ldr	r2, [pc, #352]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006842:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006850:	4b53      	ldr	r3, [pc, #332]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	4a52      	ldr	r2, [pc, #328]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006856:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800685a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800685c:	4b50      	ldr	r3, [pc, #320]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	494d      	ldr	r1, [pc, #308]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	4313      	orrs	r3, r2
 800686c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d044      	beq.n	8006904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d107      	bne.n	8006892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006882:	4b47      	ldr	r3, [pc, #284]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d119      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e07f      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d003      	beq.n	80068a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d107      	bne.n	80068b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a2:	4b3f      	ldr	r3, [pc, #252]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e06f      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b2:	4b3b      	ldr	r3, [pc, #236]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e067      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068c2:	4b37      	ldr	r3, [pc, #220]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f023 0203 	bic.w	r2, r3, #3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	4934      	ldr	r1, [pc, #208]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068d4:	f7fc fa8a 	bl	8002dec <HAL_GetTick>
 80068d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068da:	e00a      	b.n	80068f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068dc:	f7fc fa86 	bl	8002dec <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e04f      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f2:	4b2b      	ldr	r3, [pc, #172]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 020c 	and.w	r2, r3, #12
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	429a      	cmp	r2, r3
 8006902:	d1eb      	bne.n	80068dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006904:	4b25      	ldr	r3, [pc, #148]	; (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d20c      	bcs.n	800692c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006912:	4b22      	ldr	r3, [pc, #136]	; (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800691a:	4b20      	ldr	r3, [pc, #128]	; (800699c <HAL_RCC_ClockConfig+0x1b8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d001      	beq.n	800692c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e032      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006938:	4b19      	ldr	r3, [pc, #100]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	4916      	ldr	r1, [pc, #88]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	4313      	orrs	r3, r2
 8006948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d009      	beq.n	800696a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006956:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	490e      	ldr	r1, [pc, #56]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	4313      	orrs	r3, r2
 8006968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800696a:	f000 f821 	bl	80069b0 <HAL_RCC_GetSysClockFreq>
 800696e:	4602      	mov	r2, r0
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	091b      	lsrs	r3, r3, #4
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	490a      	ldr	r1, [pc, #40]	; (80069a4 <HAL_RCC_ClockConfig+0x1c0>)
 800697c:	5ccb      	ldrb	r3, [r1, r3]
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	4a09      	ldr	r2, [pc, #36]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006986:	4b09      	ldr	r3, [pc, #36]	; (80069ac <HAL_RCC_ClockConfig+0x1c8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f7fc f9ea 	bl	8002d64 <HAL_InitTick>

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40023c00 	.word	0x40023c00
 80069a0:	40023800 	.word	0x40023800
 80069a4:	0800b3f8 	.word	0x0800b3f8
 80069a8:	20000004 	.word	0x20000004
 80069ac:	20000008 	.word	0x20000008

080069b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	607b      	str	r3, [r7, #4]
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	2300      	movs	r3, #0
 80069c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069c8:	4b67      	ldr	r3, [pc, #412]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f003 030c 	and.w	r3, r3, #12
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d00d      	beq.n	80069f0 <HAL_RCC_GetSysClockFreq+0x40>
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	f200 80bd 	bhi.w	8006b54 <HAL_RCC_GetSysClockFreq+0x1a4>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <HAL_RCC_GetSysClockFreq+0x34>
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d003      	beq.n	80069ea <HAL_RCC_GetSysClockFreq+0x3a>
 80069e2:	e0b7      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069e4:	4b61      	ldr	r3, [pc, #388]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80069e6:	60bb      	str	r3, [r7, #8]
       break;
 80069e8:	e0b7      	b.n	8006b5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069ea:	4b61      	ldr	r3, [pc, #388]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80069ec:	60bb      	str	r3, [r7, #8]
      break;
 80069ee:	e0b4      	b.n	8006b5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069f0:	4b5d      	ldr	r3, [pc, #372]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069fa:	4b5b      	ldr	r3, [pc, #364]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d04d      	beq.n	8006aa2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a06:	4b58      	ldr	r3, [pc, #352]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	099b      	lsrs	r3, r3, #6
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	f04f 0300 	mov.w	r3, #0
 8006a12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a16:	f04f 0100 	mov.w	r1, #0
 8006a1a:	ea02 0800 	and.w	r8, r2, r0
 8006a1e:	ea03 0901 	and.w	r9, r3, r1
 8006a22:	4640      	mov	r0, r8
 8006a24:	4649      	mov	r1, r9
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	014b      	lsls	r3, r1, #5
 8006a30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006a34:	0142      	lsls	r2, r0, #5
 8006a36:	4610      	mov	r0, r2
 8006a38:	4619      	mov	r1, r3
 8006a3a:	ebb0 0008 	subs.w	r0, r0, r8
 8006a3e:	eb61 0109 	sbc.w	r1, r1, r9
 8006a42:	f04f 0200 	mov.w	r2, #0
 8006a46:	f04f 0300 	mov.w	r3, #0
 8006a4a:	018b      	lsls	r3, r1, #6
 8006a4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a50:	0182      	lsls	r2, r0, #6
 8006a52:	1a12      	subs	r2, r2, r0
 8006a54:	eb63 0301 	sbc.w	r3, r3, r1
 8006a58:	f04f 0000 	mov.w	r0, #0
 8006a5c:	f04f 0100 	mov.w	r1, #0
 8006a60:	00d9      	lsls	r1, r3, #3
 8006a62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a66:	00d0      	lsls	r0, r2, #3
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	eb12 0208 	adds.w	r2, r2, r8
 8006a70:	eb43 0309 	adc.w	r3, r3, r9
 8006a74:	f04f 0000 	mov.w	r0, #0
 8006a78:	f04f 0100 	mov.w	r1, #0
 8006a7c:	0259      	lsls	r1, r3, #9
 8006a7e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006a82:	0250      	lsls	r0, r2, #9
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	f7fa f8e0 	bl	8000c58 <__aeabi_uldivmod>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	e04a      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aa2:	4b31      	ldr	r3, [pc, #196]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	099b      	lsrs	r3, r3, #6
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f04f 0300 	mov.w	r3, #0
 8006aae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ab2:	f04f 0100 	mov.w	r1, #0
 8006ab6:	ea02 0400 	and.w	r4, r2, r0
 8006aba:	ea03 0501 	and.w	r5, r3, r1
 8006abe:	4620      	mov	r0, r4
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	014b      	lsls	r3, r1, #5
 8006acc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ad0:	0142      	lsls	r2, r0, #5
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	1b00      	subs	r0, r0, r4
 8006ad8:	eb61 0105 	sbc.w	r1, r1, r5
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	018b      	lsls	r3, r1, #6
 8006ae6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006aea:	0182      	lsls	r2, r0, #6
 8006aec:	1a12      	subs	r2, r2, r0
 8006aee:	eb63 0301 	sbc.w	r3, r3, r1
 8006af2:	f04f 0000 	mov.w	r0, #0
 8006af6:	f04f 0100 	mov.w	r1, #0
 8006afa:	00d9      	lsls	r1, r3, #3
 8006afc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b00:	00d0      	lsls	r0, r2, #3
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	1912      	adds	r2, r2, r4
 8006b08:	eb45 0303 	adc.w	r3, r5, r3
 8006b0c:	f04f 0000 	mov.w	r0, #0
 8006b10:	f04f 0100 	mov.w	r1, #0
 8006b14:	0299      	lsls	r1, r3, #10
 8006b16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006b1a:	0290      	lsls	r0, r2, #10
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4610      	mov	r0, r2
 8006b22:	4619      	mov	r1, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f04f 0300 	mov.w	r3, #0
 8006b2c:	f7fa f894 	bl	8000c58 <__aeabi_uldivmod>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4613      	mov	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b38:	4b0b      	ldr	r3, [pc, #44]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	0c1b      	lsrs	r3, r3, #16
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	3301      	adds	r3, #1
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b50:	60bb      	str	r3, [r7, #8]
      break;
 8006b52:	e002      	b.n	8006b5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b54:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006b56:	60bb      	str	r3, [r7, #8]
      break;
 8006b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006b66:	bf00      	nop
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	00f42400 	.word	0x00f42400
 8006b70:	007a1200 	.word	0x007a1200

08006b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b78:	4b03      	ldr	r3, [pc, #12]	; (8006b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	20000004 	.word	0x20000004

08006b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b90:	f7ff fff0 	bl	8006b74 <HAL_RCC_GetHCLKFreq>
 8006b94:	4602      	mov	r2, r0
 8006b96:	4b05      	ldr	r3, [pc, #20]	; (8006bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	0a9b      	lsrs	r3, r3, #10
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	4903      	ldr	r1, [pc, #12]	; (8006bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ba2:	5ccb      	ldrb	r3, [r1, r3]
 8006ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	40023800 	.word	0x40023800
 8006bb0:	0800b408 	.word	0x0800b408

08006bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006bb8:	f7ff ffdc 	bl	8006b74 <HAL_RCC_GetHCLKFreq>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	0b5b      	lsrs	r3, r3, #13
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	4903      	ldr	r1, [pc, #12]	; (8006bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bca:	5ccb      	ldrb	r3, [r1, r3]
 8006bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	40023800 	.word	0x40023800
 8006bd8:	0800b408 	.word	0x0800b408

08006bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e041      	b.n	8006c72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d106      	bne.n	8006c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7fb fe0e 	bl	8002824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	f000 fb1c 	bl	8007258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d001      	beq.n	8006c94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e03c      	b.n	8006d0e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1e      	ldr	r2, [pc, #120]	; (8006d1c <HAL_TIM_Base_Start+0xa0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d018      	beq.n	8006cd8 <HAL_TIM_Base_Start+0x5c>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cae:	d013      	beq.n	8006cd8 <HAL_TIM_Base_Start+0x5c>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a1a      	ldr	r2, [pc, #104]	; (8006d20 <HAL_TIM_Base_Start+0xa4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00e      	beq.n	8006cd8 <HAL_TIM_Base_Start+0x5c>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <HAL_TIM_Base_Start+0xa8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d009      	beq.n	8006cd8 <HAL_TIM_Base_Start+0x5c>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a17      	ldr	r2, [pc, #92]	; (8006d28 <HAL_TIM_Base_Start+0xac>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <HAL_TIM_Base_Start+0x5c>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a16      	ldr	r2, [pc, #88]	; (8006d2c <HAL_TIM_Base_Start+0xb0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d111      	bne.n	8006cfc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b06      	cmp	r3, #6
 8006ce8:	d010      	beq.n	8006d0c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0201 	orr.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cfa:	e007      	b.n	8006d0c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40010000 	.word	0x40010000
 8006d20:	40000400 	.word	0x40000400
 8006d24:	40000800 	.word	0x40000800
 8006d28:	40000c00 	.word	0x40000c00
 8006d2c:	40014000 	.word	0x40014000

08006d30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e041      	b.n	8006dc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f839 	bl	8006dce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f000 fa72 	bl	8007258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006dd6:	bf00      	nop
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
	...

08006de4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d109      	bne.n	8006e08 <HAL_TIM_PWM_Start+0x24>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	bf14      	ite	ne
 8006e00:	2301      	movne	r3, #1
 8006e02:	2300      	moveq	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	e022      	b.n	8006e4e <HAL_TIM_PWM_Start+0x6a>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d109      	bne.n	8006e22 <HAL_TIM_PWM_Start+0x3e>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	bf14      	ite	ne
 8006e1a:	2301      	movne	r3, #1
 8006e1c:	2300      	moveq	r3, #0
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	e015      	b.n	8006e4e <HAL_TIM_PWM_Start+0x6a>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d109      	bne.n	8006e3c <HAL_TIM_PWM_Start+0x58>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	bf14      	ite	ne
 8006e34:	2301      	movne	r3, #1
 8006e36:	2300      	moveq	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	e008      	b.n	8006e4e <HAL_TIM_PWM_Start+0x6a>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	bf14      	ite	ne
 8006e48:	2301      	movne	r3, #1
 8006e4a:	2300      	moveq	r3, #0
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e068      	b.n	8006f28 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d104      	bne.n	8006e66 <HAL_TIM_PWM_Start+0x82>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e64:	e013      	b.n	8006e8e <HAL_TIM_PWM_Start+0xaa>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d104      	bne.n	8006e76 <HAL_TIM_PWM_Start+0x92>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e74:	e00b      	b.n	8006e8e <HAL_TIM_PWM_Start+0xaa>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b08      	cmp	r3, #8
 8006e7a:	d104      	bne.n	8006e86 <HAL_TIM_PWM_Start+0xa2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e84:	e003      	b.n	8006e8e <HAL_TIM_PWM_Start+0xaa>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2202      	movs	r2, #2
 8006e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2201      	movs	r2, #1
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fc84 	bl	80077a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a23      	ldr	r2, [pc, #140]	; (8006f30 <HAL_TIM_PWM_Start+0x14c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d107      	bne.n	8006eb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006eb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a1d      	ldr	r2, [pc, #116]	; (8006f30 <HAL_TIM_PWM_Start+0x14c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d018      	beq.n	8006ef2 <HAL_TIM_PWM_Start+0x10e>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec8:	d013      	beq.n	8006ef2 <HAL_TIM_PWM_Start+0x10e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a19      	ldr	r2, [pc, #100]	; (8006f34 <HAL_TIM_PWM_Start+0x150>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00e      	beq.n	8006ef2 <HAL_TIM_PWM_Start+0x10e>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a17      	ldr	r2, [pc, #92]	; (8006f38 <HAL_TIM_PWM_Start+0x154>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d009      	beq.n	8006ef2 <HAL_TIM_PWM_Start+0x10e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a16      	ldr	r2, [pc, #88]	; (8006f3c <HAL_TIM_PWM_Start+0x158>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d004      	beq.n	8006ef2 <HAL_TIM_PWM_Start+0x10e>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a14      	ldr	r2, [pc, #80]	; (8006f40 <HAL_TIM_PWM_Start+0x15c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d111      	bne.n	8006f16 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b06      	cmp	r3, #6
 8006f02:	d010      	beq.n	8006f26 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0201 	orr.w	r2, r2, #1
 8006f12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f14:	e007      	b.n	8006f26 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f042 0201 	orr.w	r2, r2, #1
 8006f24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	40010000 	.word	0x40010000
 8006f34:	40000400 	.word	0x40000400
 8006f38:	40000800 	.word	0x40000800
 8006f3c:	40000c00 	.word	0x40000c00
 8006f40:	40014000 	.word	0x40014000

08006f44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d101      	bne.n	8006f62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f5e:	2302      	movs	r3, #2
 8006f60:	e0ae      	b.n	80070c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b0c      	cmp	r3, #12
 8006f6e:	f200 809f 	bhi.w	80070b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f72:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08006fad 	.word	0x08006fad
 8006f7c:	080070b1 	.word	0x080070b1
 8006f80:	080070b1 	.word	0x080070b1
 8006f84:	080070b1 	.word	0x080070b1
 8006f88:	08006fed 	.word	0x08006fed
 8006f8c:	080070b1 	.word	0x080070b1
 8006f90:	080070b1 	.word	0x080070b1
 8006f94:	080070b1 	.word	0x080070b1
 8006f98:	0800702f 	.word	0x0800702f
 8006f9c:	080070b1 	.word	0x080070b1
 8006fa0:	080070b1 	.word	0x080070b1
 8006fa4:	080070b1 	.word	0x080070b1
 8006fa8:	0800706f 	.word	0x0800706f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68b9      	ldr	r1, [r7, #8]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 f9d0 	bl	8007358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0208 	orr.w	r2, r2, #8
 8006fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699a      	ldr	r2, [r3, #24]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0204 	bic.w	r2, r2, #4
 8006fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6999      	ldr	r1, [r3, #24]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	691a      	ldr	r2, [r3, #16]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	619a      	str	r2, [r3, #24]
      break;
 8006fea:	e064      	b.n	80070b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fa16 	bl	8007424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699a      	ldr	r2, [r3, #24]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6999      	ldr	r1, [r3, #24]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	021a      	lsls	r2, r3, #8
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	619a      	str	r2, [r3, #24]
      break;
 800702c:	e043      	b.n	80070b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fa61 	bl	80074fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69da      	ldr	r2, [r3, #28]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0208 	orr.w	r2, r2, #8
 8007048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69da      	ldr	r2, [r3, #28]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0204 	bic.w	r2, r2, #4
 8007058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69d9      	ldr	r1, [r3, #28]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	61da      	str	r2, [r3, #28]
      break;
 800706c:	e023      	b.n	80070b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68b9      	ldr	r1, [r7, #8]
 8007074:	4618      	mov	r0, r3
 8007076:	f000 faab 	bl	80075d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69da      	ldr	r2, [r3, #28]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69da      	ldr	r2, [r3, #28]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69d9      	ldr	r1, [r3, #28]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	021a      	lsls	r2, r3, #8
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	61da      	str	r2, [r3, #28]
      break;
 80070ae:	e002      	b.n	80070b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	75fb      	strb	r3, [r7, #23]
      break;
 80070b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <HAL_TIM_ConfigClockSource+0x1c>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e0b4      	b.n	800724e <HAL_TIM_ConfigClockSource+0x186>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800710a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800711c:	d03e      	beq.n	800719c <HAL_TIM_ConfigClockSource+0xd4>
 800711e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007122:	f200 8087 	bhi.w	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 8007126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712a:	f000 8086 	beq.w	800723a <HAL_TIM_ConfigClockSource+0x172>
 800712e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007132:	d87f      	bhi.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 8007134:	2b70      	cmp	r3, #112	; 0x70
 8007136:	d01a      	beq.n	800716e <HAL_TIM_ConfigClockSource+0xa6>
 8007138:	2b70      	cmp	r3, #112	; 0x70
 800713a:	d87b      	bhi.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 800713c:	2b60      	cmp	r3, #96	; 0x60
 800713e:	d050      	beq.n	80071e2 <HAL_TIM_ConfigClockSource+0x11a>
 8007140:	2b60      	cmp	r3, #96	; 0x60
 8007142:	d877      	bhi.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 8007144:	2b50      	cmp	r3, #80	; 0x50
 8007146:	d03c      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0xfa>
 8007148:	2b50      	cmp	r3, #80	; 0x50
 800714a:	d873      	bhi.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 800714c:	2b40      	cmp	r3, #64	; 0x40
 800714e:	d058      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0x13a>
 8007150:	2b40      	cmp	r3, #64	; 0x40
 8007152:	d86f      	bhi.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 8007154:	2b30      	cmp	r3, #48	; 0x30
 8007156:	d064      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x15a>
 8007158:	2b30      	cmp	r3, #48	; 0x30
 800715a:	d86b      	bhi.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 800715c:	2b20      	cmp	r3, #32
 800715e:	d060      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x15a>
 8007160:	2b20      	cmp	r3, #32
 8007162:	d867      	bhi.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d05c      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x15a>
 8007168:	2b10      	cmp	r3, #16
 800716a:	d05a      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x15a>
 800716c:	e062      	b.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	6899      	ldr	r1, [r3, #8]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f000 faf1 	bl	8007764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	609a      	str	r2, [r3, #8]
      break;
 800719a:	e04f      	b.n	800723c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	6899      	ldr	r1, [r3, #8]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f000 fada 	bl	8007764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071be:	609a      	str	r2, [r3, #8]
      break;
 80071c0:	e03c      	b.n	800723c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6818      	ldr	r0, [r3, #0]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	6859      	ldr	r1, [r3, #4]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f000 fa4e 	bl	8007670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2150      	movs	r1, #80	; 0x50
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 faa7 	bl	800772e <TIM_ITRx_SetConfig>
      break;
 80071e0:	e02c      	b.n	800723c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	6859      	ldr	r1, [r3, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	461a      	mov	r2, r3
 80071f0:	f000 fa6d 	bl	80076ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2160      	movs	r1, #96	; 0x60
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 fa97 	bl	800772e <TIM_ITRx_SetConfig>
      break;
 8007200:	e01c      	b.n	800723c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6818      	ldr	r0, [r3, #0]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	6859      	ldr	r1, [r3, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	461a      	mov	r2, r3
 8007210:	f000 fa2e 	bl	8007670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2140      	movs	r1, #64	; 0x40
 800721a:	4618      	mov	r0, r3
 800721c:	f000 fa87 	bl	800772e <TIM_ITRx_SetConfig>
      break;
 8007220:	e00c      	b.n	800723c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4619      	mov	r1, r3
 800722c:	4610      	mov	r0, r2
 800722e:	f000 fa7e 	bl	800772e <TIM_ITRx_SetConfig>
      break;
 8007232:	e003      	b.n	800723c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	73fb      	strb	r3, [r7, #15]
      break;
 8007238:	e000      	b.n	800723c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800723a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a34      	ldr	r2, [pc, #208]	; (800733c <TIM_Base_SetConfig+0xe4>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00f      	beq.n	8007290 <TIM_Base_SetConfig+0x38>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007276:	d00b      	beq.n	8007290 <TIM_Base_SetConfig+0x38>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a31      	ldr	r2, [pc, #196]	; (8007340 <TIM_Base_SetConfig+0xe8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d007      	beq.n	8007290 <TIM_Base_SetConfig+0x38>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a30      	ldr	r2, [pc, #192]	; (8007344 <TIM_Base_SetConfig+0xec>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d003      	beq.n	8007290 <TIM_Base_SetConfig+0x38>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a2f      	ldr	r2, [pc, #188]	; (8007348 <TIM_Base_SetConfig+0xf0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d108      	bne.n	80072a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a25      	ldr	r2, [pc, #148]	; (800733c <TIM_Base_SetConfig+0xe4>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d01b      	beq.n	80072e2 <TIM_Base_SetConfig+0x8a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b0:	d017      	beq.n	80072e2 <TIM_Base_SetConfig+0x8a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a22      	ldr	r2, [pc, #136]	; (8007340 <TIM_Base_SetConfig+0xe8>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d013      	beq.n	80072e2 <TIM_Base_SetConfig+0x8a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a21      	ldr	r2, [pc, #132]	; (8007344 <TIM_Base_SetConfig+0xec>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d00f      	beq.n	80072e2 <TIM_Base_SetConfig+0x8a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a20      	ldr	r2, [pc, #128]	; (8007348 <TIM_Base_SetConfig+0xf0>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00b      	beq.n	80072e2 <TIM_Base_SetConfig+0x8a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a1f      	ldr	r2, [pc, #124]	; (800734c <TIM_Base_SetConfig+0xf4>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d007      	beq.n	80072e2 <TIM_Base_SetConfig+0x8a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a1e      	ldr	r2, [pc, #120]	; (8007350 <TIM_Base_SetConfig+0xf8>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d003      	beq.n	80072e2 <TIM_Base_SetConfig+0x8a>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a1d      	ldr	r2, [pc, #116]	; (8007354 <TIM_Base_SetConfig+0xfc>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d108      	bne.n	80072f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a08      	ldr	r2, [pc, #32]	; (800733c <TIM_Base_SetConfig+0xe4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d103      	bne.n	8007328 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	691a      	ldr	r2, [r3, #16]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	615a      	str	r2, [r3, #20]
}
 800732e:	bf00      	nop
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	40010000 	.word	0x40010000
 8007340:	40000400 	.word	0x40000400
 8007344:	40000800 	.word	0x40000800
 8007348:	40000c00 	.word	0x40000c00
 800734c:	40014000 	.word	0x40014000
 8007350:	40014400 	.word	0x40014400
 8007354:	40014800 	.word	0x40014800

08007358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	f023 0201 	bic.w	r2, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f023 0303 	bic.w	r3, r3, #3
 800738e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f023 0302 	bic.w	r3, r3, #2
 80073a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a1c      	ldr	r2, [pc, #112]	; (8007420 <TIM_OC1_SetConfig+0xc8>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d10c      	bne.n	80073ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f023 0308 	bic.w	r3, r3, #8
 80073ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f023 0304 	bic.w	r3, r3, #4
 80073cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a13      	ldr	r2, [pc, #76]	; (8007420 <TIM_OC1_SetConfig+0xc8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d111      	bne.n	80073fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	621a      	str	r2, [r3, #32]
}
 8007414:	bf00      	nop
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	40010000 	.word	0x40010000

08007424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	f023 0210 	bic.w	r2, r3, #16
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800745a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f023 0320 	bic.w	r3, r3, #32
 800746e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4313      	orrs	r3, r2
 800747a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a1e      	ldr	r2, [pc, #120]	; (80074f8 <TIM_OC2_SetConfig+0xd4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d10d      	bne.n	80074a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800748a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800749e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a15      	ldr	r2, [pc, #84]	; (80074f8 <TIM_OC2_SetConfig+0xd4>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d113      	bne.n	80074d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	40010000 	.word	0x40010000

080074fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 0303 	bic.w	r3, r3, #3
 8007532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	4313      	orrs	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	021b      	lsls	r3, r3, #8
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	4313      	orrs	r3, r2
 8007550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a1d      	ldr	r2, [pc, #116]	; (80075cc <TIM_OC3_SetConfig+0xd0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d10d      	bne.n	8007576 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	021b      	lsls	r3, r3, #8
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	4313      	orrs	r3, r2
 800756c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a14      	ldr	r2, [pc, #80]	; (80075cc <TIM_OC3_SetConfig+0xd0>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d113      	bne.n	80075a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800758c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	011b      	lsls	r3, r3, #4
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4313      	orrs	r3, r2
 8007598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	621a      	str	r2, [r3, #32]
}
 80075c0:	bf00      	nop
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	40010000 	.word	0x40010000

080075d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	021b      	lsls	r3, r3, #8
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4313      	orrs	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800761a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	031b      	lsls	r3, r3, #12
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	4313      	orrs	r3, r2
 8007626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a10      	ldr	r2, [pc, #64]	; (800766c <TIM_OC4_SetConfig+0x9c>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d109      	bne.n	8007644 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	019b      	lsls	r3, r3, #6
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	4313      	orrs	r3, r2
 8007642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	621a      	str	r2, [r3, #32]
}
 800765e:	bf00      	nop
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	40010000 	.word	0x40010000

08007670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	f023 0201 	bic.w	r2, r3, #1
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800769a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f023 030a 	bic.w	r3, r3, #10
 80076ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	621a      	str	r2, [r3, #32]
}
 80076c2:	bf00      	nop
 80076c4:	371c      	adds	r7, #28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b087      	sub	sp, #28
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	f023 0210 	bic.w	r2, r3, #16
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	031b      	lsls	r3, r3, #12
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800770a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	4313      	orrs	r3, r2
 8007714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	621a      	str	r2, [r3, #32]
}
 8007722:	bf00      	nop
 8007724:	371c      	adds	r7, #28
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	f043 0307 	orr.w	r3, r3, #7
 8007750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	609a      	str	r2, [r3, #8]
}
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800777e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	021a      	lsls	r2, r3, #8
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	431a      	orrs	r2, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	4313      	orrs	r3, r2
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	609a      	str	r2, [r3, #8]
}
 8007798:	bf00      	nop
 800779a:	371c      	adds	r7, #28
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f003 031f 	and.w	r3, r3, #31
 80077b6:	2201      	movs	r2, #1
 80077b8:	fa02 f303 	lsl.w	r3, r2, r3
 80077bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6a1a      	ldr	r2, [r3, #32]
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	43db      	mvns	r3, r3
 80077c6:	401a      	ands	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6a1a      	ldr	r2, [r3, #32]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	fa01 f303 	lsl.w	r3, r1, r3
 80077dc:	431a      	orrs	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	621a      	str	r2, [r3, #32]
}
 80077e2:	bf00      	nop
 80077e4:	371c      	adds	r7, #28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007804:	2302      	movs	r3, #2
 8007806:	e050      	b.n	80078aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800782e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a1c      	ldr	r2, [pc, #112]	; (80078b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d018      	beq.n	800787e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007854:	d013      	beq.n	800787e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a18      	ldr	r2, [pc, #96]	; (80078bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d00e      	beq.n	800787e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a16      	ldr	r2, [pc, #88]	; (80078c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d009      	beq.n	800787e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a15      	ldr	r2, [pc, #84]	; (80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d004      	beq.n	800787e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a13      	ldr	r2, [pc, #76]	; (80078c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d10c      	bne.n	8007898 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	4313      	orrs	r3, r2
 800788e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	40010000 	.word	0x40010000
 80078bc:	40000400 	.word	0x40000400
 80078c0:	40000800 	.word	0x40000800
 80078c4:	40000c00 	.word	0x40000c00
 80078c8:	40014000 	.word	0x40014000

080078cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e03f      	b.n	800795e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d106      	bne.n	80078f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7fb f808 	bl	8002908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2224      	movs	r2, #36	; 0x24
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800790e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fe97 	bl	8008644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691a      	ldr	r2, [r3, #16]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	695a      	ldr	r2, [r3, #20]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2220      	movs	r2, #32
 8007958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b08c      	sub	sp, #48	; 0x30
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	4613      	mov	r3, r2
 8007972:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b20      	cmp	r3, #32
 800797e:	d152      	bne.n	8007a26 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d002      	beq.n	800798c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007986:	88fb      	ldrh	r3, [r7, #6]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e04b      	b.n	8007a28 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007996:	2b01      	cmp	r3, #1
 8007998:	d101      	bne.n	800799e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800799a:	2302      	movs	r3, #2
 800799c:	e044      	b.n	8007a28 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2201      	movs	r2, #1
 80079aa:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80079ac:	88fb      	ldrh	r3, [r7, #6]
 80079ae:	461a      	mov	r2, r3
 80079b0:	68b9      	ldr	r1, [r7, #8]
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 fbea 	bl	800818c <UART_Start_Receive_DMA>
 80079b8:	4603      	mov	r3, r0
 80079ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80079be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d12c      	bne.n	8007a20 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d125      	bne.n	8007a1a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079ce:	2300      	movs	r3, #0
 80079d0:	613b      	str	r3, [r7, #16]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	613b      	str	r3, [r7, #16]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	330c      	adds	r3, #12
 80079ea:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	617b      	str	r3, [r7, #20]
   return(result);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f043 0310 	orr.w	r3, r3, #16
 80079fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	330c      	adds	r3, #12
 8007a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a04:	627a      	str	r2, [r7, #36]	; 0x24
 8007a06:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	6a39      	ldr	r1, [r7, #32]
 8007a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e5      	bne.n	80079e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8007a18:	e002      	b.n	8007a20 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007a20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a24:	e000      	b.n	8007a28 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8007a26:	2302      	movs	r3, #2
  }
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3730      	adds	r7, #48	; 0x30
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b0ba      	sub	sp, #232	; 0xe8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a66:	f003 030f 	and.w	r3, r3, #15
 8007a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10f      	bne.n	8007a96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <HAL_UART_IRQHandler+0x66>
 8007a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a86:	f003 0320 	and.w	r3, r3, #32
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fd1d 	bl	80084ce <UART_Receive_IT>
      return;
 8007a94:	e256      	b.n	8007f44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 80de 	beq.w	8007c5c <HAL_UART_IRQHandler+0x22c>
 8007aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d106      	bne.n	8007aba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 80d1 	beq.w	8007c5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <HAL_UART_IRQHandler+0xae>
 8007ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	f043 0201 	orr.w	r2, r3, #1
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae2:	f003 0304 	and.w	r3, r3, #4
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00b      	beq.n	8007b02 <HAL_UART_IRQHandler+0xd2>
 8007aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d005      	beq.n	8007b02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	f043 0202 	orr.w	r2, r3, #2
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <HAL_UART_IRQHandler+0xf6>
 8007b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d005      	beq.n	8007b26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	f043 0204 	orr.w	r2, r3, #4
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b2a:	f003 0308 	and.w	r3, r3, #8
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d011      	beq.n	8007b56 <HAL_UART_IRQHandler+0x126>
 8007b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b36:	f003 0320 	and.w	r3, r3, #32
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d105      	bne.n	8007b4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	f043 0208 	orr.w	r2, r3, #8
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 81ed 	beq.w	8007f3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b64:	f003 0320 	and.w	r3, r3, #32
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d008      	beq.n	8007b7e <HAL_UART_IRQHandler+0x14e>
 8007b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fca8 	bl	80084ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b88:	2b40      	cmp	r3, #64	; 0x40
 8007b8a:	bf0c      	ite	eq
 8007b8c:	2301      	moveq	r3, #1
 8007b8e:	2300      	movne	r3, #0
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d103      	bne.n	8007baa <HAL_UART_IRQHandler+0x17a>
 8007ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d04f      	beq.n	8007c4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fbb0 	bl	8008310 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bba:	2b40      	cmp	r3, #64	; 0x40
 8007bbc:	d141      	bne.n	8007c42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3314      	adds	r3, #20
 8007bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3314      	adds	r3, #20
 8007be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1d9      	bne.n	8007bbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d013      	beq.n	8007c3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c16:	4a7d      	ldr	r2, [pc, #500]	; (8007e0c <HAL_UART_IRQHandler+0x3dc>)
 8007c18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fb fb9c 	bl	800335c <HAL_DMA_Abort_IT>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d016      	beq.n	8007c58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c38:	e00e      	b.n	8007c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f9a4 	bl	8007f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c40:	e00a      	b.n	8007c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f9a0 	bl	8007f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c48:	e006      	b.n	8007c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f99c 	bl	8007f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c56:	e170      	b.n	8007f3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c58:	bf00      	nop
    return;
 8007c5a:	e16e      	b.n	8007f3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	f040 814a 	bne.w	8007efa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c6a:	f003 0310 	and.w	r3, r3, #16
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 8143 	beq.w	8007efa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c78:	f003 0310 	and.w	r3, r3, #16
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 813c 	beq.w	8007efa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c82:	2300      	movs	r3, #0
 8007c84:	60bb      	str	r3, [r7, #8]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	60bb      	str	r3, [r7, #8]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	60bb      	str	r3, [r7, #8]
 8007c96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca2:	2b40      	cmp	r3, #64	; 0x40
 8007ca4:	f040 80b4 	bne.w	8007e10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 8140 	beq.w	8007f3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	f080 8139 	bcs.w	8007f3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cde:	f000 8088 	beq.w	8007df2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	330c      	adds	r3, #12
 8007ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	330c      	adds	r3, #12
 8007d0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007d0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1d9      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3314      	adds	r3, #20
 8007d34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d40:	f023 0301 	bic.w	r3, r3, #1
 8007d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3314      	adds	r3, #20
 8007d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e1      	bne.n	8007d2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3314      	adds	r3, #20
 8007d70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3314      	adds	r3, #20
 8007d8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e3      	bne.n	8007d6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2220      	movs	r2, #32
 8007da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	330c      	adds	r3, #12
 8007db6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dc2:	f023 0310 	bic.w	r3, r3, #16
 8007dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	330c      	adds	r3, #12
 8007dd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007dd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007dd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ddc:	e841 2300 	strex	r3, r2, [r1]
 8007de0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1e3      	bne.n	8007db0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fb fa45 	bl	800327c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	4619      	mov	r1, r3
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7f9 fa7a 	bl	80012fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e08:	e099      	b.n	8007f3e <HAL_UART_IRQHandler+0x50e>
 8007e0a:	bf00      	nop
 8007e0c:	080083d7 	.word	0x080083d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 808b 	beq.w	8007f42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 8086 	beq.w	8007f42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	330c      	adds	r3, #12
 8007e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	330c      	adds	r3, #12
 8007e56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e5a:	647a      	str	r2, [r7, #68]	; 0x44
 8007e5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e3      	bne.n	8007e36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3314      	adds	r3, #20
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	f023 0301 	bic.w	r3, r3, #1
 8007e84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3314      	adds	r3, #20
 8007e8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e92:	633a      	str	r2, [r7, #48]	; 0x30
 8007e94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1e3      	bne.n	8007e6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	330c      	adds	r3, #12
 8007eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	e853 3f00 	ldrex	r3, [r3]
 8007ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f023 0310 	bic.w	r3, r3, #16
 8007eca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	330c      	adds	r3, #12
 8007ed4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ed8:	61fa      	str	r2, [r7, #28]
 8007eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	69b9      	ldr	r1, [r7, #24]
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e3      	bne.n	8007eb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7f9 fa02 	bl	80012fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ef8:	e023      	b.n	8007f42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d009      	beq.n	8007f1a <HAL_UART_IRQHandler+0x4ea>
 8007f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fa73 	bl	80083fe <UART_Transmit_IT>
    return;
 8007f18:	e014      	b.n	8007f44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00e      	beq.n	8007f44 <HAL_UART_IRQHandler+0x514>
 8007f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d008      	beq.n	8007f44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fab3 	bl	800849e <UART_EndTransmit_IT>
    return;
 8007f38:	e004      	b.n	8007f44 <HAL_UART_IRQHandler+0x514>
    return;
 8007f3a:	bf00      	nop
 8007f3c:	e002      	b.n	8007f44 <HAL_UART_IRQHandler+0x514>
      return;
 8007f3e:	bf00      	nop
 8007f40:	e000      	b.n	8007f44 <HAL_UART_IRQHandler+0x514>
      return;
 8007f42:	bf00      	nop
  }
}
 8007f44:	37e8      	adds	r7, #232	; 0xe8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop

08007f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b09c      	sub	sp, #112	; 0x70
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d172      	bne.n	800809e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fba:	2200      	movs	r2, #0
 8007fbc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	330c      	adds	r3, #12
 8007fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	330c      	adds	r3, #12
 8007fdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fde:	65ba      	str	r2, [r7, #88]	; 0x58
 8007fe0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fe4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e5      	bne.n	8007fbe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3314      	adds	r3, #20
 8007ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008004:	f023 0301 	bic.w	r3, r3, #1
 8008008:	667b      	str	r3, [r7, #100]	; 0x64
 800800a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3314      	adds	r3, #20
 8008010:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008012:	647a      	str	r2, [r7, #68]	; 0x44
 8008014:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008018:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e5      	bne.n	8007ff2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3314      	adds	r3, #20
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	e853 3f00 	ldrex	r3, [r3]
 8008034:	623b      	str	r3, [r7, #32]
   return(result);
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800803c:	663b      	str	r3, [r7, #96]	; 0x60
 800803e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3314      	adds	r3, #20
 8008044:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008046:	633a      	str	r2, [r7, #48]	; 0x30
 8008048:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800804c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e5      	bne.n	8008026 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800805a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800805c:	2220      	movs	r2, #32
 800805e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008066:	2b01      	cmp	r3, #1
 8008068:	d119      	bne.n	800809e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800806a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	330c      	adds	r3, #12
 8008070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	60fb      	str	r3, [r7, #12]
   return(result);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f023 0310 	bic.w	r3, r3, #16
 8008080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	330c      	adds	r3, #12
 8008088:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800808a:	61fa      	str	r2, [r7, #28]
 800808c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	69b9      	ldr	r1, [r7, #24]
 8008090:	69fa      	ldr	r2, [r7, #28]
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	617b      	str	r3, [r7, #20]
   return(result);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e5      	bne.n	800806a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800809e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d106      	bne.n	80080b4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080aa:	4619      	mov	r1, r3
 80080ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80080ae:	f7f9 f925 	bl	80012fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080b2:	e002      	b.n	80080ba <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80080b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80080b6:	f7ff ff53 	bl	8007f60 <HAL_UART_RxCpltCallback>
}
 80080ba:	bf00      	nop
 80080bc:	3770      	adds	r7, #112	; 0x70
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d108      	bne.n	80080ea <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080dc:	085b      	lsrs	r3, r3, #1
 80080de:	b29b      	uxth	r3, r3
 80080e0:	4619      	mov	r1, r3
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7f9 f90a 	bl	80012fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080e8:	e002      	b.n	80080f0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f7ff ff42 	bl	8007f74 <HAL_UART_RxHalfCpltCallback>
}
 80080f0:	bf00      	nop
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008108:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008114:	2b80      	cmp	r3, #128	; 0x80
 8008116:	bf0c      	ite	eq
 8008118:	2301      	moveq	r3, #1
 800811a:	2300      	movne	r3, #0
 800811c:	b2db      	uxtb	r3, r3
 800811e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b21      	cmp	r3, #33	; 0x21
 800812a:	d108      	bne.n	800813e <UART_DMAError+0x46>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d005      	beq.n	800813e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2200      	movs	r2, #0
 8008136:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008138:	68b8      	ldr	r0, [r7, #8]
 800813a:	f000 f8c1 	bl	80082c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008148:	2b40      	cmp	r3, #64	; 0x40
 800814a:	bf0c      	ite	eq
 800814c:	2301      	moveq	r3, #1
 800814e:	2300      	movne	r3, #0
 8008150:	b2db      	uxtb	r3, r3
 8008152:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b22      	cmp	r3, #34	; 0x22
 800815e:	d108      	bne.n	8008172 <UART_DMAError+0x7a>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d005      	beq.n	8008172 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2200      	movs	r2, #0
 800816a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800816c:	68b8      	ldr	r0, [r7, #8]
 800816e:	f000 f8cf 	bl	8008310 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	f043 0210 	orr.w	r2, r3, #16
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800817e:	68b8      	ldr	r0, [r7, #8]
 8008180:	f7ff ff02 	bl	8007f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008184:	bf00      	nop
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b098      	sub	sp, #96	; 0x60
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	4613      	mov	r3, r2
 8008198:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	88fa      	ldrh	r2, [r7, #6]
 80081a4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2222      	movs	r2, #34	; 0x22
 80081b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	4a3e      	ldr	r2, [pc, #248]	; (80082b4 <UART_Start_Receive_DMA+0x128>)
 80081ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c0:	4a3d      	ldr	r2, [pc, #244]	; (80082b8 <UART_Start_Receive_DMA+0x12c>)
 80081c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c8:	4a3c      	ldr	r2, [pc, #240]	; (80082bc <UART_Start_Receive_DMA+0x130>)
 80081ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d0:	2200      	movs	r2, #0
 80081d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80081d4:	f107 0308 	add.w	r3, r7, #8
 80081d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3304      	adds	r3, #4
 80081e4:	4619      	mov	r1, r3
 80081e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	88fb      	ldrh	r3, [r7, #6]
 80081ec:	f7fa ffee 	bl	80031cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80081f0:	2300      	movs	r3, #0
 80081f2:	613b      	str	r3, [r7, #16]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	613b      	str	r3, [r7, #16]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	613b      	str	r3, [r7, #16]
 8008204:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	330c      	adds	r3, #12
 8008214:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800821e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008224:	65bb      	str	r3, [r7, #88]	; 0x58
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	330c      	adds	r3, #12
 800822c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800822e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008230:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008232:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800823c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1e5      	bne.n	800820e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3314      	adds	r3, #20
 8008248:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008254:	f043 0301 	orr.w	r3, r3, #1
 8008258:	657b      	str	r3, [r7, #84]	; 0x54
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3314      	adds	r3, #20
 8008260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008262:	63ba      	str	r2, [r7, #56]	; 0x38
 8008264:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e5      	bne.n	8008242 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3314      	adds	r3, #20
 800827c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	617b      	str	r3, [r7, #20]
   return(result);
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800828c:	653b      	str	r3, [r7, #80]	; 0x50
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3314      	adds	r3, #20
 8008294:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008296:	627a      	str	r2, [r7, #36]	; 0x24
 8008298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	6a39      	ldr	r1, [r7, #32]
 800829c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e5      	bne.n	8008276 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3760      	adds	r7, #96	; 0x60
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	08007f9d 	.word	0x08007f9d
 80082b8:	080080c3 	.word	0x080080c3
 80082bc:	080080f9 	.word	0x080080f9

080082c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b089      	sub	sp, #36	; 0x24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	330c      	adds	r3, #12
 80082ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80082de:	61fb      	str	r3, [r7, #28]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	330c      	adds	r3, #12
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	61ba      	str	r2, [r7, #24]
 80082ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6979      	ldr	r1, [r7, #20]
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	613b      	str	r3, [r7, #16]
   return(result);
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e5      	bne.n	80082c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2220      	movs	r2, #32
 8008300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008304:	bf00      	nop
 8008306:	3724      	adds	r7, #36	; 0x24
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008310:	b480      	push	{r7}
 8008312:	b095      	sub	sp, #84	; 0x54
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	330c      	adds	r3, #12
 800831e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008322:	e853 3f00 	ldrex	r3, [r3]
 8008326:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800832e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	330c      	adds	r3, #12
 8008336:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008338:	643a      	str	r2, [r7, #64]	; 0x40
 800833a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800833e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008340:	e841 2300 	strex	r3, r2, [r1]
 8008344:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1e5      	bne.n	8008318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3314      	adds	r3, #20
 8008352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	e853 3f00 	ldrex	r3, [r3]
 800835a:	61fb      	str	r3, [r7, #28]
   return(result);
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	f023 0301 	bic.w	r3, r3, #1
 8008362:	64bb      	str	r3, [r7, #72]	; 0x48
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3314      	adds	r3, #20
 800836a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800836c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800836e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008374:	e841 2300 	strex	r3, r2, [r1]
 8008378:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1e5      	bne.n	800834c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008384:	2b01      	cmp	r3, #1
 8008386:	d119      	bne.n	80083bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	330c      	adds	r3, #12
 800838e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	e853 3f00 	ldrex	r3, [r3]
 8008396:	60bb      	str	r3, [r7, #8]
   return(result);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f023 0310 	bic.w	r3, r3, #16
 800839e:	647b      	str	r3, [r7, #68]	; 0x44
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	330c      	adds	r3, #12
 80083a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083a8:	61ba      	str	r2, [r7, #24]
 80083aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	6979      	ldr	r1, [r7, #20]
 80083ae:	69ba      	ldr	r2, [r7, #24]
 80083b0:	e841 2300 	strex	r3, r2, [r1]
 80083b4:	613b      	str	r3, [r7, #16]
   return(result);
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e5      	bne.n	8008388 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80083ca:	bf00      	nop
 80083cc:	3754      	adds	r7, #84	; 0x54
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f7ff fdc9 	bl	8007f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083f6:	bf00      	nop
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083fe:	b480      	push	{r7}
 8008400:	b085      	sub	sp, #20
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b21      	cmp	r3, #33	; 0x21
 8008410:	d13e      	bne.n	8008490 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800841a:	d114      	bne.n	8008446 <UART_Transmit_IT+0x48>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d110      	bne.n	8008446 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a1b      	ldr	r3, [r3, #32]
 8008428:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008438:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	1c9a      	adds	r2, r3, #2
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	621a      	str	r2, [r3, #32]
 8008444:	e008      	b.n	8008458 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	1c59      	adds	r1, r3, #1
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6211      	str	r1, [r2, #32]
 8008450:	781a      	ldrb	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800845c:	b29b      	uxth	r3, r3
 800845e:	3b01      	subs	r3, #1
 8008460:	b29b      	uxth	r3, r3
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	4619      	mov	r1, r3
 8008466:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10f      	bne.n	800848c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68da      	ldr	r2, [r3, #12]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800847a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800848a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	e000      	b.n	8008492 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008490:	2302      	movs	r3, #2
  }
}
 8008492:	4618      	mov	r0, r3
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b082      	sub	sp, #8
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff fd44 	bl	8007f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b08c      	sub	sp, #48	; 0x30
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b22      	cmp	r3, #34	; 0x22
 80084e0:	f040 80ab 	bne.w	800863a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ec:	d117      	bne.n	800851e <UART_Receive_IT+0x50>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d113      	bne.n	800851e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	b29b      	uxth	r3, r3
 8008508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800850c:	b29a      	uxth	r2, r3
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008516:	1c9a      	adds	r2, r3, #2
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	629a      	str	r2, [r3, #40]	; 0x28
 800851c:	e026      	b.n	800856c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008522:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008524:	2300      	movs	r3, #0
 8008526:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008530:	d007      	beq.n	8008542 <UART_Receive_IT+0x74>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10a      	bne.n	8008550 <UART_Receive_IT+0x82>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d106      	bne.n	8008550 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	b2da      	uxtb	r2, r3
 800854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854c:	701a      	strb	r2, [r3, #0]
 800854e:	e008      	b.n	8008562 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	b2db      	uxtb	r3, r3
 8008558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800855c:	b2da      	uxtb	r2, r3
 800855e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008560:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008566:	1c5a      	adds	r2, r3, #1
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008570:	b29b      	uxth	r3, r3
 8008572:	3b01      	subs	r3, #1
 8008574:	b29b      	uxth	r3, r3
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	4619      	mov	r1, r3
 800857a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800857c:	2b00      	cmp	r3, #0
 800857e:	d15a      	bne.n	8008636 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0220 	bic.w	r2, r2, #32
 800858e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800859e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	695a      	ldr	r2, [r3, #20]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f022 0201 	bic.w	r2, r2, #1
 80085ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2220      	movs	r2, #32
 80085b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d135      	bne.n	800862c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	330c      	adds	r3, #12
 80085cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	e853 3f00 	ldrex	r3, [r3]
 80085d4:	613b      	str	r3, [r7, #16]
   return(result);
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f023 0310 	bic.w	r3, r3, #16
 80085dc:	627b      	str	r3, [r7, #36]	; 0x24
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	330c      	adds	r3, #12
 80085e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e6:	623a      	str	r2, [r7, #32]
 80085e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ea:	69f9      	ldr	r1, [r7, #28]
 80085ec:	6a3a      	ldr	r2, [r7, #32]
 80085ee:	e841 2300 	strex	r3, r2, [r1]
 80085f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1e5      	bne.n	80085c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0310 	and.w	r3, r3, #16
 8008604:	2b10      	cmp	r3, #16
 8008606:	d10a      	bne.n	800861e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7f8 fe69 	bl	80012fc <HAL_UARTEx_RxEventCallback>
 800862a:	e002      	b.n	8008632 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7ff fc97 	bl	8007f60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	e002      	b.n	800863c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	e000      	b.n	800863c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800863a:	2302      	movs	r3, #2
  }
}
 800863c:	4618      	mov	r0, r3
 800863e:	3730      	adds	r7, #48	; 0x30
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008648:	b09f      	sub	sp, #124	; 0x7c
 800864a:	af00      	add	r7, sp, #0
 800864c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800864e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800865a:	68d9      	ldr	r1, [r3, #12]
 800865c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	ea40 0301 	orr.w	r3, r0, r1
 8008664:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008668:	689a      	ldr	r2, [r3, #8]
 800866a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	431a      	orrs	r2, r3
 8008670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	431a      	orrs	r2, r3
 8008676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	4313      	orrs	r3, r2
 800867c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800867e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008688:	f021 010c 	bic.w	r1, r1, #12
 800868c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008692:	430b      	orrs	r3, r1
 8008694:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80086a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a2:	6999      	ldr	r1, [r3, #24]
 80086a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	ea40 0301 	orr.w	r3, r0, r1
 80086ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4bc5      	ldr	r3, [pc, #788]	; (80089c8 <UART_SetConfig+0x384>)
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d004      	beq.n	80086c2 <UART_SetConfig+0x7e>
 80086b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	4bc3      	ldr	r3, [pc, #780]	; (80089cc <UART_SetConfig+0x388>)
 80086be:	429a      	cmp	r2, r3
 80086c0:	d103      	bne.n	80086ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086c2:	f7fe fa77 	bl	8006bb4 <HAL_RCC_GetPCLK2Freq>
 80086c6:	6778      	str	r0, [r7, #116]	; 0x74
 80086c8:	e002      	b.n	80086d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086ca:	f7fe fa5f 	bl	8006b8c <HAL_RCC_GetPCLK1Freq>
 80086ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086d8:	f040 80b6 	bne.w	8008848 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086de:	461c      	mov	r4, r3
 80086e0:	f04f 0500 	mov.w	r5, #0
 80086e4:	4622      	mov	r2, r4
 80086e6:	462b      	mov	r3, r5
 80086e8:	1891      	adds	r1, r2, r2
 80086ea:	6439      	str	r1, [r7, #64]	; 0x40
 80086ec:	415b      	adcs	r3, r3
 80086ee:	647b      	str	r3, [r7, #68]	; 0x44
 80086f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086f4:	1912      	adds	r2, r2, r4
 80086f6:	eb45 0303 	adc.w	r3, r5, r3
 80086fa:	f04f 0000 	mov.w	r0, #0
 80086fe:	f04f 0100 	mov.w	r1, #0
 8008702:	00d9      	lsls	r1, r3, #3
 8008704:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008708:	00d0      	lsls	r0, r2, #3
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	1911      	adds	r1, r2, r4
 8008710:	6639      	str	r1, [r7, #96]	; 0x60
 8008712:	416b      	adcs	r3, r5
 8008714:	667b      	str	r3, [r7, #100]	; 0x64
 8008716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	461a      	mov	r2, r3
 800871c:	f04f 0300 	mov.w	r3, #0
 8008720:	1891      	adds	r1, r2, r2
 8008722:	63b9      	str	r1, [r7, #56]	; 0x38
 8008724:	415b      	adcs	r3, r3
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800872c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008730:	f7f8 fa92 	bl	8000c58 <__aeabi_uldivmod>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4ba5      	ldr	r3, [pc, #660]	; (80089d0 <UART_SetConfig+0x38c>)
 800873a:	fba3 2302 	umull	r2, r3, r3, r2
 800873e:	095b      	lsrs	r3, r3, #5
 8008740:	011e      	lsls	r6, r3, #4
 8008742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008744:	461c      	mov	r4, r3
 8008746:	f04f 0500 	mov.w	r5, #0
 800874a:	4622      	mov	r2, r4
 800874c:	462b      	mov	r3, r5
 800874e:	1891      	adds	r1, r2, r2
 8008750:	6339      	str	r1, [r7, #48]	; 0x30
 8008752:	415b      	adcs	r3, r3
 8008754:	637b      	str	r3, [r7, #52]	; 0x34
 8008756:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800875a:	1912      	adds	r2, r2, r4
 800875c:	eb45 0303 	adc.w	r3, r5, r3
 8008760:	f04f 0000 	mov.w	r0, #0
 8008764:	f04f 0100 	mov.w	r1, #0
 8008768:	00d9      	lsls	r1, r3, #3
 800876a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800876e:	00d0      	lsls	r0, r2, #3
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	1911      	adds	r1, r2, r4
 8008776:	65b9      	str	r1, [r7, #88]	; 0x58
 8008778:	416b      	adcs	r3, r5
 800877a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800877c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	461a      	mov	r2, r3
 8008782:	f04f 0300 	mov.w	r3, #0
 8008786:	1891      	adds	r1, r2, r2
 8008788:	62b9      	str	r1, [r7, #40]	; 0x28
 800878a:	415b      	adcs	r3, r3
 800878c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800878e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008792:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008796:	f7f8 fa5f 	bl	8000c58 <__aeabi_uldivmod>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	4b8c      	ldr	r3, [pc, #560]	; (80089d0 <UART_SetConfig+0x38c>)
 80087a0:	fba3 1302 	umull	r1, r3, r3, r2
 80087a4:	095b      	lsrs	r3, r3, #5
 80087a6:	2164      	movs	r1, #100	; 0x64
 80087a8:	fb01 f303 	mul.w	r3, r1, r3
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	00db      	lsls	r3, r3, #3
 80087b0:	3332      	adds	r3, #50	; 0x32
 80087b2:	4a87      	ldr	r2, [pc, #540]	; (80089d0 <UART_SetConfig+0x38c>)
 80087b4:	fba2 2303 	umull	r2, r3, r2, r3
 80087b8:	095b      	lsrs	r3, r3, #5
 80087ba:	005b      	lsls	r3, r3, #1
 80087bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80087c0:	441e      	add	r6, r3
 80087c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087c4:	4618      	mov	r0, r3
 80087c6:	f04f 0100 	mov.w	r1, #0
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	1894      	adds	r4, r2, r2
 80087d0:	623c      	str	r4, [r7, #32]
 80087d2:	415b      	adcs	r3, r3
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
 80087d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087da:	1812      	adds	r2, r2, r0
 80087dc:	eb41 0303 	adc.w	r3, r1, r3
 80087e0:	f04f 0400 	mov.w	r4, #0
 80087e4:	f04f 0500 	mov.w	r5, #0
 80087e8:	00dd      	lsls	r5, r3, #3
 80087ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80087ee:	00d4      	lsls	r4, r2, #3
 80087f0:	4622      	mov	r2, r4
 80087f2:	462b      	mov	r3, r5
 80087f4:	1814      	adds	r4, r2, r0
 80087f6:	653c      	str	r4, [r7, #80]	; 0x50
 80087f8:	414b      	adcs	r3, r1
 80087fa:	657b      	str	r3, [r7, #84]	; 0x54
 80087fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	461a      	mov	r2, r3
 8008802:	f04f 0300 	mov.w	r3, #0
 8008806:	1891      	adds	r1, r2, r2
 8008808:	61b9      	str	r1, [r7, #24]
 800880a:	415b      	adcs	r3, r3
 800880c:	61fb      	str	r3, [r7, #28]
 800880e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008812:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008816:	f7f8 fa1f 	bl	8000c58 <__aeabi_uldivmod>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4b6c      	ldr	r3, [pc, #432]	; (80089d0 <UART_SetConfig+0x38c>)
 8008820:	fba3 1302 	umull	r1, r3, r3, r2
 8008824:	095b      	lsrs	r3, r3, #5
 8008826:	2164      	movs	r1, #100	; 0x64
 8008828:	fb01 f303 	mul.w	r3, r1, r3
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	00db      	lsls	r3, r3, #3
 8008830:	3332      	adds	r3, #50	; 0x32
 8008832:	4a67      	ldr	r2, [pc, #412]	; (80089d0 <UART_SetConfig+0x38c>)
 8008834:	fba2 2303 	umull	r2, r3, r2, r3
 8008838:	095b      	lsrs	r3, r3, #5
 800883a:	f003 0207 	and.w	r2, r3, #7
 800883e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4432      	add	r2, r6
 8008844:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008846:	e0b9      	b.n	80089bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800884a:	461c      	mov	r4, r3
 800884c:	f04f 0500 	mov.w	r5, #0
 8008850:	4622      	mov	r2, r4
 8008852:	462b      	mov	r3, r5
 8008854:	1891      	adds	r1, r2, r2
 8008856:	6139      	str	r1, [r7, #16]
 8008858:	415b      	adcs	r3, r3
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008860:	1912      	adds	r2, r2, r4
 8008862:	eb45 0303 	adc.w	r3, r5, r3
 8008866:	f04f 0000 	mov.w	r0, #0
 800886a:	f04f 0100 	mov.w	r1, #0
 800886e:	00d9      	lsls	r1, r3, #3
 8008870:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008874:	00d0      	lsls	r0, r2, #3
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	eb12 0804 	adds.w	r8, r2, r4
 800887e:	eb43 0905 	adc.w	r9, r3, r5
 8008882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	4618      	mov	r0, r3
 8008888:	f04f 0100 	mov.w	r1, #0
 800888c:	f04f 0200 	mov.w	r2, #0
 8008890:	f04f 0300 	mov.w	r3, #0
 8008894:	008b      	lsls	r3, r1, #2
 8008896:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800889a:	0082      	lsls	r2, r0, #2
 800889c:	4640      	mov	r0, r8
 800889e:	4649      	mov	r1, r9
 80088a0:	f7f8 f9da 	bl	8000c58 <__aeabi_uldivmod>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4b49      	ldr	r3, [pc, #292]	; (80089d0 <UART_SetConfig+0x38c>)
 80088aa:	fba3 2302 	umull	r2, r3, r3, r2
 80088ae:	095b      	lsrs	r3, r3, #5
 80088b0:	011e      	lsls	r6, r3, #4
 80088b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088b4:	4618      	mov	r0, r3
 80088b6:	f04f 0100 	mov.w	r1, #0
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	1894      	adds	r4, r2, r2
 80088c0:	60bc      	str	r4, [r7, #8]
 80088c2:	415b      	adcs	r3, r3
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088ca:	1812      	adds	r2, r2, r0
 80088cc:	eb41 0303 	adc.w	r3, r1, r3
 80088d0:	f04f 0400 	mov.w	r4, #0
 80088d4:	f04f 0500 	mov.w	r5, #0
 80088d8:	00dd      	lsls	r5, r3, #3
 80088da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80088de:	00d4      	lsls	r4, r2, #3
 80088e0:	4622      	mov	r2, r4
 80088e2:	462b      	mov	r3, r5
 80088e4:	1814      	adds	r4, r2, r0
 80088e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80088e8:	414b      	adcs	r3, r1
 80088ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f04f 0100 	mov.w	r1, #0
 80088f6:	f04f 0200 	mov.w	r2, #0
 80088fa:	f04f 0300 	mov.w	r3, #0
 80088fe:	008b      	lsls	r3, r1, #2
 8008900:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008904:	0082      	lsls	r2, r0, #2
 8008906:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800890a:	f7f8 f9a5 	bl	8000c58 <__aeabi_uldivmod>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4b2f      	ldr	r3, [pc, #188]	; (80089d0 <UART_SetConfig+0x38c>)
 8008914:	fba3 1302 	umull	r1, r3, r3, r2
 8008918:	095b      	lsrs	r3, r3, #5
 800891a:	2164      	movs	r1, #100	; 0x64
 800891c:	fb01 f303 	mul.w	r3, r1, r3
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	3332      	adds	r3, #50	; 0x32
 8008926:	4a2a      	ldr	r2, [pc, #168]	; (80089d0 <UART_SetConfig+0x38c>)
 8008928:	fba2 2303 	umull	r2, r3, r2, r3
 800892c:	095b      	lsrs	r3, r3, #5
 800892e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008932:	441e      	add	r6, r3
 8008934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008936:	4618      	mov	r0, r3
 8008938:	f04f 0100 	mov.w	r1, #0
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	1894      	adds	r4, r2, r2
 8008942:	603c      	str	r4, [r7, #0]
 8008944:	415b      	adcs	r3, r3
 8008946:	607b      	str	r3, [r7, #4]
 8008948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800894c:	1812      	adds	r2, r2, r0
 800894e:	eb41 0303 	adc.w	r3, r1, r3
 8008952:	f04f 0400 	mov.w	r4, #0
 8008956:	f04f 0500 	mov.w	r5, #0
 800895a:	00dd      	lsls	r5, r3, #3
 800895c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008960:	00d4      	lsls	r4, r2, #3
 8008962:	4622      	mov	r2, r4
 8008964:	462b      	mov	r3, r5
 8008966:	eb12 0a00 	adds.w	sl, r2, r0
 800896a:	eb43 0b01 	adc.w	fp, r3, r1
 800896e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	4618      	mov	r0, r3
 8008974:	f04f 0100 	mov.w	r1, #0
 8008978:	f04f 0200 	mov.w	r2, #0
 800897c:	f04f 0300 	mov.w	r3, #0
 8008980:	008b      	lsls	r3, r1, #2
 8008982:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008986:	0082      	lsls	r2, r0, #2
 8008988:	4650      	mov	r0, sl
 800898a:	4659      	mov	r1, fp
 800898c:	f7f8 f964 	bl	8000c58 <__aeabi_uldivmod>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4b0e      	ldr	r3, [pc, #56]	; (80089d0 <UART_SetConfig+0x38c>)
 8008996:	fba3 1302 	umull	r1, r3, r3, r2
 800899a:	095b      	lsrs	r3, r3, #5
 800899c:	2164      	movs	r1, #100	; 0x64
 800899e:	fb01 f303 	mul.w	r3, r1, r3
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	011b      	lsls	r3, r3, #4
 80089a6:	3332      	adds	r3, #50	; 0x32
 80089a8:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <UART_SetConfig+0x38c>)
 80089aa:	fba2 2303 	umull	r2, r3, r2, r3
 80089ae:	095b      	lsrs	r3, r3, #5
 80089b0:	f003 020f 	and.w	r2, r3, #15
 80089b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4432      	add	r2, r6
 80089ba:	609a      	str	r2, [r3, #8]
}
 80089bc:	bf00      	nop
 80089be:	377c      	adds	r7, #124	; 0x7c
 80089c0:	46bd      	mov	sp, r7
 80089c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c6:	bf00      	nop
 80089c8:	40011000 	.word	0x40011000
 80089cc:	40011400 	.word	0x40011400
 80089d0:	51eb851f 	.word	0x51eb851f

080089d4 <__errno>:
 80089d4:	4b01      	ldr	r3, [pc, #4]	; (80089dc <__errno+0x8>)
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	20000010 	.word	0x20000010

080089e0 <__libc_init_array>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	4d0d      	ldr	r5, [pc, #52]	; (8008a18 <__libc_init_array+0x38>)
 80089e4:	4c0d      	ldr	r4, [pc, #52]	; (8008a1c <__libc_init_array+0x3c>)
 80089e6:	1b64      	subs	r4, r4, r5
 80089e8:	10a4      	asrs	r4, r4, #2
 80089ea:	2600      	movs	r6, #0
 80089ec:	42a6      	cmp	r6, r4
 80089ee:	d109      	bne.n	8008a04 <__libc_init_array+0x24>
 80089f0:	4d0b      	ldr	r5, [pc, #44]	; (8008a20 <__libc_init_array+0x40>)
 80089f2:	4c0c      	ldr	r4, [pc, #48]	; (8008a24 <__libc_init_array+0x44>)
 80089f4:	f002 fcf2 	bl	800b3dc <_init>
 80089f8:	1b64      	subs	r4, r4, r5
 80089fa:	10a4      	asrs	r4, r4, #2
 80089fc:	2600      	movs	r6, #0
 80089fe:	42a6      	cmp	r6, r4
 8008a00:	d105      	bne.n	8008a0e <__libc_init_array+0x2e>
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a08:	4798      	blx	r3
 8008a0a:	3601      	adds	r6, #1
 8008a0c:	e7ee      	b.n	80089ec <__libc_init_array+0xc>
 8008a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a12:	4798      	blx	r3
 8008a14:	3601      	adds	r6, #1
 8008a16:	e7f2      	b.n	80089fe <__libc_init_array+0x1e>
 8008a18:	0800b804 	.word	0x0800b804
 8008a1c:	0800b804 	.word	0x0800b804
 8008a20:	0800b804 	.word	0x0800b804
 8008a24:	0800b808 	.word	0x0800b808

08008a28 <memset>:
 8008a28:	4402      	add	r2, r0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d100      	bne.n	8008a32 <memset+0xa>
 8008a30:	4770      	bx	lr
 8008a32:	f803 1b01 	strb.w	r1, [r3], #1
 8008a36:	e7f9      	b.n	8008a2c <memset+0x4>

08008a38 <__cvt>:
 8008a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3c:	ec55 4b10 	vmov	r4, r5, d0
 8008a40:	2d00      	cmp	r5, #0
 8008a42:	460e      	mov	r6, r1
 8008a44:	4619      	mov	r1, r3
 8008a46:	462b      	mov	r3, r5
 8008a48:	bfbb      	ittet	lt
 8008a4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a4e:	461d      	movlt	r5, r3
 8008a50:	2300      	movge	r3, #0
 8008a52:	232d      	movlt	r3, #45	; 0x2d
 8008a54:	700b      	strb	r3, [r1, #0]
 8008a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a5c:	4691      	mov	r9, r2
 8008a5e:	f023 0820 	bic.w	r8, r3, #32
 8008a62:	bfbc      	itt	lt
 8008a64:	4622      	movlt	r2, r4
 8008a66:	4614      	movlt	r4, r2
 8008a68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a6c:	d005      	beq.n	8008a7a <__cvt+0x42>
 8008a6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a72:	d100      	bne.n	8008a76 <__cvt+0x3e>
 8008a74:	3601      	adds	r6, #1
 8008a76:	2102      	movs	r1, #2
 8008a78:	e000      	b.n	8008a7c <__cvt+0x44>
 8008a7a:	2103      	movs	r1, #3
 8008a7c:	ab03      	add	r3, sp, #12
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	ab02      	add	r3, sp, #8
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	ec45 4b10 	vmov	d0, r4, r5
 8008a88:	4653      	mov	r3, sl
 8008a8a:	4632      	mov	r2, r6
 8008a8c:	f000 fccc 	bl	8009428 <_dtoa_r>
 8008a90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a94:	4607      	mov	r7, r0
 8008a96:	d102      	bne.n	8008a9e <__cvt+0x66>
 8008a98:	f019 0f01 	tst.w	r9, #1
 8008a9c:	d022      	beq.n	8008ae4 <__cvt+0xac>
 8008a9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008aa2:	eb07 0906 	add.w	r9, r7, r6
 8008aa6:	d110      	bne.n	8008aca <__cvt+0x92>
 8008aa8:	783b      	ldrb	r3, [r7, #0]
 8008aaa:	2b30      	cmp	r3, #48	; 0x30
 8008aac:	d10a      	bne.n	8008ac4 <__cvt+0x8c>
 8008aae:	2200      	movs	r2, #0
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	f7f8 f80f 	bl	8000ad8 <__aeabi_dcmpeq>
 8008aba:	b918      	cbnz	r0, 8008ac4 <__cvt+0x8c>
 8008abc:	f1c6 0601 	rsb	r6, r6, #1
 8008ac0:	f8ca 6000 	str.w	r6, [sl]
 8008ac4:	f8da 3000 	ldr.w	r3, [sl]
 8008ac8:	4499      	add	r9, r3
 8008aca:	2200      	movs	r2, #0
 8008acc:	2300      	movs	r3, #0
 8008ace:	4620      	mov	r0, r4
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	f7f8 f801 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ad6:	b108      	cbz	r0, 8008adc <__cvt+0xa4>
 8008ad8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008adc:	2230      	movs	r2, #48	; 0x30
 8008ade:	9b03      	ldr	r3, [sp, #12]
 8008ae0:	454b      	cmp	r3, r9
 8008ae2:	d307      	bcc.n	8008af4 <__cvt+0xbc>
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ae8:	1bdb      	subs	r3, r3, r7
 8008aea:	4638      	mov	r0, r7
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	b004      	add	sp, #16
 8008af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af4:	1c59      	adds	r1, r3, #1
 8008af6:	9103      	str	r1, [sp, #12]
 8008af8:	701a      	strb	r2, [r3, #0]
 8008afa:	e7f0      	b.n	8008ade <__cvt+0xa6>

08008afc <__exponent>:
 8008afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008afe:	4603      	mov	r3, r0
 8008b00:	2900      	cmp	r1, #0
 8008b02:	bfb8      	it	lt
 8008b04:	4249      	neglt	r1, r1
 8008b06:	f803 2b02 	strb.w	r2, [r3], #2
 8008b0a:	bfb4      	ite	lt
 8008b0c:	222d      	movlt	r2, #45	; 0x2d
 8008b0e:	222b      	movge	r2, #43	; 0x2b
 8008b10:	2909      	cmp	r1, #9
 8008b12:	7042      	strb	r2, [r0, #1]
 8008b14:	dd2a      	ble.n	8008b6c <__exponent+0x70>
 8008b16:	f10d 0407 	add.w	r4, sp, #7
 8008b1a:	46a4      	mov	ip, r4
 8008b1c:	270a      	movs	r7, #10
 8008b1e:	46a6      	mov	lr, r4
 8008b20:	460a      	mov	r2, r1
 8008b22:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b26:	fb07 1516 	mls	r5, r7, r6, r1
 8008b2a:	3530      	adds	r5, #48	; 0x30
 8008b2c:	2a63      	cmp	r2, #99	; 0x63
 8008b2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b36:	4631      	mov	r1, r6
 8008b38:	dcf1      	bgt.n	8008b1e <__exponent+0x22>
 8008b3a:	3130      	adds	r1, #48	; 0x30
 8008b3c:	f1ae 0502 	sub.w	r5, lr, #2
 8008b40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b44:	1c44      	adds	r4, r0, #1
 8008b46:	4629      	mov	r1, r5
 8008b48:	4561      	cmp	r1, ip
 8008b4a:	d30a      	bcc.n	8008b62 <__exponent+0x66>
 8008b4c:	f10d 0209 	add.w	r2, sp, #9
 8008b50:	eba2 020e 	sub.w	r2, r2, lr
 8008b54:	4565      	cmp	r5, ip
 8008b56:	bf88      	it	hi
 8008b58:	2200      	movhi	r2, #0
 8008b5a:	4413      	add	r3, r2
 8008b5c:	1a18      	subs	r0, r3, r0
 8008b5e:	b003      	add	sp, #12
 8008b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b6a:	e7ed      	b.n	8008b48 <__exponent+0x4c>
 8008b6c:	2330      	movs	r3, #48	; 0x30
 8008b6e:	3130      	adds	r1, #48	; 0x30
 8008b70:	7083      	strb	r3, [r0, #2]
 8008b72:	70c1      	strb	r1, [r0, #3]
 8008b74:	1d03      	adds	r3, r0, #4
 8008b76:	e7f1      	b.n	8008b5c <__exponent+0x60>

08008b78 <_printf_float>:
 8008b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b7c:	ed2d 8b02 	vpush	{d8}
 8008b80:	b08d      	sub	sp, #52	; 0x34
 8008b82:	460c      	mov	r4, r1
 8008b84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b88:	4616      	mov	r6, r2
 8008b8a:	461f      	mov	r7, r3
 8008b8c:	4605      	mov	r5, r0
 8008b8e:	f001 fa37 	bl	800a000 <_localeconv_r>
 8008b92:	f8d0 a000 	ldr.w	sl, [r0]
 8008b96:	4650      	mov	r0, sl
 8008b98:	f7f7 fb22 	bl	80001e0 <strlen>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	9305      	str	r3, [sp, #20]
 8008ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ba8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008bac:	3307      	adds	r3, #7
 8008bae:	f023 0307 	bic.w	r3, r3, #7
 8008bb2:	f103 0208 	add.w	r2, r3, #8
 8008bb6:	f8c8 2000 	str.w	r2, [r8]
 8008bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008bc2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008bc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bca:	9307      	str	r3, [sp, #28]
 8008bcc:	f8cd 8018 	str.w	r8, [sp, #24]
 8008bd0:	ee08 0a10 	vmov	s16, r0
 8008bd4:	4b9f      	ldr	r3, [pc, #636]	; (8008e54 <_printf_float+0x2dc>)
 8008bd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bda:	f04f 32ff 	mov.w	r2, #4294967295
 8008bde:	f7f7 ffad 	bl	8000b3c <__aeabi_dcmpun>
 8008be2:	bb88      	cbnz	r0, 8008c48 <_printf_float+0xd0>
 8008be4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008be8:	4b9a      	ldr	r3, [pc, #616]	; (8008e54 <_printf_float+0x2dc>)
 8008bea:	f04f 32ff 	mov.w	r2, #4294967295
 8008bee:	f7f7 ff87 	bl	8000b00 <__aeabi_dcmple>
 8008bf2:	bb48      	cbnz	r0, 8008c48 <_printf_float+0xd0>
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	4640      	mov	r0, r8
 8008bfa:	4649      	mov	r1, r9
 8008bfc:	f7f7 ff76 	bl	8000aec <__aeabi_dcmplt>
 8008c00:	b110      	cbz	r0, 8008c08 <_printf_float+0x90>
 8008c02:	232d      	movs	r3, #45	; 0x2d
 8008c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c08:	4b93      	ldr	r3, [pc, #588]	; (8008e58 <_printf_float+0x2e0>)
 8008c0a:	4894      	ldr	r0, [pc, #592]	; (8008e5c <_printf_float+0x2e4>)
 8008c0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c10:	bf94      	ite	ls
 8008c12:	4698      	movls	r8, r3
 8008c14:	4680      	movhi	r8, r0
 8008c16:	2303      	movs	r3, #3
 8008c18:	6123      	str	r3, [r4, #16]
 8008c1a:	9b05      	ldr	r3, [sp, #20]
 8008c1c:	f023 0204 	bic.w	r2, r3, #4
 8008c20:	6022      	str	r2, [r4, #0]
 8008c22:	f04f 0900 	mov.w	r9, #0
 8008c26:	9700      	str	r7, [sp, #0]
 8008c28:	4633      	mov	r3, r6
 8008c2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c2c:	4621      	mov	r1, r4
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f000 f9d8 	bl	8008fe4 <_printf_common>
 8008c34:	3001      	adds	r0, #1
 8008c36:	f040 8090 	bne.w	8008d5a <_printf_float+0x1e2>
 8008c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c3e:	b00d      	add	sp, #52	; 0x34
 8008c40:	ecbd 8b02 	vpop	{d8}
 8008c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c48:	4642      	mov	r2, r8
 8008c4a:	464b      	mov	r3, r9
 8008c4c:	4640      	mov	r0, r8
 8008c4e:	4649      	mov	r1, r9
 8008c50:	f7f7 ff74 	bl	8000b3c <__aeabi_dcmpun>
 8008c54:	b140      	cbz	r0, 8008c68 <_printf_float+0xf0>
 8008c56:	464b      	mov	r3, r9
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	bfbc      	itt	lt
 8008c5c:	232d      	movlt	r3, #45	; 0x2d
 8008c5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c62:	487f      	ldr	r0, [pc, #508]	; (8008e60 <_printf_float+0x2e8>)
 8008c64:	4b7f      	ldr	r3, [pc, #508]	; (8008e64 <_printf_float+0x2ec>)
 8008c66:	e7d1      	b.n	8008c0c <_printf_float+0x94>
 8008c68:	6863      	ldr	r3, [r4, #4]
 8008c6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c6e:	9206      	str	r2, [sp, #24]
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	d13f      	bne.n	8008cf4 <_printf_float+0x17c>
 8008c74:	2306      	movs	r3, #6
 8008c76:	6063      	str	r3, [r4, #4]
 8008c78:	9b05      	ldr	r3, [sp, #20]
 8008c7a:	6861      	ldr	r1, [r4, #4]
 8008c7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c80:	2300      	movs	r3, #0
 8008c82:	9303      	str	r3, [sp, #12]
 8008c84:	ab0a      	add	r3, sp, #40	; 0x28
 8008c86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c8a:	ab09      	add	r3, sp, #36	; 0x24
 8008c8c:	ec49 8b10 	vmov	d0, r8, r9
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	6022      	str	r2, [r4, #0]
 8008c94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c98:	4628      	mov	r0, r5
 8008c9a:	f7ff fecd 	bl	8008a38 <__cvt>
 8008c9e:	9b06      	ldr	r3, [sp, #24]
 8008ca0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ca2:	2b47      	cmp	r3, #71	; 0x47
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	d108      	bne.n	8008cba <_printf_float+0x142>
 8008ca8:	1cc8      	adds	r0, r1, #3
 8008caa:	db02      	blt.n	8008cb2 <_printf_float+0x13a>
 8008cac:	6863      	ldr	r3, [r4, #4]
 8008cae:	4299      	cmp	r1, r3
 8008cb0:	dd41      	ble.n	8008d36 <_printf_float+0x1be>
 8008cb2:	f1ab 0b02 	sub.w	fp, fp, #2
 8008cb6:	fa5f fb8b 	uxtb.w	fp, fp
 8008cba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008cbe:	d820      	bhi.n	8008d02 <_printf_float+0x18a>
 8008cc0:	3901      	subs	r1, #1
 8008cc2:	465a      	mov	r2, fp
 8008cc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008cc8:	9109      	str	r1, [sp, #36]	; 0x24
 8008cca:	f7ff ff17 	bl	8008afc <__exponent>
 8008cce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cd0:	1813      	adds	r3, r2, r0
 8008cd2:	2a01      	cmp	r2, #1
 8008cd4:	4681      	mov	r9, r0
 8008cd6:	6123      	str	r3, [r4, #16]
 8008cd8:	dc02      	bgt.n	8008ce0 <_printf_float+0x168>
 8008cda:	6822      	ldr	r2, [r4, #0]
 8008cdc:	07d2      	lsls	r2, r2, #31
 8008cde:	d501      	bpl.n	8008ce4 <_printf_float+0x16c>
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	6123      	str	r3, [r4, #16]
 8008ce4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d09c      	beq.n	8008c26 <_printf_float+0xae>
 8008cec:	232d      	movs	r3, #45	; 0x2d
 8008cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf2:	e798      	b.n	8008c26 <_printf_float+0xae>
 8008cf4:	9a06      	ldr	r2, [sp, #24]
 8008cf6:	2a47      	cmp	r2, #71	; 0x47
 8008cf8:	d1be      	bne.n	8008c78 <_printf_float+0x100>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1bc      	bne.n	8008c78 <_printf_float+0x100>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e7b9      	b.n	8008c76 <_printf_float+0xfe>
 8008d02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d06:	d118      	bne.n	8008d3a <_printf_float+0x1c2>
 8008d08:	2900      	cmp	r1, #0
 8008d0a:	6863      	ldr	r3, [r4, #4]
 8008d0c:	dd0b      	ble.n	8008d26 <_printf_float+0x1ae>
 8008d0e:	6121      	str	r1, [r4, #16]
 8008d10:	b913      	cbnz	r3, 8008d18 <_printf_float+0x1a0>
 8008d12:	6822      	ldr	r2, [r4, #0]
 8008d14:	07d0      	lsls	r0, r2, #31
 8008d16:	d502      	bpl.n	8008d1e <_printf_float+0x1a6>
 8008d18:	3301      	adds	r3, #1
 8008d1a:	440b      	add	r3, r1
 8008d1c:	6123      	str	r3, [r4, #16]
 8008d1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d20:	f04f 0900 	mov.w	r9, #0
 8008d24:	e7de      	b.n	8008ce4 <_printf_float+0x16c>
 8008d26:	b913      	cbnz	r3, 8008d2e <_printf_float+0x1b6>
 8008d28:	6822      	ldr	r2, [r4, #0]
 8008d2a:	07d2      	lsls	r2, r2, #31
 8008d2c:	d501      	bpl.n	8008d32 <_printf_float+0x1ba>
 8008d2e:	3302      	adds	r3, #2
 8008d30:	e7f4      	b.n	8008d1c <_printf_float+0x1a4>
 8008d32:	2301      	movs	r3, #1
 8008d34:	e7f2      	b.n	8008d1c <_printf_float+0x1a4>
 8008d36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d3c:	4299      	cmp	r1, r3
 8008d3e:	db05      	blt.n	8008d4c <_printf_float+0x1d4>
 8008d40:	6823      	ldr	r3, [r4, #0]
 8008d42:	6121      	str	r1, [r4, #16]
 8008d44:	07d8      	lsls	r0, r3, #31
 8008d46:	d5ea      	bpl.n	8008d1e <_printf_float+0x1a6>
 8008d48:	1c4b      	adds	r3, r1, #1
 8008d4a:	e7e7      	b.n	8008d1c <_printf_float+0x1a4>
 8008d4c:	2900      	cmp	r1, #0
 8008d4e:	bfd4      	ite	le
 8008d50:	f1c1 0202 	rsble	r2, r1, #2
 8008d54:	2201      	movgt	r2, #1
 8008d56:	4413      	add	r3, r2
 8008d58:	e7e0      	b.n	8008d1c <_printf_float+0x1a4>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	055a      	lsls	r2, r3, #21
 8008d5e:	d407      	bmi.n	8008d70 <_printf_float+0x1f8>
 8008d60:	6923      	ldr	r3, [r4, #16]
 8008d62:	4642      	mov	r2, r8
 8008d64:	4631      	mov	r1, r6
 8008d66:	4628      	mov	r0, r5
 8008d68:	47b8      	blx	r7
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	d12c      	bne.n	8008dc8 <_printf_float+0x250>
 8008d6e:	e764      	b.n	8008c3a <_printf_float+0xc2>
 8008d70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d74:	f240 80e0 	bls.w	8008f38 <_printf_float+0x3c0>
 8008d78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f7f7 feaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	d034      	beq.n	8008df2 <_printf_float+0x27a>
 8008d88:	4a37      	ldr	r2, [pc, #220]	; (8008e68 <_printf_float+0x2f0>)
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	4628      	mov	r0, r5
 8008d90:	47b8      	blx	r7
 8008d92:	3001      	adds	r0, #1
 8008d94:	f43f af51 	beq.w	8008c3a <_printf_float+0xc2>
 8008d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	db02      	blt.n	8008da6 <_printf_float+0x22e>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	07d8      	lsls	r0, r3, #31
 8008da4:	d510      	bpl.n	8008dc8 <_printf_float+0x250>
 8008da6:	ee18 3a10 	vmov	r3, s16
 8008daa:	4652      	mov	r2, sl
 8008dac:	4631      	mov	r1, r6
 8008dae:	4628      	mov	r0, r5
 8008db0:	47b8      	blx	r7
 8008db2:	3001      	adds	r0, #1
 8008db4:	f43f af41 	beq.w	8008c3a <_printf_float+0xc2>
 8008db8:	f04f 0800 	mov.w	r8, #0
 8008dbc:	f104 091a 	add.w	r9, r4, #26
 8008dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	4543      	cmp	r3, r8
 8008dc6:	dc09      	bgt.n	8008ddc <_printf_float+0x264>
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	079b      	lsls	r3, r3, #30
 8008dcc:	f100 8105 	bmi.w	8008fda <_printf_float+0x462>
 8008dd0:	68e0      	ldr	r0, [r4, #12]
 8008dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd4:	4298      	cmp	r0, r3
 8008dd6:	bfb8      	it	lt
 8008dd8:	4618      	movlt	r0, r3
 8008dda:	e730      	b.n	8008c3e <_printf_float+0xc6>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	464a      	mov	r2, r9
 8008de0:	4631      	mov	r1, r6
 8008de2:	4628      	mov	r0, r5
 8008de4:	47b8      	blx	r7
 8008de6:	3001      	adds	r0, #1
 8008de8:	f43f af27 	beq.w	8008c3a <_printf_float+0xc2>
 8008dec:	f108 0801 	add.w	r8, r8, #1
 8008df0:	e7e6      	b.n	8008dc0 <_printf_float+0x248>
 8008df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	dc39      	bgt.n	8008e6c <_printf_float+0x2f4>
 8008df8:	4a1b      	ldr	r2, [pc, #108]	; (8008e68 <_printf_float+0x2f0>)
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	4628      	mov	r0, r5
 8008e00:	47b8      	blx	r7
 8008e02:	3001      	adds	r0, #1
 8008e04:	f43f af19 	beq.w	8008c3a <_printf_float+0xc2>
 8008e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	d102      	bne.n	8008e16 <_printf_float+0x29e>
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	07d9      	lsls	r1, r3, #31
 8008e14:	d5d8      	bpl.n	8008dc8 <_printf_float+0x250>
 8008e16:	ee18 3a10 	vmov	r3, s16
 8008e1a:	4652      	mov	r2, sl
 8008e1c:	4631      	mov	r1, r6
 8008e1e:	4628      	mov	r0, r5
 8008e20:	47b8      	blx	r7
 8008e22:	3001      	adds	r0, #1
 8008e24:	f43f af09 	beq.w	8008c3a <_printf_float+0xc2>
 8008e28:	f04f 0900 	mov.w	r9, #0
 8008e2c:	f104 0a1a 	add.w	sl, r4, #26
 8008e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e32:	425b      	negs	r3, r3
 8008e34:	454b      	cmp	r3, r9
 8008e36:	dc01      	bgt.n	8008e3c <_printf_float+0x2c4>
 8008e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e3a:	e792      	b.n	8008d62 <_printf_float+0x1ea>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	4652      	mov	r2, sl
 8008e40:	4631      	mov	r1, r6
 8008e42:	4628      	mov	r0, r5
 8008e44:	47b8      	blx	r7
 8008e46:	3001      	adds	r0, #1
 8008e48:	f43f aef7 	beq.w	8008c3a <_printf_float+0xc2>
 8008e4c:	f109 0901 	add.w	r9, r9, #1
 8008e50:	e7ee      	b.n	8008e30 <_printf_float+0x2b8>
 8008e52:	bf00      	nop
 8008e54:	7fefffff 	.word	0x7fefffff
 8008e58:	0800b41c 	.word	0x0800b41c
 8008e5c:	0800b420 	.word	0x0800b420
 8008e60:	0800b428 	.word	0x0800b428
 8008e64:	0800b424 	.word	0x0800b424
 8008e68:	0800b42c 	.word	0x0800b42c
 8008e6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e70:	429a      	cmp	r2, r3
 8008e72:	bfa8      	it	ge
 8008e74:	461a      	movge	r2, r3
 8008e76:	2a00      	cmp	r2, #0
 8008e78:	4691      	mov	r9, r2
 8008e7a:	dc37      	bgt.n	8008eec <_printf_float+0x374>
 8008e7c:	f04f 0b00 	mov.w	fp, #0
 8008e80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e84:	f104 021a 	add.w	r2, r4, #26
 8008e88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e8a:	9305      	str	r3, [sp, #20]
 8008e8c:	eba3 0309 	sub.w	r3, r3, r9
 8008e90:	455b      	cmp	r3, fp
 8008e92:	dc33      	bgt.n	8008efc <_printf_float+0x384>
 8008e94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	db3b      	blt.n	8008f14 <_printf_float+0x39c>
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	07da      	lsls	r2, r3, #31
 8008ea0:	d438      	bmi.n	8008f14 <_printf_float+0x39c>
 8008ea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ea4:	9b05      	ldr	r3, [sp, #20]
 8008ea6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	eba2 0901 	sub.w	r9, r2, r1
 8008eae:	4599      	cmp	r9, r3
 8008eb0:	bfa8      	it	ge
 8008eb2:	4699      	movge	r9, r3
 8008eb4:	f1b9 0f00 	cmp.w	r9, #0
 8008eb8:	dc35      	bgt.n	8008f26 <_printf_float+0x3ae>
 8008eba:	f04f 0800 	mov.w	r8, #0
 8008ebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ec2:	f104 0a1a 	add.w	sl, r4, #26
 8008ec6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008eca:	1a9b      	subs	r3, r3, r2
 8008ecc:	eba3 0309 	sub.w	r3, r3, r9
 8008ed0:	4543      	cmp	r3, r8
 8008ed2:	f77f af79 	ble.w	8008dc8 <_printf_float+0x250>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4652      	mov	r2, sl
 8008eda:	4631      	mov	r1, r6
 8008edc:	4628      	mov	r0, r5
 8008ede:	47b8      	blx	r7
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	f43f aeaa 	beq.w	8008c3a <_printf_float+0xc2>
 8008ee6:	f108 0801 	add.w	r8, r8, #1
 8008eea:	e7ec      	b.n	8008ec6 <_printf_float+0x34e>
 8008eec:	4613      	mov	r3, r2
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4642      	mov	r2, r8
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	47b8      	blx	r7
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	d1c0      	bne.n	8008e7c <_printf_float+0x304>
 8008efa:	e69e      	b.n	8008c3a <_printf_float+0xc2>
 8008efc:	2301      	movs	r3, #1
 8008efe:	4631      	mov	r1, r6
 8008f00:	4628      	mov	r0, r5
 8008f02:	9205      	str	r2, [sp, #20]
 8008f04:	47b8      	blx	r7
 8008f06:	3001      	adds	r0, #1
 8008f08:	f43f ae97 	beq.w	8008c3a <_printf_float+0xc2>
 8008f0c:	9a05      	ldr	r2, [sp, #20]
 8008f0e:	f10b 0b01 	add.w	fp, fp, #1
 8008f12:	e7b9      	b.n	8008e88 <_printf_float+0x310>
 8008f14:	ee18 3a10 	vmov	r3, s16
 8008f18:	4652      	mov	r2, sl
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	47b8      	blx	r7
 8008f20:	3001      	adds	r0, #1
 8008f22:	d1be      	bne.n	8008ea2 <_printf_float+0x32a>
 8008f24:	e689      	b.n	8008c3a <_printf_float+0xc2>
 8008f26:	9a05      	ldr	r2, [sp, #20]
 8008f28:	464b      	mov	r3, r9
 8008f2a:	4442      	add	r2, r8
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	4628      	mov	r0, r5
 8008f30:	47b8      	blx	r7
 8008f32:	3001      	adds	r0, #1
 8008f34:	d1c1      	bne.n	8008eba <_printf_float+0x342>
 8008f36:	e680      	b.n	8008c3a <_printf_float+0xc2>
 8008f38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f3a:	2a01      	cmp	r2, #1
 8008f3c:	dc01      	bgt.n	8008f42 <_printf_float+0x3ca>
 8008f3e:	07db      	lsls	r3, r3, #31
 8008f40:	d538      	bpl.n	8008fb4 <_printf_float+0x43c>
 8008f42:	2301      	movs	r3, #1
 8008f44:	4642      	mov	r2, r8
 8008f46:	4631      	mov	r1, r6
 8008f48:	4628      	mov	r0, r5
 8008f4a:	47b8      	blx	r7
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	f43f ae74 	beq.w	8008c3a <_printf_float+0xc2>
 8008f52:	ee18 3a10 	vmov	r3, s16
 8008f56:	4652      	mov	r2, sl
 8008f58:	4631      	mov	r1, r6
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	47b8      	blx	r7
 8008f5e:	3001      	adds	r0, #1
 8008f60:	f43f ae6b 	beq.w	8008c3a <_printf_float+0xc2>
 8008f64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f7f7 fdb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f70:	b9d8      	cbnz	r0, 8008faa <_printf_float+0x432>
 8008f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f74:	f108 0201 	add.w	r2, r8, #1
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	47b8      	blx	r7
 8008f80:	3001      	adds	r0, #1
 8008f82:	d10e      	bne.n	8008fa2 <_printf_float+0x42a>
 8008f84:	e659      	b.n	8008c3a <_printf_float+0xc2>
 8008f86:	2301      	movs	r3, #1
 8008f88:	4652      	mov	r2, sl
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	47b8      	blx	r7
 8008f90:	3001      	adds	r0, #1
 8008f92:	f43f ae52 	beq.w	8008c3a <_printf_float+0xc2>
 8008f96:	f108 0801 	add.w	r8, r8, #1
 8008f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	4543      	cmp	r3, r8
 8008fa0:	dcf1      	bgt.n	8008f86 <_printf_float+0x40e>
 8008fa2:	464b      	mov	r3, r9
 8008fa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008fa8:	e6dc      	b.n	8008d64 <_printf_float+0x1ec>
 8008faa:	f04f 0800 	mov.w	r8, #0
 8008fae:	f104 0a1a 	add.w	sl, r4, #26
 8008fb2:	e7f2      	b.n	8008f9a <_printf_float+0x422>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	4642      	mov	r2, r8
 8008fb8:	e7df      	b.n	8008f7a <_printf_float+0x402>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	464a      	mov	r2, r9
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	47b8      	blx	r7
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	f43f ae38 	beq.w	8008c3a <_printf_float+0xc2>
 8008fca:	f108 0801 	add.w	r8, r8, #1
 8008fce:	68e3      	ldr	r3, [r4, #12]
 8008fd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fd2:	1a5b      	subs	r3, r3, r1
 8008fd4:	4543      	cmp	r3, r8
 8008fd6:	dcf0      	bgt.n	8008fba <_printf_float+0x442>
 8008fd8:	e6fa      	b.n	8008dd0 <_printf_float+0x258>
 8008fda:	f04f 0800 	mov.w	r8, #0
 8008fde:	f104 0919 	add.w	r9, r4, #25
 8008fe2:	e7f4      	b.n	8008fce <_printf_float+0x456>

08008fe4 <_printf_common>:
 8008fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe8:	4616      	mov	r6, r2
 8008fea:	4699      	mov	r9, r3
 8008fec:	688a      	ldr	r2, [r1, #8]
 8008fee:	690b      	ldr	r3, [r1, #16]
 8008ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	bfb8      	it	lt
 8008ff8:	4613      	movlt	r3, r2
 8008ffa:	6033      	str	r3, [r6, #0]
 8008ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009000:	4607      	mov	r7, r0
 8009002:	460c      	mov	r4, r1
 8009004:	b10a      	cbz	r2, 800900a <_printf_common+0x26>
 8009006:	3301      	adds	r3, #1
 8009008:	6033      	str	r3, [r6, #0]
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	0699      	lsls	r1, r3, #26
 800900e:	bf42      	ittt	mi
 8009010:	6833      	ldrmi	r3, [r6, #0]
 8009012:	3302      	addmi	r3, #2
 8009014:	6033      	strmi	r3, [r6, #0]
 8009016:	6825      	ldr	r5, [r4, #0]
 8009018:	f015 0506 	ands.w	r5, r5, #6
 800901c:	d106      	bne.n	800902c <_printf_common+0x48>
 800901e:	f104 0a19 	add.w	sl, r4, #25
 8009022:	68e3      	ldr	r3, [r4, #12]
 8009024:	6832      	ldr	r2, [r6, #0]
 8009026:	1a9b      	subs	r3, r3, r2
 8009028:	42ab      	cmp	r3, r5
 800902a:	dc26      	bgt.n	800907a <_printf_common+0x96>
 800902c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009030:	1e13      	subs	r3, r2, #0
 8009032:	6822      	ldr	r2, [r4, #0]
 8009034:	bf18      	it	ne
 8009036:	2301      	movne	r3, #1
 8009038:	0692      	lsls	r2, r2, #26
 800903a:	d42b      	bmi.n	8009094 <_printf_common+0xb0>
 800903c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009040:	4649      	mov	r1, r9
 8009042:	4638      	mov	r0, r7
 8009044:	47c0      	blx	r8
 8009046:	3001      	adds	r0, #1
 8009048:	d01e      	beq.n	8009088 <_printf_common+0xa4>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	68e5      	ldr	r5, [r4, #12]
 800904e:	6832      	ldr	r2, [r6, #0]
 8009050:	f003 0306 	and.w	r3, r3, #6
 8009054:	2b04      	cmp	r3, #4
 8009056:	bf08      	it	eq
 8009058:	1aad      	subeq	r5, r5, r2
 800905a:	68a3      	ldr	r3, [r4, #8]
 800905c:	6922      	ldr	r2, [r4, #16]
 800905e:	bf0c      	ite	eq
 8009060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009064:	2500      	movne	r5, #0
 8009066:	4293      	cmp	r3, r2
 8009068:	bfc4      	itt	gt
 800906a:	1a9b      	subgt	r3, r3, r2
 800906c:	18ed      	addgt	r5, r5, r3
 800906e:	2600      	movs	r6, #0
 8009070:	341a      	adds	r4, #26
 8009072:	42b5      	cmp	r5, r6
 8009074:	d11a      	bne.n	80090ac <_printf_common+0xc8>
 8009076:	2000      	movs	r0, #0
 8009078:	e008      	b.n	800908c <_printf_common+0xa8>
 800907a:	2301      	movs	r3, #1
 800907c:	4652      	mov	r2, sl
 800907e:	4649      	mov	r1, r9
 8009080:	4638      	mov	r0, r7
 8009082:	47c0      	blx	r8
 8009084:	3001      	adds	r0, #1
 8009086:	d103      	bne.n	8009090 <_printf_common+0xac>
 8009088:	f04f 30ff 	mov.w	r0, #4294967295
 800908c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009090:	3501      	adds	r5, #1
 8009092:	e7c6      	b.n	8009022 <_printf_common+0x3e>
 8009094:	18e1      	adds	r1, r4, r3
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	2030      	movs	r0, #48	; 0x30
 800909a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800909e:	4422      	add	r2, r4
 80090a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090a8:	3302      	adds	r3, #2
 80090aa:	e7c7      	b.n	800903c <_printf_common+0x58>
 80090ac:	2301      	movs	r3, #1
 80090ae:	4622      	mov	r2, r4
 80090b0:	4649      	mov	r1, r9
 80090b2:	4638      	mov	r0, r7
 80090b4:	47c0      	blx	r8
 80090b6:	3001      	adds	r0, #1
 80090b8:	d0e6      	beq.n	8009088 <_printf_common+0xa4>
 80090ba:	3601      	adds	r6, #1
 80090bc:	e7d9      	b.n	8009072 <_printf_common+0x8e>
	...

080090c0 <_printf_i>:
 80090c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090c4:	460c      	mov	r4, r1
 80090c6:	4691      	mov	r9, r2
 80090c8:	7e27      	ldrb	r7, [r4, #24]
 80090ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80090cc:	2f78      	cmp	r7, #120	; 0x78
 80090ce:	4680      	mov	r8, r0
 80090d0:	469a      	mov	sl, r3
 80090d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090d6:	d807      	bhi.n	80090e8 <_printf_i+0x28>
 80090d8:	2f62      	cmp	r7, #98	; 0x62
 80090da:	d80a      	bhi.n	80090f2 <_printf_i+0x32>
 80090dc:	2f00      	cmp	r7, #0
 80090de:	f000 80d8 	beq.w	8009292 <_printf_i+0x1d2>
 80090e2:	2f58      	cmp	r7, #88	; 0x58
 80090e4:	f000 80a3 	beq.w	800922e <_printf_i+0x16e>
 80090e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090f0:	e03a      	b.n	8009168 <_printf_i+0xa8>
 80090f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090f6:	2b15      	cmp	r3, #21
 80090f8:	d8f6      	bhi.n	80090e8 <_printf_i+0x28>
 80090fa:	a001      	add	r0, pc, #4	; (adr r0, 8009100 <_printf_i+0x40>)
 80090fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009100:	08009159 	.word	0x08009159
 8009104:	0800916d 	.word	0x0800916d
 8009108:	080090e9 	.word	0x080090e9
 800910c:	080090e9 	.word	0x080090e9
 8009110:	080090e9 	.word	0x080090e9
 8009114:	080090e9 	.word	0x080090e9
 8009118:	0800916d 	.word	0x0800916d
 800911c:	080090e9 	.word	0x080090e9
 8009120:	080090e9 	.word	0x080090e9
 8009124:	080090e9 	.word	0x080090e9
 8009128:	080090e9 	.word	0x080090e9
 800912c:	08009279 	.word	0x08009279
 8009130:	0800919d 	.word	0x0800919d
 8009134:	0800925b 	.word	0x0800925b
 8009138:	080090e9 	.word	0x080090e9
 800913c:	080090e9 	.word	0x080090e9
 8009140:	0800929b 	.word	0x0800929b
 8009144:	080090e9 	.word	0x080090e9
 8009148:	0800919d 	.word	0x0800919d
 800914c:	080090e9 	.word	0x080090e9
 8009150:	080090e9 	.word	0x080090e9
 8009154:	08009263 	.word	0x08009263
 8009158:	680b      	ldr	r3, [r1, #0]
 800915a:	1d1a      	adds	r2, r3, #4
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	600a      	str	r2, [r1, #0]
 8009160:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009168:	2301      	movs	r3, #1
 800916a:	e0a3      	b.n	80092b4 <_printf_i+0x1f4>
 800916c:	6825      	ldr	r5, [r4, #0]
 800916e:	6808      	ldr	r0, [r1, #0]
 8009170:	062e      	lsls	r6, r5, #24
 8009172:	f100 0304 	add.w	r3, r0, #4
 8009176:	d50a      	bpl.n	800918e <_printf_i+0xce>
 8009178:	6805      	ldr	r5, [r0, #0]
 800917a:	600b      	str	r3, [r1, #0]
 800917c:	2d00      	cmp	r5, #0
 800917e:	da03      	bge.n	8009188 <_printf_i+0xc8>
 8009180:	232d      	movs	r3, #45	; 0x2d
 8009182:	426d      	negs	r5, r5
 8009184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009188:	485e      	ldr	r0, [pc, #376]	; (8009304 <_printf_i+0x244>)
 800918a:	230a      	movs	r3, #10
 800918c:	e019      	b.n	80091c2 <_printf_i+0x102>
 800918e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009192:	6805      	ldr	r5, [r0, #0]
 8009194:	600b      	str	r3, [r1, #0]
 8009196:	bf18      	it	ne
 8009198:	b22d      	sxthne	r5, r5
 800919a:	e7ef      	b.n	800917c <_printf_i+0xbc>
 800919c:	680b      	ldr	r3, [r1, #0]
 800919e:	6825      	ldr	r5, [r4, #0]
 80091a0:	1d18      	adds	r0, r3, #4
 80091a2:	6008      	str	r0, [r1, #0]
 80091a4:	0628      	lsls	r0, r5, #24
 80091a6:	d501      	bpl.n	80091ac <_printf_i+0xec>
 80091a8:	681d      	ldr	r5, [r3, #0]
 80091aa:	e002      	b.n	80091b2 <_printf_i+0xf2>
 80091ac:	0669      	lsls	r1, r5, #25
 80091ae:	d5fb      	bpl.n	80091a8 <_printf_i+0xe8>
 80091b0:	881d      	ldrh	r5, [r3, #0]
 80091b2:	4854      	ldr	r0, [pc, #336]	; (8009304 <_printf_i+0x244>)
 80091b4:	2f6f      	cmp	r7, #111	; 0x6f
 80091b6:	bf0c      	ite	eq
 80091b8:	2308      	moveq	r3, #8
 80091ba:	230a      	movne	r3, #10
 80091bc:	2100      	movs	r1, #0
 80091be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091c2:	6866      	ldr	r6, [r4, #4]
 80091c4:	60a6      	str	r6, [r4, #8]
 80091c6:	2e00      	cmp	r6, #0
 80091c8:	bfa2      	ittt	ge
 80091ca:	6821      	ldrge	r1, [r4, #0]
 80091cc:	f021 0104 	bicge.w	r1, r1, #4
 80091d0:	6021      	strge	r1, [r4, #0]
 80091d2:	b90d      	cbnz	r5, 80091d8 <_printf_i+0x118>
 80091d4:	2e00      	cmp	r6, #0
 80091d6:	d04d      	beq.n	8009274 <_printf_i+0x1b4>
 80091d8:	4616      	mov	r6, r2
 80091da:	fbb5 f1f3 	udiv	r1, r5, r3
 80091de:	fb03 5711 	mls	r7, r3, r1, r5
 80091e2:	5dc7      	ldrb	r7, [r0, r7]
 80091e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091e8:	462f      	mov	r7, r5
 80091ea:	42bb      	cmp	r3, r7
 80091ec:	460d      	mov	r5, r1
 80091ee:	d9f4      	bls.n	80091da <_printf_i+0x11a>
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	d10b      	bne.n	800920c <_printf_i+0x14c>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	07df      	lsls	r7, r3, #31
 80091f8:	d508      	bpl.n	800920c <_printf_i+0x14c>
 80091fa:	6923      	ldr	r3, [r4, #16]
 80091fc:	6861      	ldr	r1, [r4, #4]
 80091fe:	4299      	cmp	r1, r3
 8009200:	bfde      	ittt	le
 8009202:	2330      	movle	r3, #48	; 0x30
 8009204:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009208:	f106 36ff 	addle.w	r6, r6, #4294967295
 800920c:	1b92      	subs	r2, r2, r6
 800920e:	6122      	str	r2, [r4, #16]
 8009210:	f8cd a000 	str.w	sl, [sp]
 8009214:	464b      	mov	r3, r9
 8009216:	aa03      	add	r2, sp, #12
 8009218:	4621      	mov	r1, r4
 800921a:	4640      	mov	r0, r8
 800921c:	f7ff fee2 	bl	8008fe4 <_printf_common>
 8009220:	3001      	adds	r0, #1
 8009222:	d14c      	bne.n	80092be <_printf_i+0x1fe>
 8009224:	f04f 30ff 	mov.w	r0, #4294967295
 8009228:	b004      	add	sp, #16
 800922a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800922e:	4835      	ldr	r0, [pc, #212]	; (8009304 <_printf_i+0x244>)
 8009230:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009234:	6823      	ldr	r3, [r4, #0]
 8009236:	680e      	ldr	r6, [r1, #0]
 8009238:	061f      	lsls	r7, r3, #24
 800923a:	f856 5b04 	ldr.w	r5, [r6], #4
 800923e:	600e      	str	r6, [r1, #0]
 8009240:	d514      	bpl.n	800926c <_printf_i+0x1ac>
 8009242:	07d9      	lsls	r1, r3, #31
 8009244:	bf44      	itt	mi
 8009246:	f043 0320 	orrmi.w	r3, r3, #32
 800924a:	6023      	strmi	r3, [r4, #0]
 800924c:	b91d      	cbnz	r5, 8009256 <_printf_i+0x196>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	f023 0320 	bic.w	r3, r3, #32
 8009254:	6023      	str	r3, [r4, #0]
 8009256:	2310      	movs	r3, #16
 8009258:	e7b0      	b.n	80091bc <_printf_i+0xfc>
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	f043 0320 	orr.w	r3, r3, #32
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	2378      	movs	r3, #120	; 0x78
 8009264:	4828      	ldr	r0, [pc, #160]	; (8009308 <_printf_i+0x248>)
 8009266:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800926a:	e7e3      	b.n	8009234 <_printf_i+0x174>
 800926c:	065e      	lsls	r6, r3, #25
 800926e:	bf48      	it	mi
 8009270:	b2ad      	uxthmi	r5, r5
 8009272:	e7e6      	b.n	8009242 <_printf_i+0x182>
 8009274:	4616      	mov	r6, r2
 8009276:	e7bb      	b.n	80091f0 <_printf_i+0x130>
 8009278:	680b      	ldr	r3, [r1, #0]
 800927a:	6826      	ldr	r6, [r4, #0]
 800927c:	6960      	ldr	r0, [r4, #20]
 800927e:	1d1d      	adds	r5, r3, #4
 8009280:	600d      	str	r5, [r1, #0]
 8009282:	0635      	lsls	r5, r6, #24
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	d501      	bpl.n	800928c <_printf_i+0x1cc>
 8009288:	6018      	str	r0, [r3, #0]
 800928a:	e002      	b.n	8009292 <_printf_i+0x1d2>
 800928c:	0671      	lsls	r1, r6, #25
 800928e:	d5fb      	bpl.n	8009288 <_printf_i+0x1c8>
 8009290:	8018      	strh	r0, [r3, #0]
 8009292:	2300      	movs	r3, #0
 8009294:	6123      	str	r3, [r4, #16]
 8009296:	4616      	mov	r6, r2
 8009298:	e7ba      	b.n	8009210 <_printf_i+0x150>
 800929a:	680b      	ldr	r3, [r1, #0]
 800929c:	1d1a      	adds	r2, r3, #4
 800929e:	600a      	str	r2, [r1, #0]
 80092a0:	681e      	ldr	r6, [r3, #0]
 80092a2:	6862      	ldr	r2, [r4, #4]
 80092a4:	2100      	movs	r1, #0
 80092a6:	4630      	mov	r0, r6
 80092a8:	f7f6 ffa2 	bl	80001f0 <memchr>
 80092ac:	b108      	cbz	r0, 80092b2 <_printf_i+0x1f2>
 80092ae:	1b80      	subs	r0, r0, r6
 80092b0:	6060      	str	r0, [r4, #4]
 80092b2:	6863      	ldr	r3, [r4, #4]
 80092b4:	6123      	str	r3, [r4, #16]
 80092b6:	2300      	movs	r3, #0
 80092b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092bc:	e7a8      	b.n	8009210 <_printf_i+0x150>
 80092be:	6923      	ldr	r3, [r4, #16]
 80092c0:	4632      	mov	r2, r6
 80092c2:	4649      	mov	r1, r9
 80092c4:	4640      	mov	r0, r8
 80092c6:	47d0      	blx	sl
 80092c8:	3001      	adds	r0, #1
 80092ca:	d0ab      	beq.n	8009224 <_printf_i+0x164>
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	079b      	lsls	r3, r3, #30
 80092d0:	d413      	bmi.n	80092fa <_printf_i+0x23a>
 80092d2:	68e0      	ldr	r0, [r4, #12]
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	4298      	cmp	r0, r3
 80092d8:	bfb8      	it	lt
 80092da:	4618      	movlt	r0, r3
 80092dc:	e7a4      	b.n	8009228 <_printf_i+0x168>
 80092de:	2301      	movs	r3, #1
 80092e0:	4632      	mov	r2, r6
 80092e2:	4649      	mov	r1, r9
 80092e4:	4640      	mov	r0, r8
 80092e6:	47d0      	blx	sl
 80092e8:	3001      	adds	r0, #1
 80092ea:	d09b      	beq.n	8009224 <_printf_i+0x164>
 80092ec:	3501      	adds	r5, #1
 80092ee:	68e3      	ldr	r3, [r4, #12]
 80092f0:	9903      	ldr	r1, [sp, #12]
 80092f2:	1a5b      	subs	r3, r3, r1
 80092f4:	42ab      	cmp	r3, r5
 80092f6:	dcf2      	bgt.n	80092de <_printf_i+0x21e>
 80092f8:	e7eb      	b.n	80092d2 <_printf_i+0x212>
 80092fa:	2500      	movs	r5, #0
 80092fc:	f104 0619 	add.w	r6, r4, #25
 8009300:	e7f5      	b.n	80092ee <_printf_i+0x22e>
 8009302:	bf00      	nop
 8009304:	0800b42e 	.word	0x0800b42e
 8009308:	0800b43f 	.word	0x0800b43f

0800930c <quorem>:
 800930c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	6903      	ldr	r3, [r0, #16]
 8009312:	690c      	ldr	r4, [r1, #16]
 8009314:	42a3      	cmp	r3, r4
 8009316:	4607      	mov	r7, r0
 8009318:	f2c0 8081 	blt.w	800941e <quorem+0x112>
 800931c:	3c01      	subs	r4, #1
 800931e:	f101 0814 	add.w	r8, r1, #20
 8009322:	f100 0514 	add.w	r5, r0, #20
 8009326:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800932a:	9301      	str	r3, [sp, #4]
 800932c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009334:	3301      	adds	r3, #1
 8009336:	429a      	cmp	r2, r3
 8009338:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800933c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009340:	fbb2 f6f3 	udiv	r6, r2, r3
 8009344:	d331      	bcc.n	80093aa <quorem+0x9e>
 8009346:	f04f 0e00 	mov.w	lr, #0
 800934a:	4640      	mov	r0, r8
 800934c:	46ac      	mov	ip, r5
 800934e:	46f2      	mov	sl, lr
 8009350:	f850 2b04 	ldr.w	r2, [r0], #4
 8009354:	b293      	uxth	r3, r2
 8009356:	fb06 e303 	mla	r3, r6, r3, lr
 800935a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800935e:	b29b      	uxth	r3, r3
 8009360:	ebaa 0303 	sub.w	r3, sl, r3
 8009364:	0c12      	lsrs	r2, r2, #16
 8009366:	f8dc a000 	ldr.w	sl, [ip]
 800936a:	fb06 e202 	mla	r2, r6, r2, lr
 800936e:	fa13 f38a 	uxtah	r3, r3, sl
 8009372:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009376:	fa1f fa82 	uxth.w	sl, r2
 800937a:	f8dc 2000 	ldr.w	r2, [ip]
 800937e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009382:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009386:	b29b      	uxth	r3, r3
 8009388:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800938c:	4581      	cmp	r9, r0
 800938e:	f84c 3b04 	str.w	r3, [ip], #4
 8009392:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009396:	d2db      	bcs.n	8009350 <quorem+0x44>
 8009398:	f855 300b 	ldr.w	r3, [r5, fp]
 800939c:	b92b      	cbnz	r3, 80093aa <quorem+0x9e>
 800939e:	9b01      	ldr	r3, [sp, #4]
 80093a0:	3b04      	subs	r3, #4
 80093a2:	429d      	cmp	r5, r3
 80093a4:	461a      	mov	r2, r3
 80093a6:	d32e      	bcc.n	8009406 <quorem+0xfa>
 80093a8:	613c      	str	r4, [r7, #16]
 80093aa:	4638      	mov	r0, r7
 80093ac:	f001 f8c0 	bl	800a530 <__mcmp>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	db24      	blt.n	80093fe <quorem+0xf2>
 80093b4:	3601      	adds	r6, #1
 80093b6:	4628      	mov	r0, r5
 80093b8:	f04f 0c00 	mov.w	ip, #0
 80093bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80093c0:	f8d0 e000 	ldr.w	lr, [r0]
 80093c4:	b293      	uxth	r3, r2
 80093c6:	ebac 0303 	sub.w	r3, ip, r3
 80093ca:	0c12      	lsrs	r2, r2, #16
 80093cc:	fa13 f38e 	uxtah	r3, r3, lr
 80093d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80093d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093d8:	b29b      	uxth	r3, r3
 80093da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093de:	45c1      	cmp	r9, r8
 80093e0:	f840 3b04 	str.w	r3, [r0], #4
 80093e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80093e8:	d2e8      	bcs.n	80093bc <quorem+0xb0>
 80093ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093f2:	b922      	cbnz	r2, 80093fe <quorem+0xf2>
 80093f4:	3b04      	subs	r3, #4
 80093f6:	429d      	cmp	r5, r3
 80093f8:	461a      	mov	r2, r3
 80093fa:	d30a      	bcc.n	8009412 <quorem+0x106>
 80093fc:	613c      	str	r4, [r7, #16]
 80093fe:	4630      	mov	r0, r6
 8009400:	b003      	add	sp, #12
 8009402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009406:	6812      	ldr	r2, [r2, #0]
 8009408:	3b04      	subs	r3, #4
 800940a:	2a00      	cmp	r2, #0
 800940c:	d1cc      	bne.n	80093a8 <quorem+0x9c>
 800940e:	3c01      	subs	r4, #1
 8009410:	e7c7      	b.n	80093a2 <quorem+0x96>
 8009412:	6812      	ldr	r2, [r2, #0]
 8009414:	3b04      	subs	r3, #4
 8009416:	2a00      	cmp	r2, #0
 8009418:	d1f0      	bne.n	80093fc <quorem+0xf0>
 800941a:	3c01      	subs	r4, #1
 800941c:	e7eb      	b.n	80093f6 <quorem+0xea>
 800941e:	2000      	movs	r0, #0
 8009420:	e7ee      	b.n	8009400 <quorem+0xf4>
 8009422:	0000      	movs	r0, r0
 8009424:	0000      	movs	r0, r0
	...

08009428 <_dtoa_r>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	ed2d 8b02 	vpush	{d8}
 8009430:	ec57 6b10 	vmov	r6, r7, d0
 8009434:	b095      	sub	sp, #84	; 0x54
 8009436:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009438:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800943c:	9105      	str	r1, [sp, #20]
 800943e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009442:	4604      	mov	r4, r0
 8009444:	9209      	str	r2, [sp, #36]	; 0x24
 8009446:	930f      	str	r3, [sp, #60]	; 0x3c
 8009448:	b975      	cbnz	r5, 8009468 <_dtoa_r+0x40>
 800944a:	2010      	movs	r0, #16
 800944c:	f000 fddc 	bl	800a008 <malloc>
 8009450:	4602      	mov	r2, r0
 8009452:	6260      	str	r0, [r4, #36]	; 0x24
 8009454:	b920      	cbnz	r0, 8009460 <_dtoa_r+0x38>
 8009456:	4bb2      	ldr	r3, [pc, #712]	; (8009720 <_dtoa_r+0x2f8>)
 8009458:	21ea      	movs	r1, #234	; 0xea
 800945a:	48b2      	ldr	r0, [pc, #712]	; (8009724 <_dtoa_r+0x2fc>)
 800945c:	f001 fa32 	bl	800a8c4 <__assert_func>
 8009460:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009464:	6005      	str	r5, [r0, #0]
 8009466:	60c5      	str	r5, [r0, #12]
 8009468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800946a:	6819      	ldr	r1, [r3, #0]
 800946c:	b151      	cbz	r1, 8009484 <_dtoa_r+0x5c>
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	604a      	str	r2, [r1, #4]
 8009472:	2301      	movs	r3, #1
 8009474:	4093      	lsls	r3, r2
 8009476:	608b      	str	r3, [r1, #8]
 8009478:	4620      	mov	r0, r4
 800947a:	f000 fe1b 	bl	800a0b4 <_Bfree>
 800947e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009480:	2200      	movs	r2, #0
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	1e3b      	subs	r3, r7, #0
 8009486:	bfb9      	ittee	lt
 8009488:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800948c:	9303      	strlt	r3, [sp, #12]
 800948e:	2300      	movge	r3, #0
 8009490:	f8c8 3000 	strge.w	r3, [r8]
 8009494:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009498:	4ba3      	ldr	r3, [pc, #652]	; (8009728 <_dtoa_r+0x300>)
 800949a:	bfbc      	itt	lt
 800949c:	2201      	movlt	r2, #1
 800949e:	f8c8 2000 	strlt.w	r2, [r8]
 80094a2:	ea33 0309 	bics.w	r3, r3, r9
 80094a6:	d11b      	bne.n	80094e0 <_dtoa_r+0xb8>
 80094a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80094ae:	6013      	str	r3, [r2, #0]
 80094b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094b4:	4333      	orrs	r3, r6
 80094b6:	f000 857a 	beq.w	8009fae <_dtoa_r+0xb86>
 80094ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094bc:	b963      	cbnz	r3, 80094d8 <_dtoa_r+0xb0>
 80094be:	4b9b      	ldr	r3, [pc, #620]	; (800972c <_dtoa_r+0x304>)
 80094c0:	e024      	b.n	800950c <_dtoa_r+0xe4>
 80094c2:	4b9b      	ldr	r3, [pc, #620]	; (8009730 <_dtoa_r+0x308>)
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	3308      	adds	r3, #8
 80094c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	9800      	ldr	r0, [sp, #0]
 80094ce:	b015      	add	sp, #84	; 0x54
 80094d0:	ecbd 8b02 	vpop	{d8}
 80094d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d8:	4b94      	ldr	r3, [pc, #592]	; (800972c <_dtoa_r+0x304>)
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	3303      	adds	r3, #3
 80094de:	e7f3      	b.n	80094c8 <_dtoa_r+0xa0>
 80094e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094e4:	2200      	movs	r2, #0
 80094e6:	ec51 0b17 	vmov	r0, r1, d7
 80094ea:	2300      	movs	r3, #0
 80094ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80094f0:	f7f7 faf2 	bl	8000ad8 <__aeabi_dcmpeq>
 80094f4:	4680      	mov	r8, r0
 80094f6:	b158      	cbz	r0, 8009510 <_dtoa_r+0xe8>
 80094f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094fa:	2301      	movs	r3, #1
 80094fc:	6013      	str	r3, [r2, #0]
 80094fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 8551 	beq.w	8009fa8 <_dtoa_r+0xb80>
 8009506:	488b      	ldr	r0, [pc, #556]	; (8009734 <_dtoa_r+0x30c>)
 8009508:	6018      	str	r0, [r3, #0]
 800950a:	1e43      	subs	r3, r0, #1
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	e7dd      	b.n	80094cc <_dtoa_r+0xa4>
 8009510:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009514:	aa12      	add	r2, sp, #72	; 0x48
 8009516:	a913      	add	r1, sp, #76	; 0x4c
 8009518:	4620      	mov	r0, r4
 800951a:	f001 f8ad 	bl	800a678 <__d2b>
 800951e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009522:	4683      	mov	fp, r0
 8009524:	2d00      	cmp	r5, #0
 8009526:	d07c      	beq.n	8009622 <_dtoa_r+0x1fa>
 8009528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800952a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800952e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009532:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009536:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800953a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800953e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009542:	4b7d      	ldr	r3, [pc, #500]	; (8009738 <_dtoa_r+0x310>)
 8009544:	2200      	movs	r2, #0
 8009546:	4630      	mov	r0, r6
 8009548:	4639      	mov	r1, r7
 800954a:	f7f6 fea5 	bl	8000298 <__aeabi_dsub>
 800954e:	a36e      	add	r3, pc, #440	; (adr r3, 8009708 <_dtoa_r+0x2e0>)
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	f7f7 f858 	bl	8000608 <__aeabi_dmul>
 8009558:	a36d      	add	r3, pc, #436	; (adr r3, 8009710 <_dtoa_r+0x2e8>)
 800955a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955e:	f7f6 fe9d 	bl	800029c <__adddf3>
 8009562:	4606      	mov	r6, r0
 8009564:	4628      	mov	r0, r5
 8009566:	460f      	mov	r7, r1
 8009568:	f7f6 ffe4 	bl	8000534 <__aeabi_i2d>
 800956c:	a36a      	add	r3, pc, #424	; (adr r3, 8009718 <_dtoa_r+0x2f0>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	f7f7 f849 	bl	8000608 <__aeabi_dmul>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4630      	mov	r0, r6
 800957c:	4639      	mov	r1, r7
 800957e:	f7f6 fe8d 	bl	800029c <__adddf3>
 8009582:	4606      	mov	r6, r0
 8009584:	460f      	mov	r7, r1
 8009586:	f7f7 faef 	bl	8000b68 <__aeabi_d2iz>
 800958a:	2200      	movs	r2, #0
 800958c:	4682      	mov	sl, r0
 800958e:	2300      	movs	r3, #0
 8009590:	4630      	mov	r0, r6
 8009592:	4639      	mov	r1, r7
 8009594:	f7f7 faaa 	bl	8000aec <__aeabi_dcmplt>
 8009598:	b148      	cbz	r0, 80095ae <_dtoa_r+0x186>
 800959a:	4650      	mov	r0, sl
 800959c:	f7f6 ffca 	bl	8000534 <__aeabi_i2d>
 80095a0:	4632      	mov	r2, r6
 80095a2:	463b      	mov	r3, r7
 80095a4:	f7f7 fa98 	bl	8000ad8 <__aeabi_dcmpeq>
 80095a8:	b908      	cbnz	r0, 80095ae <_dtoa_r+0x186>
 80095aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095ae:	f1ba 0f16 	cmp.w	sl, #22
 80095b2:	d854      	bhi.n	800965e <_dtoa_r+0x236>
 80095b4:	4b61      	ldr	r3, [pc, #388]	; (800973c <_dtoa_r+0x314>)
 80095b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80095c2:	f7f7 fa93 	bl	8000aec <__aeabi_dcmplt>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	d04b      	beq.n	8009662 <_dtoa_r+0x23a>
 80095ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095ce:	2300      	movs	r3, #0
 80095d0:	930e      	str	r3, [sp, #56]	; 0x38
 80095d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095d4:	1b5d      	subs	r5, r3, r5
 80095d6:	1e6b      	subs	r3, r5, #1
 80095d8:	9304      	str	r3, [sp, #16]
 80095da:	bf43      	ittte	mi
 80095dc:	2300      	movmi	r3, #0
 80095de:	f1c5 0801 	rsbmi	r8, r5, #1
 80095e2:	9304      	strmi	r3, [sp, #16]
 80095e4:	f04f 0800 	movpl.w	r8, #0
 80095e8:	f1ba 0f00 	cmp.w	sl, #0
 80095ec:	db3b      	blt.n	8009666 <_dtoa_r+0x23e>
 80095ee:	9b04      	ldr	r3, [sp, #16]
 80095f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80095f4:	4453      	add	r3, sl
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	2300      	movs	r3, #0
 80095fa:	9306      	str	r3, [sp, #24]
 80095fc:	9b05      	ldr	r3, [sp, #20]
 80095fe:	2b09      	cmp	r3, #9
 8009600:	d869      	bhi.n	80096d6 <_dtoa_r+0x2ae>
 8009602:	2b05      	cmp	r3, #5
 8009604:	bfc4      	itt	gt
 8009606:	3b04      	subgt	r3, #4
 8009608:	9305      	strgt	r3, [sp, #20]
 800960a:	9b05      	ldr	r3, [sp, #20]
 800960c:	f1a3 0302 	sub.w	r3, r3, #2
 8009610:	bfcc      	ite	gt
 8009612:	2500      	movgt	r5, #0
 8009614:	2501      	movle	r5, #1
 8009616:	2b03      	cmp	r3, #3
 8009618:	d869      	bhi.n	80096ee <_dtoa_r+0x2c6>
 800961a:	e8df f003 	tbb	[pc, r3]
 800961e:	4e2c      	.short	0x4e2c
 8009620:	5a4c      	.short	0x5a4c
 8009622:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009626:	441d      	add	r5, r3
 8009628:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800962c:	2b20      	cmp	r3, #32
 800962e:	bfc1      	itttt	gt
 8009630:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009634:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009638:	fa09 f303 	lslgt.w	r3, r9, r3
 800963c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009640:	bfda      	itte	le
 8009642:	f1c3 0320 	rsble	r3, r3, #32
 8009646:	fa06 f003 	lslle.w	r0, r6, r3
 800964a:	4318      	orrgt	r0, r3
 800964c:	f7f6 ff62 	bl	8000514 <__aeabi_ui2d>
 8009650:	2301      	movs	r3, #1
 8009652:	4606      	mov	r6, r0
 8009654:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009658:	3d01      	subs	r5, #1
 800965a:	9310      	str	r3, [sp, #64]	; 0x40
 800965c:	e771      	b.n	8009542 <_dtoa_r+0x11a>
 800965e:	2301      	movs	r3, #1
 8009660:	e7b6      	b.n	80095d0 <_dtoa_r+0x1a8>
 8009662:	900e      	str	r0, [sp, #56]	; 0x38
 8009664:	e7b5      	b.n	80095d2 <_dtoa_r+0x1aa>
 8009666:	f1ca 0300 	rsb	r3, sl, #0
 800966a:	9306      	str	r3, [sp, #24]
 800966c:	2300      	movs	r3, #0
 800966e:	eba8 080a 	sub.w	r8, r8, sl
 8009672:	930d      	str	r3, [sp, #52]	; 0x34
 8009674:	e7c2      	b.n	80095fc <_dtoa_r+0x1d4>
 8009676:	2300      	movs	r3, #0
 8009678:	9308      	str	r3, [sp, #32]
 800967a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800967c:	2b00      	cmp	r3, #0
 800967e:	dc39      	bgt.n	80096f4 <_dtoa_r+0x2cc>
 8009680:	f04f 0901 	mov.w	r9, #1
 8009684:	f8cd 9004 	str.w	r9, [sp, #4]
 8009688:	464b      	mov	r3, r9
 800968a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800968e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009690:	2200      	movs	r2, #0
 8009692:	6042      	str	r2, [r0, #4]
 8009694:	2204      	movs	r2, #4
 8009696:	f102 0614 	add.w	r6, r2, #20
 800969a:	429e      	cmp	r6, r3
 800969c:	6841      	ldr	r1, [r0, #4]
 800969e:	d92f      	bls.n	8009700 <_dtoa_r+0x2d8>
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 fcc7 	bl	800a034 <_Balloc>
 80096a6:	9000      	str	r0, [sp, #0]
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d14b      	bne.n	8009744 <_dtoa_r+0x31c>
 80096ac:	4b24      	ldr	r3, [pc, #144]	; (8009740 <_dtoa_r+0x318>)
 80096ae:	4602      	mov	r2, r0
 80096b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80096b4:	e6d1      	b.n	800945a <_dtoa_r+0x32>
 80096b6:	2301      	movs	r3, #1
 80096b8:	e7de      	b.n	8009678 <_dtoa_r+0x250>
 80096ba:	2300      	movs	r3, #0
 80096bc:	9308      	str	r3, [sp, #32]
 80096be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c0:	eb0a 0903 	add.w	r9, sl, r3
 80096c4:	f109 0301 	add.w	r3, r9, #1
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	9301      	str	r3, [sp, #4]
 80096cc:	bfb8      	it	lt
 80096ce:	2301      	movlt	r3, #1
 80096d0:	e7dd      	b.n	800968e <_dtoa_r+0x266>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e7f2      	b.n	80096bc <_dtoa_r+0x294>
 80096d6:	2501      	movs	r5, #1
 80096d8:	2300      	movs	r3, #0
 80096da:	9305      	str	r3, [sp, #20]
 80096dc:	9508      	str	r5, [sp, #32]
 80096de:	f04f 39ff 	mov.w	r9, #4294967295
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80096e8:	2312      	movs	r3, #18
 80096ea:	9209      	str	r2, [sp, #36]	; 0x24
 80096ec:	e7cf      	b.n	800968e <_dtoa_r+0x266>
 80096ee:	2301      	movs	r3, #1
 80096f0:	9308      	str	r3, [sp, #32]
 80096f2:	e7f4      	b.n	80096de <_dtoa_r+0x2b6>
 80096f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80096f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80096fc:	464b      	mov	r3, r9
 80096fe:	e7c6      	b.n	800968e <_dtoa_r+0x266>
 8009700:	3101      	adds	r1, #1
 8009702:	6041      	str	r1, [r0, #4]
 8009704:	0052      	lsls	r2, r2, #1
 8009706:	e7c6      	b.n	8009696 <_dtoa_r+0x26e>
 8009708:	636f4361 	.word	0x636f4361
 800970c:	3fd287a7 	.word	0x3fd287a7
 8009710:	8b60c8b3 	.word	0x8b60c8b3
 8009714:	3fc68a28 	.word	0x3fc68a28
 8009718:	509f79fb 	.word	0x509f79fb
 800971c:	3fd34413 	.word	0x3fd34413
 8009720:	0800b45d 	.word	0x0800b45d
 8009724:	0800b474 	.word	0x0800b474
 8009728:	7ff00000 	.word	0x7ff00000
 800972c:	0800b459 	.word	0x0800b459
 8009730:	0800b450 	.word	0x0800b450
 8009734:	0800b42d 	.word	0x0800b42d
 8009738:	3ff80000 	.word	0x3ff80000
 800973c:	0800b570 	.word	0x0800b570
 8009740:	0800b4d3 	.word	0x0800b4d3
 8009744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009746:	9a00      	ldr	r2, [sp, #0]
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	9b01      	ldr	r3, [sp, #4]
 800974c:	2b0e      	cmp	r3, #14
 800974e:	f200 80ad 	bhi.w	80098ac <_dtoa_r+0x484>
 8009752:	2d00      	cmp	r5, #0
 8009754:	f000 80aa 	beq.w	80098ac <_dtoa_r+0x484>
 8009758:	f1ba 0f00 	cmp.w	sl, #0
 800975c:	dd36      	ble.n	80097cc <_dtoa_r+0x3a4>
 800975e:	4ac3      	ldr	r2, [pc, #780]	; (8009a6c <_dtoa_r+0x644>)
 8009760:	f00a 030f 	and.w	r3, sl, #15
 8009764:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009768:	ed93 7b00 	vldr	d7, [r3]
 800976c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009770:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009774:	eeb0 8a47 	vmov.f32	s16, s14
 8009778:	eef0 8a67 	vmov.f32	s17, s15
 800977c:	d016      	beq.n	80097ac <_dtoa_r+0x384>
 800977e:	4bbc      	ldr	r3, [pc, #752]	; (8009a70 <_dtoa_r+0x648>)
 8009780:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009784:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009788:	f7f7 f868 	bl	800085c <__aeabi_ddiv>
 800978c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009790:	f007 070f 	and.w	r7, r7, #15
 8009794:	2503      	movs	r5, #3
 8009796:	4eb6      	ldr	r6, [pc, #728]	; (8009a70 <_dtoa_r+0x648>)
 8009798:	b957      	cbnz	r7, 80097b0 <_dtoa_r+0x388>
 800979a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979e:	ec53 2b18 	vmov	r2, r3, d8
 80097a2:	f7f7 f85b 	bl	800085c <__aeabi_ddiv>
 80097a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097aa:	e029      	b.n	8009800 <_dtoa_r+0x3d8>
 80097ac:	2502      	movs	r5, #2
 80097ae:	e7f2      	b.n	8009796 <_dtoa_r+0x36e>
 80097b0:	07f9      	lsls	r1, r7, #31
 80097b2:	d508      	bpl.n	80097c6 <_dtoa_r+0x39e>
 80097b4:	ec51 0b18 	vmov	r0, r1, d8
 80097b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097bc:	f7f6 ff24 	bl	8000608 <__aeabi_dmul>
 80097c0:	ec41 0b18 	vmov	d8, r0, r1
 80097c4:	3501      	adds	r5, #1
 80097c6:	107f      	asrs	r7, r7, #1
 80097c8:	3608      	adds	r6, #8
 80097ca:	e7e5      	b.n	8009798 <_dtoa_r+0x370>
 80097cc:	f000 80a6 	beq.w	800991c <_dtoa_r+0x4f4>
 80097d0:	f1ca 0600 	rsb	r6, sl, #0
 80097d4:	4ba5      	ldr	r3, [pc, #660]	; (8009a6c <_dtoa_r+0x644>)
 80097d6:	4fa6      	ldr	r7, [pc, #664]	; (8009a70 <_dtoa_r+0x648>)
 80097d8:	f006 020f 	and.w	r2, r6, #15
 80097dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80097e8:	f7f6 ff0e 	bl	8000608 <__aeabi_dmul>
 80097ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097f0:	1136      	asrs	r6, r6, #4
 80097f2:	2300      	movs	r3, #0
 80097f4:	2502      	movs	r5, #2
 80097f6:	2e00      	cmp	r6, #0
 80097f8:	f040 8085 	bne.w	8009906 <_dtoa_r+0x4de>
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1d2      	bne.n	80097a6 <_dtoa_r+0x37e>
 8009800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 808c 	beq.w	8009920 <_dtoa_r+0x4f8>
 8009808:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800980c:	4b99      	ldr	r3, [pc, #612]	; (8009a74 <_dtoa_r+0x64c>)
 800980e:	2200      	movs	r2, #0
 8009810:	4630      	mov	r0, r6
 8009812:	4639      	mov	r1, r7
 8009814:	f7f7 f96a 	bl	8000aec <__aeabi_dcmplt>
 8009818:	2800      	cmp	r0, #0
 800981a:	f000 8081 	beq.w	8009920 <_dtoa_r+0x4f8>
 800981e:	9b01      	ldr	r3, [sp, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d07d      	beq.n	8009920 <_dtoa_r+0x4f8>
 8009824:	f1b9 0f00 	cmp.w	r9, #0
 8009828:	dd3c      	ble.n	80098a4 <_dtoa_r+0x47c>
 800982a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800982e:	9307      	str	r3, [sp, #28]
 8009830:	2200      	movs	r2, #0
 8009832:	4b91      	ldr	r3, [pc, #580]	; (8009a78 <_dtoa_r+0x650>)
 8009834:	4630      	mov	r0, r6
 8009836:	4639      	mov	r1, r7
 8009838:	f7f6 fee6 	bl	8000608 <__aeabi_dmul>
 800983c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009840:	3501      	adds	r5, #1
 8009842:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009846:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800984a:	4628      	mov	r0, r5
 800984c:	f7f6 fe72 	bl	8000534 <__aeabi_i2d>
 8009850:	4632      	mov	r2, r6
 8009852:	463b      	mov	r3, r7
 8009854:	f7f6 fed8 	bl	8000608 <__aeabi_dmul>
 8009858:	4b88      	ldr	r3, [pc, #544]	; (8009a7c <_dtoa_r+0x654>)
 800985a:	2200      	movs	r2, #0
 800985c:	f7f6 fd1e 	bl	800029c <__adddf3>
 8009860:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009868:	9303      	str	r3, [sp, #12]
 800986a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800986c:	2b00      	cmp	r3, #0
 800986e:	d15c      	bne.n	800992a <_dtoa_r+0x502>
 8009870:	4b83      	ldr	r3, [pc, #524]	; (8009a80 <_dtoa_r+0x658>)
 8009872:	2200      	movs	r2, #0
 8009874:	4630      	mov	r0, r6
 8009876:	4639      	mov	r1, r7
 8009878:	f7f6 fd0e 	bl	8000298 <__aeabi_dsub>
 800987c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009880:	4606      	mov	r6, r0
 8009882:	460f      	mov	r7, r1
 8009884:	f7f7 f950 	bl	8000b28 <__aeabi_dcmpgt>
 8009888:	2800      	cmp	r0, #0
 800988a:	f040 8296 	bne.w	8009dba <_dtoa_r+0x992>
 800988e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009892:	4630      	mov	r0, r6
 8009894:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009898:	4639      	mov	r1, r7
 800989a:	f7f7 f927 	bl	8000aec <__aeabi_dcmplt>
 800989e:	2800      	cmp	r0, #0
 80098a0:	f040 8288 	bne.w	8009db4 <_dtoa_r+0x98c>
 80098a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80098a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f2c0 8158 	blt.w	8009b64 <_dtoa_r+0x73c>
 80098b4:	f1ba 0f0e 	cmp.w	sl, #14
 80098b8:	f300 8154 	bgt.w	8009b64 <_dtoa_r+0x73c>
 80098bc:	4b6b      	ldr	r3, [pc, #428]	; (8009a6c <_dtoa_r+0x644>)
 80098be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80098c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f280 80e3 	bge.w	8009a94 <_dtoa_r+0x66c>
 80098ce:	9b01      	ldr	r3, [sp, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f300 80df 	bgt.w	8009a94 <_dtoa_r+0x66c>
 80098d6:	f040 826d 	bne.w	8009db4 <_dtoa_r+0x98c>
 80098da:	4b69      	ldr	r3, [pc, #420]	; (8009a80 <_dtoa_r+0x658>)
 80098dc:	2200      	movs	r2, #0
 80098de:	4640      	mov	r0, r8
 80098e0:	4649      	mov	r1, r9
 80098e2:	f7f6 fe91 	bl	8000608 <__aeabi_dmul>
 80098e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098ea:	f7f7 f913 	bl	8000b14 <__aeabi_dcmpge>
 80098ee:	9e01      	ldr	r6, [sp, #4]
 80098f0:	4637      	mov	r7, r6
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f040 8243 	bne.w	8009d7e <_dtoa_r+0x956>
 80098f8:	9d00      	ldr	r5, [sp, #0]
 80098fa:	2331      	movs	r3, #49	; 0x31
 80098fc:	f805 3b01 	strb.w	r3, [r5], #1
 8009900:	f10a 0a01 	add.w	sl, sl, #1
 8009904:	e23f      	b.n	8009d86 <_dtoa_r+0x95e>
 8009906:	07f2      	lsls	r2, r6, #31
 8009908:	d505      	bpl.n	8009916 <_dtoa_r+0x4ee>
 800990a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800990e:	f7f6 fe7b 	bl	8000608 <__aeabi_dmul>
 8009912:	3501      	adds	r5, #1
 8009914:	2301      	movs	r3, #1
 8009916:	1076      	asrs	r6, r6, #1
 8009918:	3708      	adds	r7, #8
 800991a:	e76c      	b.n	80097f6 <_dtoa_r+0x3ce>
 800991c:	2502      	movs	r5, #2
 800991e:	e76f      	b.n	8009800 <_dtoa_r+0x3d8>
 8009920:	9b01      	ldr	r3, [sp, #4]
 8009922:	f8cd a01c 	str.w	sl, [sp, #28]
 8009926:	930c      	str	r3, [sp, #48]	; 0x30
 8009928:	e78d      	b.n	8009846 <_dtoa_r+0x41e>
 800992a:	9900      	ldr	r1, [sp, #0]
 800992c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800992e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009930:	4b4e      	ldr	r3, [pc, #312]	; (8009a6c <_dtoa_r+0x644>)
 8009932:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009936:	4401      	add	r1, r0
 8009938:	9102      	str	r1, [sp, #8]
 800993a:	9908      	ldr	r1, [sp, #32]
 800993c:	eeb0 8a47 	vmov.f32	s16, s14
 8009940:	eef0 8a67 	vmov.f32	s17, s15
 8009944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009948:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800994c:	2900      	cmp	r1, #0
 800994e:	d045      	beq.n	80099dc <_dtoa_r+0x5b4>
 8009950:	494c      	ldr	r1, [pc, #304]	; (8009a84 <_dtoa_r+0x65c>)
 8009952:	2000      	movs	r0, #0
 8009954:	f7f6 ff82 	bl	800085c <__aeabi_ddiv>
 8009958:	ec53 2b18 	vmov	r2, r3, d8
 800995c:	f7f6 fc9c 	bl	8000298 <__aeabi_dsub>
 8009960:	9d00      	ldr	r5, [sp, #0]
 8009962:	ec41 0b18 	vmov	d8, r0, r1
 8009966:	4639      	mov	r1, r7
 8009968:	4630      	mov	r0, r6
 800996a:	f7f7 f8fd 	bl	8000b68 <__aeabi_d2iz>
 800996e:	900c      	str	r0, [sp, #48]	; 0x30
 8009970:	f7f6 fde0 	bl	8000534 <__aeabi_i2d>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	f7f6 fc8c 	bl	8000298 <__aeabi_dsub>
 8009980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009982:	3330      	adds	r3, #48	; 0x30
 8009984:	f805 3b01 	strb.w	r3, [r5], #1
 8009988:	ec53 2b18 	vmov	r2, r3, d8
 800998c:	4606      	mov	r6, r0
 800998e:	460f      	mov	r7, r1
 8009990:	f7f7 f8ac 	bl	8000aec <__aeabi_dcmplt>
 8009994:	2800      	cmp	r0, #0
 8009996:	d165      	bne.n	8009a64 <_dtoa_r+0x63c>
 8009998:	4632      	mov	r2, r6
 800999a:	463b      	mov	r3, r7
 800999c:	4935      	ldr	r1, [pc, #212]	; (8009a74 <_dtoa_r+0x64c>)
 800999e:	2000      	movs	r0, #0
 80099a0:	f7f6 fc7a 	bl	8000298 <__aeabi_dsub>
 80099a4:	ec53 2b18 	vmov	r2, r3, d8
 80099a8:	f7f7 f8a0 	bl	8000aec <__aeabi_dcmplt>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	f040 80b9 	bne.w	8009b24 <_dtoa_r+0x6fc>
 80099b2:	9b02      	ldr	r3, [sp, #8]
 80099b4:	429d      	cmp	r5, r3
 80099b6:	f43f af75 	beq.w	80098a4 <_dtoa_r+0x47c>
 80099ba:	4b2f      	ldr	r3, [pc, #188]	; (8009a78 <_dtoa_r+0x650>)
 80099bc:	ec51 0b18 	vmov	r0, r1, d8
 80099c0:	2200      	movs	r2, #0
 80099c2:	f7f6 fe21 	bl	8000608 <__aeabi_dmul>
 80099c6:	4b2c      	ldr	r3, [pc, #176]	; (8009a78 <_dtoa_r+0x650>)
 80099c8:	ec41 0b18 	vmov	d8, r0, r1
 80099cc:	2200      	movs	r2, #0
 80099ce:	4630      	mov	r0, r6
 80099d0:	4639      	mov	r1, r7
 80099d2:	f7f6 fe19 	bl	8000608 <__aeabi_dmul>
 80099d6:	4606      	mov	r6, r0
 80099d8:	460f      	mov	r7, r1
 80099da:	e7c4      	b.n	8009966 <_dtoa_r+0x53e>
 80099dc:	ec51 0b17 	vmov	r0, r1, d7
 80099e0:	f7f6 fe12 	bl	8000608 <__aeabi_dmul>
 80099e4:	9b02      	ldr	r3, [sp, #8]
 80099e6:	9d00      	ldr	r5, [sp, #0]
 80099e8:	930c      	str	r3, [sp, #48]	; 0x30
 80099ea:	ec41 0b18 	vmov	d8, r0, r1
 80099ee:	4639      	mov	r1, r7
 80099f0:	4630      	mov	r0, r6
 80099f2:	f7f7 f8b9 	bl	8000b68 <__aeabi_d2iz>
 80099f6:	9011      	str	r0, [sp, #68]	; 0x44
 80099f8:	f7f6 fd9c 	bl	8000534 <__aeabi_i2d>
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	4630      	mov	r0, r6
 8009a02:	4639      	mov	r1, r7
 8009a04:	f7f6 fc48 	bl	8000298 <__aeabi_dsub>
 8009a08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a0a:	3330      	adds	r3, #48	; 0x30
 8009a0c:	f805 3b01 	strb.w	r3, [r5], #1
 8009a10:	9b02      	ldr	r3, [sp, #8]
 8009a12:	429d      	cmp	r5, r3
 8009a14:	4606      	mov	r6, r0
 8009a16:	460f      	mov	r7, r1
 8009a18:	f04f 0200 	mov.w	r2, #0
 8009a1c:	d134      	bne.n	8009a88 <_dtoa_r+0x660>
 8009a1e:	4b19      	ldr	r3, [pc, #100]	; (8009a84 <_dtoa_r+0x65c>)
 8009a20:	ec51 0b18 	vmov	r0, r1, d8
 8009a24:	f7f6 fc3a 	bl	800029c <__adddf3>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	4639      	mov	r1, r7
 8009a30:	f7f7 f87a 	bl	8000b28 <__aeabi_dcmpgt>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d175      	bne.n	8009b24 <_dtoa_r+0x6fc>
 8009a38:	ec53 2b18 	vmov	r2, r3, d8
 8009a3c:	4911      	ldr	r1, [pc, #68]	; (8009a84 <_dtoa_r+0x65c>)
 8009a3e:	2000      	movs	r0, #0
 8009a40:	f7f6 fc2a 	bl	8000298 <__aeabi_dsub>
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	4630      	mov	r0, r6
 8009a4a:	4639      	mov	r1, r7
 8009a4c:	f7f7 f84e 	bl	8000aec <__aeabi_dcmplt>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	f43f af27 	beq.w	80098a4 <_dtoa_r+0x47c>
 8009a56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a58:	1e6b      	subs	r3, r5, #1
 8009a5a:	930c      	str	r3, [sp, #48]	; 0x30
 8009a5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a60:	2b30      	cmp	r3, #48	; 0x30
 8009a62:	d0f8      	beq.n	8009a56 <_dtoa_r+0x62e>
 8009a64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009a68:	e04a      	b.n	8009b00 <_dtoa_r+0x6d8>
 8009a6a:	bf00      	nop
 8009a6c:	0800b570 	.word	0x0800b570
 8009a70:	0800b548 	.word	0x0800b548
 8009a74:	3ff00000 	.word	0x3ff00000
 8009a78:	40240000 	.word	0x40240000
 8009a7c:	401c0000 	.word	0x401c0000
 8009a80:	40140000 	.word	0x40140000
 8009a84:	3fe00000 	.word	0x3fe00000
 8009a88:	4baf      	ldr	r3, [pc, #700]	; (8009d48 <_dtoa_r+0x920>)
 8009a8a:	f7f6 fdbd 	bl	8000608 <__aeabi_dmul>
 8009a8e:	4606      	mov	r6, r0
 8009a90:	460f      	mov	r7, r1
 8009a92:	e7ac      	b.n	80099ee <_dtoa_r+0x5c6>
 8009a94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a98:	9d00      	ldr	r5, [sp, #0]
 8009a9a:	4642      	mov	r2, r8
 8009a9c:	464b      	mov	r3, r9
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	4639      	mov	r1, r7
 8009aa2:	f7f6 fedb 	bl	800085c <__aeabi_ddiv>
 8009aa6:	f7f7 f85f 	bl	8000b68 <__aeabi_d2iz>
 8009aaa:	9002      	str	r0, [sp, #8]
 8009aac:	f7f6 fd42 	bl	8000534 <__aeabi_i2d>
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	464b      	mov	r3, r9
 8009ab4:	f7f6 fda8 	bl	8000608 <__aeabi_dmul>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	4630      	mov	r0, r6
 8009abe:	4639      	mov	r1, r7
 8009ac0:	f7f6 fbea 	bl	8000298 <__aeabi_dsub>
 8009ac4:	9e02      	ldr	r6, [sp, #8]
 8009ac6:	9f01      	ldr	r7, [sp, #4]
 8009ac8:	3630      	adds	r6, #48	; 0x30
 8009aca:	f805 6b01 	strb.w	r6, [r5], #1
 8009ace:	9e00      	ldr	r6, [sp, #0]
 8009ad0:	1bae      	subs	r6, r5, r6
 8009ad2:	42b7      	cmp	r7, r6
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	d137      	bne.n	8009b4a <_dtoa_r+0x722>
 8009ada:	f7f6 fbdf 	bl	800029c <__adddf3>
 8009ade:	4642      	mov	r2, r8
 8009ae0:	464b      	mov	r3, r9
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	460f      	mov	r7, r1
 8009ae6:	f7f7 f81f 	bl	8000b28 <__aeabi_dcmpgt>
 8009aea:	b9c8      	cbnz	r0, 8009b20 <_dtoa_r+0x6f8>
 8009aec:	4642      	mov	r2, r8
 8009aee:	464b      	mov	r3, r9
 8009af0:	4630      	mov	r0, r6
 8009af2:	4639      	mov	r1, r7
 8009af4:	f7f6 fff0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009af8:	b110      	cbz	r0, 8009b00 <_dtoa_r+0x6d8>
 8009afa:	9b02      	ldr	r3, [sp, #8]
 8009afc:	07d9      	lsls	r1, r3, #31
 8009afe:	d40f      	bmi.n	8009b20 <_dtoa_r+0x6f8>
 8009b00:	4620      	mov	r0, r4
 8009b02:	4659      	mov	r1, fp
 8009b04:	f000 fad6 	bl	800a0b4 <_Bfree>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	702b      	strb	r3, [r5, #0]
 8009b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b0e:	f10a 0001 	add.w	r0, sl, #1
 8009b12:	6018      	str	r0, [r3, #0]
 8009b14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f43f acd8 	beq.w	80094cc <_dtoa_r+0xa4>
 8009b1c:	601d      	str	r5, [r3, #0]
 8009b1e:	e4d5      	b.n	80094cc <_dtoa_r+0xa4>
 8009b20:	f8cd a01c 	str.w	sl, [sp, #28]
 8009b24:	462b      	mov	r3, r5
 8009b26:	461d      	mov	r5, r3
 8009b28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b2c:	2a39      	cmp	r2, #57	; 0x39
 8009b2e:	d108      	bne.n	8009b42 <_dtoa_r+0x71a>
 8009b30:	9a00      	ldr	r2, [sp, #0]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d1f7      	bne.n	8009b26 <_dtoa_r+0x6fe>
 8009b36:	9a07      	ldr	r2, [sp, #28]
 8009b38:	9900      	ldr	r1, [sp, #0]
 8009b3a:	3201      	adds	r2, #1
 8009b3c:	9207      	str	r2, [sp, #28]
 8009b3e:	2230      	movs	r2, #48	; 0x30
 8009b40:	700a      	strb	r2, [r1, #0]
 8009b42:	781a      	ldrb	r2, [r3, #0]
 8009b44:	3201      	adds	r2, #1
 8009b46:	701a      	strb	r2, [r3, #0]
 8009b48:	e78c      	b.n	8009a64 <_dtoa_r+0x63c>
 8009b4a:	4b7f      	ldr	r3, [pc, #508]	; (8009d48 <_dtoa_r+0x920>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f7f6 fd5b 	bl	8000608 <__aeabi_dmul>
 8009b52:	2200      	movs	r2, #0
 8009b54:	2300      	movs	r3, #0
 8009b56:	4606      	mov	r6, r0
 8009b58:	460f      	mov	r7, r1
 8009b5a:	f7f6 ffbd 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d09b      	beq.n	8009a9a <_dtoa_r+0x672>
 8009b62:	e7cd      	b.n	8009b00 <_dtoa_r+0x6d8>
 8009b64:	9a08      	ldr	r2, [sp, #32]
 8009b66:	2a00      	cmp	r2, #0
 8009b68:	f000 80c4 	beq.w	8009cf4 <_dtoa_r+0x8cc>
 8009b6c:	9a05      	ldr	r2, [sp, #20]
 8009b6e:	2a01      	cmp	r2, #1
 8009b70:	f300 80a8 	bgt.w	8009cc4 <_dtoa_r+0x89c>
 8009b74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b76:	2a00      	cmp	r2, #0
 8009b78:	f000 80a0 	beq.w	8009cbc <_dtoa_r+0x894>
 8009b7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b80:	9e06      	ldr	r6, [sp, #24]
 8009b82:	4645      	mov	r5, r8
 8009b84:	9a04      	ldr	r2, [sp, #16]
 8009b86:	2101      	movs	r1, #1
 8009b88:	441a      	add	r2, r3
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	4498      	add	r8, r3
 8009b8e:	9204      	str	r2, [sp, #16]
 8009b90:	f000 fb4c 	bl	800a22c <__i2b>
 8009b94:	4607      	mov	r7, r0
 8009b96:	2d00      	cmp	r5, #0
 8009b98:	dd0b      	ble.n	8009bb2 <_dtoa_r+0x78a>
 8009b9a:	9b04      	ldr	r3, [sp, #16]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	dd08      	ble.n	8009bb2 <_dtoa_r+0x78a>
 8009ba0:	42ab      	cmp	r3, r5
 8009ba2:	9a04      	ldr	r2, [sp, #16]
 8009ba4:	bfa8      	it	ge
 8009ba6:	462b      	movge	r3, r5
 8009ba8:	eba8 0803 	sub.w	r8, r8, r3
 8009bac:	1aed      	subs	r5, r5, r3
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	9304      	str	r3, [sp, #16]
 8009bb2:	9b06      	ldr	r3, [sp, #24]
 8009bb4:	b1fb      	cbz	r3, 8009bf6 <_dtoa_r+0x7ce>
 8009bb6:	9b08      	ldr	r3, [sp, #32]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 809f 	beq.w	8009cfc <_dtoa_r+0x8d4>
 8009bbe:	2e00      	cmp	r6, #0
 8009bc0:	dd11      	ble.n	8009be6 <_dtoa_r+0x7be>
 8009bc2:	4639      	mov	r1, r7
 8009bc4:	4632      	mov	r2, r6
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f000 fbec 	bl	800a3a4 <__pow5mult>
 8009bcc:	465a      	mov	r2, fp
 8009bce:	4601      	mov	r1, r0
 8009bd0:	4607      	mov	r7, r0
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 fb40 	bl	800a258 <__multiply>
 8009bd8:	4659      	mov	r1, fp
 8009bda:	9007      	str	r0, [sp, #28]
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f000 fa69 	bl	800a0b4 <_Bfree>
 8009be2:	9b07      	ldr	r3, [sp, #28]
 8009be4:	469b      	mov	fp, r3
 8009be6:	9b06      	ldr	r3, [sp, #24]
 8009be8:	1b9a      	subs	r2, r3, r6
 8009bea:	d004      	beq.n	8009bf6 <_dtoa_r+0x7ce>
 8009bec:	4659      	mov	r1, fp
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f000 fbd8 	bl	800a3a4 <__pow5mult>
 8009bf4:	4683      	mov	fp, r0
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f000 fb17 	bl	800a22c <__i2b>
 8009bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	4606      	mov	r6, r0
 8009c04:	dd7c      	ble.n	8009d00 <_dtoa_r+0x8d8>
 8009c06:	461a      	mov	r2, r3
 8009c08:	4601      	mov	r1, r0
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 fbca 	bl	800a3a4 <__pow5mult>
 8009c10:	9b05      	ldr	r3, [sp, #20]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	4606      	mov	r6, r0
 8009c16:	dd76      	ble.n	8009d06 <_dtoa_r+0x8de>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	9306      	str	r3, [sp, #24]
 8009c1c:	6933      	ldr	r3, [r6, #16]
 8009c1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c22:	6918      	ldr	r0, [r3, #16]
 8009c24:	f000 fab2 	bl	800a18c <__hi0bits>
 8009c28:	f1c0 0020 	rsb	r0, r0, #32
 8009c2c:	9b04      	ldr	r3, [sp, #16]
 8009c2e:	4418      	add	r0, r3
 8009c30:	f010 001f 	ands.w	r0, r0, #31
 8009c34:	f000 8086 	beq.w	8009d44 <_dtoa_r+0x91c>
 8009c38:	f1c0 0320 	rsb	r3, r0, #32
 8009c3c:	2b04      	cmp	r3, #4
 8009c3e:	dd7f      	ble.n	8009d40 <_dtoa_r+0x918>
 8009c40:	f1c0 001c 	rsb	r0, r0, #28
 8009c44:	9b04      	ldr	r3, [sp, #16]
 8009c46:	4403      	add	r3, r0
 8009c48:	4480      	add	r8, r0
 8009c4a:	4405      	add	r5, r0
 8009c4c:	9304      	str	r3, [sp, #16]
 8009c4e:	f1b8 0f00 	cmp.w	r8, #0
 8009c52:	dd05      	ble.n	8009c60 <_dtoa_r+0x838>
 8009c54:	4659      	mov	r1, fp
 8009c56:	4642      	mov	r2, r8
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f000 fbfd 	bl	800a458 <__lshift>
 8009c5e:	4683      	mov	fp, r0
 8009c60:	9b04      	ldr	r3, [sp, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	dd05      	ble.n	8009c72 <_dtoa_r+0x84a>
 8009c66:	4631      	mov	r1, r6
 8009c68:	461a      	mov	r2, r3
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 fbf4 	bl	800a458 <__lshift>
 8009c70:	4606      	mov	r6, r0
 8009c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d069      	beq.n	8009d4c <_dtoa_r+0x924>
 8009c78:	4631      	mov	r1, r6
 8009c7a:	4658      	mov	r0, fp
 8009c7c:	f000 fc58 	bl	800a530 <__mcmp>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	da63      	bge.n	8009d4c <_dtoa_r+0x924>
 8009c84:	2300      	movs	r3, #0
 8009c86:	4659      	mov	r1, fp
 8009c88:	220a      	movs	r2, #10
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f000 fa34 	bl	800a0f8 <__multadd>
 8009c90:	9b08      	ldr	r3, [sp, #32]
 8009c92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c96:	4683      	mov	fp, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f000 818f 	beq.w	8009fbc <_dtoa_r+0xb94>
 8009c9e:	4639      	mov	r1, r7
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	220a      	movs	r2, #10
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f000 fa27 	bl	800a0f8 <__multadd>
 8009caa:	f1b9 0f00 	cmp.w	r9, #0
 8009cae:	4607      	mov	r7, r0
 8009cb0:	f300 808e 	bgt.w	8009dd0 <_dtoa_r+0x9a8>
 8009cb4:	9b05      	ldr	r3, [sp, #20]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	dc50      	bgt.n	8009d5c <_dtoa_r+0x934>
 8009cba:	e089      	b.n	8009dd0 <_dtoa_r+0x9a8>
 8009cbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009cc2:	e75d      	b.n	8009b80 <_dtoa_r+0x758>
 8009cc4:	9b01      	ldr	r3, [sp, #4]
 8009cc6:	1e5e      	subs	r6, r3, #1
 8009cc8:	9b06      	ldr	r3, [sp, #24]
 8009cca:	42b3      	cmp	r3, r6
 8009ccc:	bfbf      	itttt	lt
 8009cce:	9b06      	ldrlt	r3, [sp, #24]
 8009cd0:	9606      	strlt	r6, [sp, #24]
 8009cd2:	1af2      	sublt	r2, r6, r3
 8009cd4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009cd6:	bfb6      	itet	lt
 8009cd8:	189b      	addlt	r3, r3, r2
 8009cda:	1b9e      	subge	r6, r3, r6
 8009cdc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009cde:	9b01      	ldr	r3, [sp, #4]
 8009ce0:	bfb8      	it	lt
 8009ce2:	2600      	movlt	r6, #0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	bfb5      	itete	lt
 8009ce8:	eba8 0503 	sublt.w	r5, r8, r3
 8009cec:	9b01      	ldrge	r3, [sp, #4]
 8009cee:	2300      	movlt	r3, #0
 8009cf0:	4645      	movge	r5, r8
 8009cf2:	e747      	b.n	8009b84 <_dtoa_r+0x75c>
 8009cf4:	9e06      	ldr	r6, [sp, #24]
 8009cf6:	9f08      	ldr	r7, [sp, #32]
 8009cf8:	4645      	mov	r5, r8
 8009cfa:	e74c      	b.n	8009b96 <_dtoa_r+0x76e>
 8009cfc:	9a06      	ldr	r2, [sp, #24]
 8009cfe:	e775      	b.n	8009bec <_dtoa_r+0x7c4>
 8009d00:	9b05      	ldr	r3, [sp, #20]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	dc18      	bgt.n	8009d38 <_dtoa_r+0x910>
 8009d06:	9b02      	ldr	r3, [sp, #8]
 8009d08:	b9b3      	cbnz	r3, 8009d38 <_dtoa_r+0x910>
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d10:	b9a3      	cbnz	r3, 8009d3c <_dtoa_r+0x914>
 8009d12:	9b03      	ldr	r3, [sp, #12]
 8009d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d18:	0d1b      	lsrs	r3, r3, #20
 8009d1a:	051b      	lsls	r3, r3, #20
 8009d1c:	b12b      	cbz	r3, 8009d2a <_dtoa_r+0x902>
 8009d1e:	9b04      	ldr	r3, [sp, #16]
 8009d20:	3301      	adds	r3, #1
 8009d22:	9304      	str	r3, [sp, #16]
 8009d24:	f108 0801 	add.w	r8, r8, #1
 8009d28:	2301      	movs	r3, #1
 8009d2a:	9306      	str	r3, [sp, #24]
 8009d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f47f af74 	bne.w	8009c1c <_dtoa_r+0x7f4>
 8009d34:	2001      	movs	r0, #1
 8009d36:	e779      	b.n	8009c2c <_dtoa_r+0x804>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	e7f6      	b.n	8009d2a <_dtoa_r+0x902>
 8009d3c:	9b02      	ldr	r3, [sp, #8]
 8009d3e:	e7f4      	b.n	8009d2a <_dtoa_r+0x902>
 8009d40:	d085      	beq.n	8009c4e <_dtoa_r+0x826>
 8009d42:	4618      	mov	r0, r3
 8009d44:	301c      	adds	r0, #28
 8009d46:	e77d      	b.n	8009c44 <_dtoa_r+0x81c>
 8009d48:	40240000 	.word	0x40240000
 8009d4c:	9b01      	ldr	r3, [sp, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	dc38      	bgt.n	8009dc4 <_dtoa_r+0x99c>
 8009d52:	9b05      	ldr	r3, [sp, #20]
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	dd35      	ble.n	8009dc4 <_dtoa_r+0x99c>
 8009d58:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009d5c:	f1b9 0f00 	cmp.w	r9, #0
 8009d60:	d10d      	bne.n	8009d7e <_dtoa_r+0x956>
 8009d62:	4631      	mov	r1, r6
 8009d64:	464b      	mov	r3, r9
 8009d66:	2205      	movs	r2, #5
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f000 f9c5 	bl	800a0f8 <__multadd>
 8009d6e:	4601      	mov	r1, r0
 8009d70:	4606      	mov	r6, r0
 8009d72:	4658      	mov	r0, fp
 8009d74:	f000 fbdc 	bl	800a530 <__mcmp>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	f73f adbd 	bgt.w	80098f8 <_dtoa_r+0x4d0>
 8009d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d80:	9d00      	ldr	r5, [sp, #0]
 8009d82:	ea6f 0a03 	mvn.w	sl, r3
 8009d86:	f04f 0800 	mov.w	r8, #0
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f000 f991 	bl	800a0b4 <_Bfree>
 8009d92:	2f00      	cmp	r7, #0
 8009d94:	f43f aeb4 	beq.w	8009b00 <_dtoa_r+0x6d8>
 8009d98:	f1b8 0f00 	cmp.w	r8, #0
 8009d9c:	d005      	beq.n	8009daa <_dtoa_r+0x982>
 8009d9e:	45b8      	cmp	r8, r7
 8009da0:	d003      	beq.n	8009daa <_dtoa_r+0x982>
 8009da2:	4641      	mov	r1, r8
 8009da4:	4620      	mov	r0, r4
 8009da6:	f000 f985 	bl	800a0b4 <_Bfree>
 8009daa:	4639      	mov	r1, r7
 8009dac:	4620      	mov	r0, r4
 8009dae:	f000 f981 	bl	800a0b4 <_Bfree>
 8009db2:	e6a5      	b.n	8009b00 <_dtoa_r+0x6d8>
 8009db4:	2600      	movs	r6, #0
 8009db6:	4637      	mov	r7, r6
 8009db8:	e7e1      	b.n	8009d7e <_dtoa_r+0x956>
 8009dba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009dbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009dc0:	4637      	mov	r7, r6
 8009dc2:	e599      	b.n	80098f8 <_dtoa_r+0x4d0>
 8009dc4:	9b08      	ldr	r3, [sp, #32]
 8009dc6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 80fd 	beq.w	8009fca <_dtoa_r+0xba2>
 8009dd0:	2d00      	cmp	r5, #0
 8009dd2:	dd05      	ble.n	8009de0 <_dtoa_r+0x9b8>
 8009dd4:	4639      	mov	r1, r7
 8009dd6:	462a      	mov	r2, r5
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f000 fb3d 	bl	800a458 <__lshift>
 8009dde:	4607      	mov	r7, r0
 8009de0:	9b06      	ldr	r3, [sp, #24]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d05c      	beq.n	8009ea0 <_dtoa_r+0xa78>
 8009de6:	6879      	ldr	r1, [r7, #4]
 8009de8:	4620      	mov	r0, r4
 8009dea:	f000 f923 	bl	800a034 <_Balloc>
 8009dee:	4605      	mov	r5, r0
 8009df0:	b928      	cbnz	r0, 8009dfe <_dtoa_r+0x9d6>
 8009df2:	4b80      	ldr	r3, [pc, #512]	; (8009ff4 <_dtoa_r+0xbcc>)
 8009df4:	4602      	mov	r2, r0
 8009df6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009dfa:	f7ff bb2e 	b.w	800945a <_dtoa_r+0x32>
 8009dfe:	693a      	ldr	r2, [r7, #16]
 8009e00:	3202      	adds	r2, #2
 8009e02:	0092      	lsls	r2, r2, #2
 8009e04:	f107 010c 	add.w	r1, r7, #12
 8009e08:	300c      	adds	r0, #12
 8009e0a:	f000 f905 	bl	800a018 <memcpy>
 8009e0e:	2201      	movs	r2, #1
 8009e10:	4629      	mov	r1, r5
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 fb20 	bl	800a458 <__lshift>
 8009e18:	9b00      	ldr	r3, [sp, #0]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	9b00      	ldr	r3, [sp, #0]
 8009e20:	444b      	add	r3, r9
 8009e22:	9307      	str	r3, [sp, #28]
 8009e24:	9b02      	ldr	r3, [sp, #8]
 8009e26:	f003 0301 	and.w	r3, r3, #1
 8009e2a:	46b8      	mov	r8, r7
 8009e2c:	9306      	str	r3, [sp, #24]
 8009e2e:	4607      	mov	r7, r0
 8009e30:	9b01      	ldr	r3, [sp, #4]
 8009e32:	4631      	mov	r1, r6
 8009e34:	3b01      	subs	r3, #1
 8009e36:	4658      	mov	r0, fp
 8009e38:	9302      	str	r3, [sp, #8]
 8009e3a:	f7ff fa67 	bl	800930c <quorem>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	3330      	adds	r3, #48	; 0x30
 8009e42:	9004      	str	r0, [sp, #16]
 8009e44:	4641      	mov	r1, r8
 8009e46:	4658      	mov	r0, fp
 8009e48:	9308      	str	r3, [sp, #32]
 8009e4a:	f000 fb71 	bl	800a530 <__mcmp>
 8009e4e:	463a      	mov	r2, r7
 8009e50:	4681      	mov	r9, r0
 8009e52:	4631      	mov	r1, r6
 8009e54:	4620      	mov	r0, r4
 8009e56:	f000 fb87 	bl	800a568 <__mdiff>
 8009e5a:	68c2      	ldr	r2, [r0, #12]
 8009e5c:	9b08      	ldr	r3, [sp, #32]
 8009e5e:	4605      	mov	r5, r0
 8009e60:	bb02      	cbnz	r2, 8009ea4 <_dtoa_r+0xa7c>
 8009e62:	4601      	mov	r1, r0
 8009e64:	4658      	mov	r0, fp
 8009e66:	f000 fb63 	bl	800a530 <__mcmp>
 8009e6a:	9b08      	ldr	r3, [sp, #32]
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4620      	mov	r0, r4
 8009e72:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009e76:	f000 f91d 	bl	800a0b4 <_Bfree>
 8009e7a:	9b05      	ldr	r3, [sp, #20]
 8009e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e7e:	9d01      	ldr	r5, [sp, #4]
 8009e80:	ea43 0102 	orr.w	r1, r3, r2
 8009e84:	9b06      	ldr	r3, [sp, #24]
 8009e86:	430b      	orrs	r3, r1
 8009e88:	9b08      	ldr	r3, [sp, #32]
 8009e8a:	d10d      	bne.n	8009ea8 <_dtoa_r+0xa80>
 8009e8c:	2b39      	cmp	r3, #57	; 0x39
 8009e8e:	d029      	beq.n	8009ee4 <_dtoa_r+0xabc>
 8009e90:	f1b9 0f00 	cmp.w	r9, #0
 8009e94:	dd01      	ble.n	8009e9a <_dtoa_r+0xa72>
 8009e96:	9b04      	ldr	r3, [sp, #16]
 8009e98:	3331      	adds	r3, #49	; 0x31
 8009e9a:	9a02      	ldr	r2, [sp, #8]
 8009e9c:	7013      	strb	r3, [r2, #0]
 8009e9e:	e774      	b.n	8009d8a <_dtoa_r+0x962>
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	e7b9      	b.n	8009e18 <_dtoa_r+0x9f0>
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	e7e2      	b.n	8009e6e <_dtoa_r+0xa46>
 8009ea8:	f1b9 0f00 	cmp.w	r9, #0
 8009eac:	db06      	blt.n	8009ebc <_dtoa_r+0xa94>
 8009eae:	9905      	ldr	r1, [sp, #20]
 8009eb0:	ea41 0909 	orr.w	r9, r1, r9
 8009eb4:	9906      	ldr	r1, [sp, #24]
 8009eb6:	ea59 0101 	orrs.w	r1, r9, r1
 8009eba:	d120      	bne.n	8009efe <_dtoa_r+0xad6>
 8009ebc:	2a00      	cmp	r2, #0
 8009ebe:	ddec      	ble.n	8009e9a <_dtoa_r+0xa72>
 8009ec0:	4659      	mov	r1, fp
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	9301      	str	r3, [sp, #4]
 8009ec8:	f000 fac6 	bl	800a458 <__lshift>
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4683      	mov	fp, r0
 8009ed0:	f000 fb2e 	bl	800a530 <__mcmp>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	9b01      	ldr	r3, [sp, #4]
 8009ed8:	dc02      	bgt.n	8009ee0 <_dtoa_r+0xab8>
 8009eda:	d1de      	bne.n	8009e9a <_dtoa_r+0xa72>
 8009edc:	07da      	lsls	r2, r3, #31
 8009ede:	d5dc      	bpl.n	8009e9a <_dtoa_r+0xa72>
 8009ee0:	2b39      	cmp	r3, #57	; 0x39
 8009ee2:	d1d8      	bne.n	8009e96 <_dtoa_r+0xa6e>
 8009ee4:	9a02      	ldr	r2, [sp, #8]
 8009ee6:	2339      	movs	r3, #57	; 0x39
 8009ee8:	7013      	strb	r3, [r2, #0]
 8009eea:	462b      	mov	r3, r5
 8009eec:	461d      	mov	r5, r3
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ef4:	2a39      	cmp	r2, #57	; 0x39
 8009ef6:	d050      	beq.n	8009f9a <_dtoa_r+0xb72>
 8009ef8:	3201      	adds	r2, #1
 8009efa:	701a      	strb	r2, [r3, #0]
 8009efc:	e745      	b.n	8009d8a <_dtoa_r+0x962>
 8009efe:	2a00      	cmp	r2, #0
 8009f00:	dd03      	ble.n	8009f0a <_dtoa_r+0xae2>
 8009f02:	2b39      	cmp	r3, #57	; 0x39
 8009f04:	d0ee      	beq.n	8009ee4 <_dtoa_r+0xabc>
 8009f06:	3301      	adds	r3, #1
 8009f08:	e7c7      	b.n	8009e9a <_dtoa_r+0xa72>
 8009f0a:	9a01      	ldr	r2, [sp, #4]
 8009f0c:	9907      	ldr	r1, [sp, #28]
 8009f0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009f12:	428a      	cmp	r2, r1
 8009f14:	d02a      	beq.n	8009f6c <_dtoa_r+0xb44>
 8009f16:	4659      	mov	r1, fp
 8009f18:	2300      	movs	r3, #0
 8009f1a:	220a      	movs	r2, #10
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f000 f8eb 	bl	800a0f8 <__multadd>
 8009f22:	45b8      	cmp	r8, r7
 8009f24:	4683      	mov	fp, r0
 8009f26:	f04f 0300 	mov.w	r3, #0
 8009f2a:	f04f 020a 	mov.w	r2, #10
 8009f2e:	4641      	mov	r1, r8
 8009f30:	4620      	mov	r0, r4
 8009f32:	d107      	bne.n	8009f44 <_dtoa_r+0xb1c>
 8009f34:	f000 f8e0 	bl	800a0f8 <__multadd>
 8009f38:	4680      	mov	r8, r0
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	9b01      	ldr	r3, [sp, #4]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	e775      	b.n	8009e30 <_dtoa_r+0xa08>
 8009f44:	f000 f8d8 	bl	800a0f8 <__multadd>
 8009f48:	4639      	mov	r1, r7
 8009f4a:	4680      	mov	r8, r0
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	220a      	movs	r2, #10
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 f8d1 	bl	800a0f8 <__multadd>
 8009f56:	4607      	mov	r7, r0
 8009f58:	e7f0      	b.n	8009f3c <_dtoa_r+0xb14>
 8009f5a:	f1b9 0f00 	cmp.w	r9, #0
 8009f5e:	9a00      	ldr	r2, [sp, #0]
 8009f60:	bfcc      	ite	gt
 8009f62:	464d      	movgt	r5, r9
 8009f64:	2501      	movle	r5, #1
 8009f66:	4415      	add	r5, r2
 8009f68:	f04f 0800 	mov.w	r8, #0
 8009f6c:	4659      	mov	r1, fp
 8009f6e:	2201      	movs	r2, #1
 8009f70:	4620      	mov	r0, r4
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	f000 fa70 	bl	800a458 <__lshift>
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4683      	mov	fp, r0
 8009f7c:	f000 fad8 	bl	800a530 <__mcmp>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	dcb2      	bgt.n	8009eea <_dtoa_r+0xac2>
 8009f84:	d102      	bne.n	8009f8c <_dtoa_r+0xb64>
 8009f86:	9b01      	ldr	r3, [sp, #4]
 8009f88:	07db      	lsls	r3, r3, #31
 8009f8a:	d4ae      	bmi.n	8009eea <_dtoa_r+0xac2>
 8009f8c:	462b      	mov	r3, r5
 8009f8e:	461d      	mov	r5, r3
 8009f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f94:	2a30      	cmp	r2, #48	; 0x30
 8009f96:	d0fa      	beq.n	8009f8e <_dtoa_r+0xb66>
 8009f98:	e6f7      	b.n	8009d8a <_dtoa_r+0x962>
 8009f9a:	9a00      	ldr	r2, [sp, #0]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d1a5      	bne.n	8009eec <_dtoa_r+0xac4>
 8009fa0:	f10a 0a01 	add.w	sl, sl, #1
 8009fa4:	2331      	movs	r3, #49	; 0x31
 8009fa6:	e779      	b.n	8009e9c <_dtoa_r+0xa74>
 8009fa8:	4b13      	ldr	r3, [pc, #76]	; (8009ff8 <_dtoa_r+0xbd0>)
 8009faa:	f7ff baaf 	b.w	800950c <_dtoa_r+0xe4>
 8009fae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f47f aa86 	bne.w	80094c2 <_dtoa_r+0x9a>
 8009fb6:	4b11      	ldr	r3, [pc, #68]	; (8009ffc <_dtoa_r+0xbd4>)
 8009fb8:	f7ff baa8 	b.w	800950c <_dtoa_r+0xe4>
 8009fbc:	f1b9 0f00 	cmp.w	r9, #0
 8009fc0:	dc03      	bgt.n	8009fca <_dtoa_r+0xba2>
 8009fc2:	9b05      	ldr	r3, [sp, #20]
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	f73f aec9 	bgt.w	8009d5c <_dtoa_r+0x934>
 8009fca:	9d00      	ldr	r5, [sp, #0]
 8009fcc:	4631      	mov	r1, r6
 8009fce:	4658      	mov	r0, fp
 8009fd0:	f7ff f99c 	bl	800930c <quorem>
 8009fd4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009fd8:	f805 3b01 	strb.w	r3, [r5], #1
 8009fdc:	9a00      	ldr	r2, [sp, #0]
 8009fde:	1aaa      	subs	r2, r5, r2
 8009fe0:	4591      	cmp	r9, r2
 8009fe2:	ddba      	ble.n	8009f5a <_dtoa_r+0xb32>
 8009fe4:	4659      	mov	r1, fp
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	220a      	movs	r2, #10
 8009fea:	4620      	mov	r0, r4
 8009fec:	f000 f884 	bl	800a0f8 <__multadd>
 8009ff0:	4683      	mov	fp, r0
 8009ff2:	e7eb      	b.n	8009fcc <_dtoa_r+0xba4>
 8009ff4:	0800b4d3 	.word	0x0800b4d3
 8009ff8:	0800b42c 	.word	0x0800b42c
 8009ffc:	0800b450 	.word	0x0800b450

0800a000 <_localeconv_r>:
 800a000:	4800      	ldr	r0, [pc, #0]	; (800a004 <_localeconv_r+0x4>)
 800a002:	4770      	bx	lr
 800a004:	20000164 	.word	0x20000164

0800a008 <malloc>:
 800a008:	4b02      	ldr	r3, [pc, #8]	; (800a014 <malloc+0xc>)
 800a00a:	4601      	mov	r1, r0
 800a00c:	6818      	ldr	r0, [r3, #0]
 800a00e:	f000 bbef 	b.w	800a7f0 <_malloc_r>
 800a012:	bf00      	nop
 800a014:	20000010 	.word	0x20000010

0800a018 <memcpy>:
 800a018:	440a      	add	r2, r1
 800a01a:	4291      	cmp	r1, r2
 800a01c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a020:	d100      	bne.n	800a024 <memcpy+0xc>
 800a022:	4770      	bx	lr
 800a024:	b510      	push	{r4, lr}
 800a026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a02a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a02e:	4291      	cmp	r1, r2
 800a030:	d1f9      	bne.n	800a026 <memcpy+0xe>
 800a032:	bd10      	pop	{r4, pc}

0800a034 <_Balloc>:
 800a034:	b570      	push	{r4, r5, r6, lr}
 800a036:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a038:	4604      	mov	r4, r0
 800a03a:	460d      	mov	r5, r1
 800a03c:	b976      	cbnz	r6, 800a05c <_Balloc+0x28>
 800a03e:	2010      	movs	r0, #16
 800a040:	f7ff ffe2 	bl	800a008 <malloc>
 800a044:	4602      	mov	r2, r0
 800a046:	6260      	str	r0, [r4, #36]	; 0x24
 800a048:	b920      	cbnz	r0, 800a054 <_Balloc+0x20>
 800a04a:	4b18      	ldr	r3, [pc, #96]	; (800a0ac <_Balloc+0x78>)
 800a04c:	4818      	ldr	r0, [pc, #96]	; (800a0b0 <_Balloc+0x7c>)
 800a04e:	2166      	movs	r1, #102	; 0x66
 800a050:	f000 fc38 	bl	800a8c4 <__assert_func>
 800a054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a058:	6006      	str	r6, [r0, #0]
 800a05a:	60c6      	str	r6, [r0, #12]
 800a05c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a05e:	68f3      	ldr	r3, [r6, #12]
 800a060:	b183      	cbz	r3, 800a084 <_Balloc+0x50>
 800a062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a06a:	b9b8      	cbnz	r0, 800a09c <_Balloc+0x68>
 800a06c:	2101      	movs	r1, #1
 800a06e:	fa01 f605 	lsl.w	r6, r1, r5
 800a072:	1d72      	adds	r2, r6, #5
 800a074:	0092      	lsls	r2, r2, #2
 800a076:	4620      	mov	r0, r4
 800a078:	f000 fb5a 	bl	800a730 <_calloc_r>
 800a07c:	b160      	cbz	r0, 800a098 <_Balloc+0x64>
 800a07e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a082:	e00e      	b.n	800a0a2 <_Balloc+0x6e>
 800a084:	2221      	movs	r2, #33	; 0x21
 800a086:	2104      	movs	r1, #4
 800a088:	4620      	mov	r0, r4
 800a08a:	f000 fb51 	bl	800a730 <_calloc_r>
 800a08e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a090:	60f0      	str	r0, [r6, #12]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e4      	bne.n	800a062 <_Balloc+0x2e>
 800a098:	2000      	movs	r0, #0
 800a09a:	bd70      	pop	{r4, r5, r6, pc}
 800a09c:	6802      	ldr	r2, [r0, #0]
 800a09e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0a8:	e7f7      	b.n	800a09a <_Balloc+0x66>
 800a0aa:	bf00      	nop
 800a0ac:	0800b45d 	.word	0x0800b45d
 800a0b0:	0800b4e4 	.word	0x0800b4e4

0800a0b4 <_Bfree>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	b976      	cbnz	r6, 800a0dc <_Bfree+0x28>
 800a0be:	2010      	movs	r0, #16
 800a0c0:	f7ff ffa2 	bl	800a008 <malloc>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	6268      	str	r0, [r5, #36]	; 0x24
 800a0c8:	b920      	cbnz	r0, 800a0d4 <_Bfree+0x20>
 800a0ca:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <_Bfree+0x3c>)
 800a0cc:	4809      	ldr	r0, [pc, #36]	; (800a0f4 <_Bfree+0x40>)
 800a0ce:	218a      	movs	r1, #138	; 0x8a
 800a0d0:	f000 fbf8 	bl	800a8c4 <__assert_func>
 800a0d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0d8:	6006      	str	r6, [r0, #0]
 800a0da:	60c6      	str	r6, [r0, #12]
 800a0dc:	b13c      	cbz	r4, 800a0ee <_Bfree+0x3a>
 800a0de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0e0:	6862      	ldr	r2, [r4, #4]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0e8:	6021      	str	r1, [r4, #0]
 800a0ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0ee:	bd70      	pop	{r4, r5, r6, pc}
 800a0f0:	0800b45d 	.word	0x0800b45d
 800a0f4:	0800b4e4 	.word	0x0800b4e4

0800a0f8 <__multadd>:
 800a0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0fc:	690e      	ldr	r6, [r1, #16]
 800a0fe:	4607      	mov	r7, r0
 800a100:	4698      	mov	r8, r3
 800a102:	460c      	mov	r4, r1
 800a104:	f101 0014 	add.w	r0, r1, #20
 800a108:	2300      	movs	r3, #0
 800a10a:	6805      	ldr	r5, [r0, #0]
 800a10c:	b2a9      	uxth	r1, r5
 800a10e:	fb02 8101 	mla	r1, r2, r1, r8
 800a112:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a116:	0c2d      	lsrs	r5, r5, #16
 800a118:	fb02 c505 	mla	r5, r2, r5, ip
 800a11c:	b289      	uxth	r1, r1
 800a11e:	3301      	adds	r3, #1
 800a120:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a124:	429e      	cmp	r6, r3
 800a126:	f840 1b04 	str.w	r1, [r0], #4
 800a12a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a12e:	dcec      	bgt.n	800a10a <__multadd+0x12>
 800a130:	f1b8 0f00 	cmp.w	r8, #0
 800a134:	d022      	beq.n	800a17c <__multadd+0x84>
 800a136:	68a3      	ldr	r3, [r4, #8]
 800a138:	42b3      	cmp	r3, r6
 800a13a:	dc19      	bgt.n	800a170 <__multadd+0x78>
 800a13c:	6861      	ldr	r1, [r4, #4]
 800a13e:	4638      	mov	r0, r7
 800a140:	3101      	adds	r1, #1
 800a142:	f7ff ff77 	bl	800a034 <_Balloc>
 800a146:	4605      	mov	r5, r0
 800a148:	b928      	cbnz	r0, 800a156 <__multadd+0x5e>
 800a14a:	4602      	mov	r2, r0
 800a14c:	4b0d      	ldr	r3, [pc, #52]	; (800a184 <__multadd+0x8c>)
 800a14e:	480e      	ldr	r0, [pc, #56]	; (800a188 <__multadd+0x90>)
 800a150:	21b5      	movs	r1, #181	; 0xb5
 800a152:	f000 fbb7 	bl	800a8c4 <__assert_func>
 800a156:	6922      	ldr	r2, [r4, #16]
 800a158:	3202      	adds	r2, #2
 800a15a:	f104 010c 	add.w	r1, r4, #12
 800a15e:	0092      	lsls	r2, r2, #2
 800a160:	300c      	adds	r0, #12
 800a162:	f7ff ff59 	bl	800a018 <memcpy>
 800a166:	4621      	mov	r1, r4
 800a168:	4638      	mov	r0, r7
 800a16a:	f7ff ffa3 	bl	800a0b4 <_Bfree>
 800a16e:	462c      	mov	r4, r5
 800a170:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a174:	3601      	adds	r6, #1
 800a176:	f8c3 8014 	str.w	r8, [r3, #20]
 800a17a:	6126      	str	r6, [r4, #16]
 800a17c:	4620      	mov	r0, r4
 800a17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a182:	bf00      	nop
 800a184:	0800b4d3 	.word	0x0800b4d3
 800a188:	0800b4e4 	.word	0x0800b4e4

0800a18c <__hi0bits>:
 800a18c:	0c03      	lsrs	r3, r0, #16
 800a18e:	041b      	lsls	r3, r3, #16
 800a190:	b9d3      	cbnz	r3, 800a1c8 <__hi0bits+0x3c>
 800a192:	0400      	lsls	r0, r0, #16
 800a194:	2310      	movs	r3, #16
 800a196:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a19a:	bf04      	itt	eq
 800a19c:	0200      	lsleq	r0, r0, #8
 800a19e:	3308      	addeq	r3, #8
 800a1a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a1a4:	bf04      	itt	eq
 800a1a6:	0100      	lsleq	r0, r0, #4
 800a1a8:	3304      	addeq	r3, #4
 800a1aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a1ae:	bf04      	itt	eq
 800a1b0:	0080      	lsleq	r0, r0, #2
 800a1b2:	3302      	addeq	r3, #2
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	db05      	blt.n	800a1c4 <__hi0bits+0x38>
 800a1b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a1bc:	f103 0301 	add.w	r3, r3, #1
 800a1c0:	bf08      	it	eq
 800a1c2:	2320      	moveq	r3, #32
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	4770      	bx	lr
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e7e4      	b.n	800a196 <__hi0bits+0xa>

0800a1cc <__lo0bits>:
 800a1cc:	6803      	ldr	r3, [r0, #0]
 800a1ce:	f013 0207 	ands.w	r2, r3, #7
 800a1d2:	4601      	mov	r1, r0
 800a1d4:	d00b      	beq.n	800a1ee <__lo0bits+0x22>
 800a1d6:	07da      	lsls	r2, r3, #31
 800a1d8:	d424      	bmi.n	800a224 <__lo0bits+0x58>
 800a1da:	0798      	lsls	r0, r3, #30
 800a1dc:	bf49      	itett	mi
 800a1de:	085b      	lsrmi	r3, r3, #1
 800a1e0:	089b      	lsrpl	r3, r3, #2
 800a1e2:	2001      	movmi	r0, #1
 800a1e4:	600b      	strmi	r3, [r1, #0]
 800a1e6:	bf5c      	itt	pl
 800a1e8:	600b      	strpl	r3, [r1, #0]
 800a1ea:	2002      	movpl	r0, #2
 800a1ec:	4770      	bx	lr
 800a1ee:	b298      	uxth	r0, r3
 800a1f0:	b9b0      	cbnz	r0, 800a220 <__lo0bits+0x54>
 800a1f2:	0c1b      	lsrs	r3, r3, #16
 800a1f4:	2010      	movs	r0, #16
 800a1f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a1fa:	bf04      	itt	eq
 800a1fc:	0a1b      	lsreq	r3, r3, #8
 800a1fe:	3008      	addeq	r0, #8
 800a200:	071a      	lsls	r2, r3, #28
 800a202:	bf04      	itt	eq
 800a204:	091b      	lsreq	r3, r3, #4
 800a206:	3004      	addeq	r0, #4
 800a208:	079a      	lsls	r2, r3, #30
 800a20a:	bf04      	itt	eq
 800a20c:	089b      	lsreq	r3, r3, #2
 800a20e:	3002      	addeq	r0, #2
 800a210:	07da      	lsls	r2, r3, #31
 800a212:	d403      	bmi.n	800a21c <__lo0bits+0x50>
 800a214:	085b      	lsrs	r3, r3, #1
 800a216:	f100 0001 	add.w	r0, r0, #1
 800a21a:	d005      	beq.n	800a228 <__lo0bits+0x5c>
 800a21c:	600b      	str	r3, [r1, #0]
 800a21e:	4770      	bx	lr
 800a220:	4610      	mov	r0, r2
 800a222:	e7e8      	b.n	800a1f6 <__lo0bits+0x2a>
 800a224:	2000      	movs	r0, #0
 800a226:	4770      	bx	lr
 800a228:	2020      	movs	r0, #32
 800a22a:	4770      	bx	lr

0800a22c <__i2b>:
 800a22c:	b510      	push	{r4, lr}
 800a22e:	460c      	mov	r4, r1
 800a230:	2101      	movs	r1, #1
 800a232:	f7ff feff 	bl	800a034 <_Balloc>
 800a236:	4602      	mov	r2, r0
 800a238:	b928      	cbnz	r0, 800a246 <__i2b+0x1a>
 800a23a:	4b05      	ldr	r3, [pc, #20]	; (800a250 <__i2b+0x24>)
 800a23c:	4805      	ldr	r0, [pc, #20]	; (800a254 <__i2b+0x28>)
 800a23e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a242:	f000 fb3f 	bl	800a8c4 <__assert_func>
 800a246:	2301      	movs	r3, #1
 800a248:	6144      	str	r4, [r0, #20]
 800a24a:	6103      	str	r3, [r0, #16]
 800a24c:	bd10      	pop	{r4, pc}
 800a24e:	bf00      	nop
 800a250:	0800b4d3 	.word	0x0800b4d3
 800a254:	0800b4e4 	.word	0x0800b4e4

0800a258 <__multiply>:
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	4614      	mov	r4, r2
 800a25e:	690a      	ldr	r2, [r1, #16]
 800a260:	6923      	ldr	r3, [r4, #16]
 800a262:	429a      	cmp	r2, r3
 800a264:	bfb8      	it	lt
 800a266:	460b      	movlt	r3, r1
 800a268:	460d      	mov	r5, r1
 800a26a:	bfbc      	itt	lt
 800a26c:	4625      	movlt	r5, r4
 800a26e:	461c      	movlt	r4, r3
 800a270:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a274:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a278:	68ab      	ldr	r3, [r5, #8]
 800a27a:	6869      	ldr	r1, [r5, #4]
 800a27c:	eb0a 0709 	add.w	r7, sl, r9
 800a280:	42bb      	cmp	r3, r7
 800a282:	b085      	sub	sp, #20
 800a284:	bfb8      	it	lt
 800a286:	3101      	addlt	r1, #1
 800a288:	f7ff fed4 	bl	800a034 <_Balloc>
 800a28c:	b930      	cbnz	r0, 800a29c <__multiply+0x44>
 800a28e:	4602      	mov	r2, r0
 800a290:	4b42      	ldr	r3, [pc, #264]	; (800a39c <__multiply+0x144>)
 800a292:	4843      	ldr	r0, [pc, #268]	; (800a3a0 <__multiply+0x148>)
 800a294:	f240 115d 	movw	r1, #349	; 0x15d
 800a298:	f000 fb14 	bl	800a8c4 <__assert_func>
 800a29c:	f100 0614 	add.w	r6, r0, #20
 800a2a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a2a4:	4633      	mov	r3, r6
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	4543      	cmp	r3, r8
 800a2aa:	d31e      	bcc.n	800a2ea <__multiply+0x92>
 800a2ac:	f105 0c14 	add.w	ip, r5, #20
 800a2b0:	f104 0314 	add.w	r3, r4, #20
 800a2b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a2b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a2bc:	9202      	str	r2, [sp, #8]
 800a2be:	ebac 0205 	sub.w	r2, ip, r5
 800a2c2:	3a15      	subs	r2, #21
 800a2c4:	f022 0203 	bic.w	r2, r2, #3
 800a2c8:	3204      	adds	r2, #4
 800a2ca:	f105 0115 	add.w	r1, r5, #21
 800a2ce:	458c      	cmp	ip, r1
 800a2d0:	bf38      	it	cc
 800a2d2:	2204      	movcc	r2, #4
 800a2d4:	9201      	str	r2, [sp, #4]
 800a2d6:	9a02      	ldr	r2, [sp, #8]
 800a2d8:	9303      	str	r3, [sp, #12]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d808      	bhi.n	800a2f0 <__multiply+0x98>
 800a2de:	2f00      	cmp	r7, #0
 800a2e0:	dc55      	bgt.n	800a38e <__multiply+0x136>
 800a2e2:	6107      	str	r7, [r0, #16]
 800a2e4:	b005      	add	sp, #20
 800a2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ea:	f843 2b04 	str.w	r2, [r3], #4
 800a2ee:	e7db      	b.n	800a2a8 <__multiply+0x50>
 800a2f0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a2f4:	f1ba 0f00 	cmp.w	sl, #0
 800a2f8:	d020      	beq.n	800a33c <__multiply+0xe4>
 800a2fa:	f105 0e14 	add.w	lr, r5, #20
 800a2fe:	46b1      	mov	r9, r6
 800a300:	2200      	movs	r2, #0
 800a302:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a306:	f8d9 b000 	ldr.w	fp, [r9]
 800a30a:	b2a1      	uxth	r1, r4
 800a30c:	fa1f fb8b 	uxth.w	fp, fp
 800a310:	fb0a b101 	mla	r1, sl, r1, fp
 800a314:	4411      	add	r1, r2
 800a316:	f8d9 2000 	ldr.w	r2, [r9]
 800a31a:	0c24      	lsrs	r4, r4, #16
 800a31c:	0c12      	lsrs	r2, r2, #16
 800a31e:	fb0a 2404 	mla	r4, sl, r4, r2
 800a322:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a326:	b289      	uxth	r1, r1
 800a328:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a32c:	45f4      	cmp	ip, lr
 800a32e:	f849 1b04 	str.w	r1, [r9], #4
 800a332:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a336:	d8e4      	bhi.n	800a302 <__multiply+0xaa>
 800a338:	9901      	ldr	r1, [sp, #4]
 800a33a:	5072      	str	r2, [r6, r1]
 800a33c:	9a03      	ldr	r2, [sp, #12]
 800a33e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a342:	3304      	adds	r3, #4
 800a344:	f1b9 0f00 	cmp.w	r9, #0
 800a348:	d01f      	beq.n	800a38a <__multiply+0x132>
 800a34a:	6834      	ldr	r4, [r6, #0]
 800a34c:	f105 0114 	add.w	r1, r5, #20
 800a350:	46b6      	mov	lr, r6
 800a352:	f04f 0a00 	mov.w	sl, #0
 800a356:	880a      	ldrh	r2, [r1, #0]
 800a358:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a35c:	fb09 b202 	mla	r2, r9, r2, fp
 800a360:	4492      	add	sl, r2
 800a362:	b2a4      	uxth	r4, r4
 800a364:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a368:	f84e 4b04 	str.w	r4, [lr], #4
 800a36c:	f851 4b04 	ldr.w	r4, [r1], #4
 800a370:	f8be 2000 	ldrh.w	r2, [lr]
 800a374:	0c24      	lsrs	r4, r4, #16
 800a376:	fb09 2404 	mla	r4, r9, r4, r2
 800a37a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a37e:	458c      	cmp	ip, r1
 800a380:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a384:	d8e7      	bhi.n	800a356 <__multiply+0xfe>
 800a386:	9a01      	ldr	r2, [sp, #4]
 800a388:	50b4      	str	r4, [r6, r2]
 800a38a:	3604      	adds	r6, #4
 800a38c:	e7a3      	b.n	800a2d6 <__multiply+0x7e>
 800a38e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1a5      	bne.n	800a2e2 <__multiply+0x8a>
 800a396:	3f01      	subs	r7, #1
 800a398:	e7a1      	b.n	800a2de <__multiply+0x86>
 800a39a:	bf00      	nop
 800a39c:	0800b4d3 	.word	0x0800b4d3
 800a3a0:	0800b4e4 	.word	0x0800b4e4

0800a3a4 <__pow5mult>:
 800a3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a8:	4615      	mov	r5, r2
 800a3aa:	f012 0203 	ands.w	r2, r2, #3
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	460f      	mov	r7, r1
 800a3b2:	d007      	beq.n	800a3c4 <__pow5mult+0x20>
 800a3b4:	4c25      	ldr	r4, [pc, #148]	; (800a44c <__pow5mult+0xa8>)
 800a3b6:	3a01      	subs	r2, #1
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3be:	f7ff fe9b 	bl	800a0f8 <__multadd>
 800a3c2:	4607      	mov	r7, r0
 800a3c4:	10ad      	asrs	r5, r5, #2
 800a3c6:	d03d      	beq.n	800a444 <__pow5mult+0xa0>
 800a3c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a3ca:	b97c      	cbnz	r4, 800a3ec <__pow5mult+0x48>
 800a3cc:	2010      	movs	r0, #16
 800a3ce:	f7ff fe1b 	bl	800a008 <malloc>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	6270      	str	r0, [r6, #36]	; 0x24
 800a3d6:	b928      	cbnz	r0, 800a3e4 <__pow5mult+0x40>
 800a3d8:	4b1d      	ldr	r3, [pc, #116]	; (800a450 <__pow5mult+0xac>)
 800a3da:	481e      	ldr	r0, [pc, #120]	; (800a454 <__pow5mult+0xb0>)
 800a3dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a3e0:	f000 fa70 	bl	800a8c4 <__assert_func>
 800a3e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3e8:	6004      	str	r4, [r0, #0]
 800a3ea:	60c4      	str	r4, [r0, #12]
 800a3ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a3f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3f4:	b94c      	cbnz	r4, 800a40a <__pow5mult+0x66>
 800a3f6:	f240 2171 	movw	r1, #625	; 0x271
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f7ff ff16 	bl	800a22c <__i2b>
 800a400:	2300      	movs	r3, #0
 800a402:	f8c8 0008 	str.w	r0, [r8, #8]
 800a406:	4604      	mov	r4, r0
 800a408:	6003      	str	r3, [r0, #0]
 800a40a:	f04f 0900 	mov.w	r9, #0
 800a40e:	07eb      	lsls	r3, r5, #31
 800a410:	d50a      	bpl.n	800a428 <__pow5mult+0x84>
 800a412:	4639      	mov	r1, r7
 800a414:	4622      	mov	r2, r4
 800a416:	4630      	mov	r0, r6
 800a418:	f7ff ff1e 	bl	800a258 <__multiply>
 800a41c:	4639      	mov	r1, r7
 800a41e:	4680      	mov	r8, r0
 800a420:	4630      	mov	r0, r6
 800a422:	f7ff fe47 	bl	800a0b4 <_Bfree>
 800a426:	4647      	mov	r7, r8
 800a428:	106d      	asrs	r5, r5, #1
 800a42a:	d00b      	beq.n	800a444 <__pow5mult+0xa0>
 800a42c:	6820      	ldr	r0, [r4, #0]
 800a42e:	b938      	cbnz	r0, 800a440 <__pow5mult+0x9c>
 800a430:	4622      	mov	r2, r4
 800a432:	4621      	mov	r1, r4
 800a434:	4630      	mov	r0, r6
 800a436:	f7ff ff0f 	bl	800a258 <__multiply>
 800a43a:	6020      	str	r0, [r4, #0]
 800a43c:	f8c0 9000 	str.w	r9, [r0]
 800a440:	4604      	mov	r4, r0
 800a442:	e7e4      	b.n	800a40e <__pow5mult+0x6a>
 800a444:	4638      	mov	r0, r7
 800a446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a44a:	bf00      	nop
 800a44c:	0800b638 	.word	0x0800b638
 800a450:	0800b45d 	.word	0x0800b45d
 800a454:	0800b4e4 	.word	0x0800b4e4

0800a458 <__lshift>:
 800a458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a45c:	460c      	mov	r4, r1
 800a45e:	6849      	ldr	r1, [r1, #4]
 800a460:	6923      	ldr	r3, [r4, #16]
 800a462:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a466:	68a3      	ldr	r3, [r4, #8]
 800a468:	4607      	mov	r7, r0
 800a46a:	4691      	mov	r9, r2
 800a46c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a470:	f108 0601 	add.w	r6, r8, #1
 800a474:	42b3      	cmp	r3, r6
 800a476:	db0b      	blt.n	800a490 <__lshift+0x38>
 800a478:	4638      	mov	r0, r7
 800a47a:	f7ff fddb 	bl	800a034 <_Balloc>
 800a47e:	4605      	mov	r5, r0
 800a480:	b948      	cbnz	r0, 800a496 <__lshift+0x3e>
 800a482:	4602      	mov	r2, r0
 800a484:	4b28      	ldr	r3, [pc, #160]	; (800a528 <__lshift+0xd0>)
 800a486:	4829      	ldr	r0, [pc, #164]	; (800a52c <__lshift+0xd4>)
 800a488:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a48c:	f000 fa1a 	bl	800a8c4 <__assert_func>
 800a490:	3101      	adds	r1, #1
 800a492:	005b      	lsls	r3, r3, #1
 800a494:	e7ee      	b.n	800a474 <__lshift+0x1c>
 800a496:	2300      	movs	r3, #0
 800a498:	f100 0114 	add.w	r1, r0, #20
 800a49c:	f100 0210 	add.w	r2, r0, #16
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	4553      	cmp	r3, sl
 800a4a4:	db33      	blt.n	800a50e <__lshift+0xb6>
 800a4a6:	6920      	ldr	r0, [r4, #16]
 800a4a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4ac:	f104 0314 	add.w	r3, r4, #20
 800a4b0:	f019 091f 	ands.w	r9, r9, #31
 800a4b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4bc:	d02b      	beq.n	800a516 <__lshift+0xbe>
 800a4be:	f1c9 0e20 	rsb	lr, r9, #32
 800a4c2:	468a      	mov	sl, r1
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	6818      	ldr	r0, [r3, #0]
 800a4c8:	fa00 f009 	lsl.w	r0, r0, r9
 800a4cc:	4302      	orrs	r2, r0
 800a4ce:	f84a 2b04 	str.w	r2, [sl], #4
 800a4d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4d6:	459c      	cmp	ip, r3
 800a4d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4dc:	d8f3      	bhi.n	800a4c6 <__lshift+0x6e>
 800a4de:	ebac 0304 	sub.w	r3, ip, r4
 800a4e2:	3b15      	subs	r3, #21
 800a4e4:	f023 0303 	bic.w	r3, r3, #3
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	f104 0015 	add.w	r0, r4, #21
 800a4ee:	4584      	cmp	ip, r0
 800a4f0:	bf38      	it	cc
 800a4f2:	2304      	movcc	r3, #4
 800a4f4:	50ca      	str	r2, [r1, r3]
 800a4f6:	b10a      	cbz	r2, 800a4fc <__lshift+0xa4>
 800a4f8:	f108 0602 	add.w	r6, r8, #2
 800a4fc:	3e01      	subs	r6, #1
 800a4fe:	4638      	mov	r0, r7
 800a500:	612e      	str	r6, [r5, #16]
 800a502:	4621      	mov	r1, r4
 800a504:	f7ff fdd6 	bl	800a0b4 <_Bfree>
 800a508:	4628      	mov	r0, r5
 800a50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a512:	3301      	adds	r3, #1
 800a514:	e7c5      	b.n	800a4a2 <__lshift+0x4a>
 800a516:	3904      	subs	r1, #4
 800a518:	f853 2b04 	ldr.w	r2, [r3], #4
 800a51c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a520:	459c      	cmp	ip, r3
 800a522:	d8f9      	bhi.n	800a518 <__lshift+0xc0>
 800a524:	e7ea      	b.n	800a4fc <__lshift+0xa4>
 800a526:	bf00      	nop
 800a528:	0800b4d3 	.word	0x0800b4d3
 800a52c:	0800b4e4 	.word	0x0800b4e4

0800a530 <__mcmp>:
 800a530:	b530      	push	{r4, r5, lr}
 800a532:	6902      	ldr	r2, [r0, #16]
 800a534:	690c      	ldr	r4, [r1, #16]
 800a536:	1b12      	subs	r2, r2, r4
 800a538:	d10e      	bne.n	800a558 <__mcmp+0x28>
 800a53a:	f100 0314 	add.w	r3, r0, #20
 800a53e:	3114      	adds	r1, #20
 800a540:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a544:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a548:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a54c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a550:	42a5      	cmp	r5, r4
 800a552:	d003      	beq.n	800a55c <__mcmp+0x2c>
 800a554:	d305      	bcc.n	800a562 <__mcmp+0x32>
 800a556:	2201      	movs	r2, #1
 800a558:	4610      	mov	r0, r2
 800a55a:	bd30      	pop	{r4, r5, pc}
 800a55c:	4283      	cmp	r3, r0
 800a55e:	d3f3      	bcc.n	800a548 <__mcmp+0x18>
 800a560:	e7fa      	b.n	800a558 <__mcmp+0x28>
 800a562:	f04f 32ff 	mov.w	r2, #4294967295
 800a566:	e7f7      	b.n	800a558 <__mcmp+0x28>

0800a568 <__mdiff>:
 800a568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	460c      	mov	r4, r1
 800a56e:	4606      	mov	r6, r0
 800a570:	4611      	mov	r1, r2
 800a572:	4620      	mov	r0, r4
 800a574:	4617      	mov	r7, r2
 800a576:	f7ff ffdb 	bl	800a530 <__mcmp>
 800a57a:	1e05      	subs	r5, r0, #0
 800a57c:	d110      	bne.n	800a5a0 <__mdiff+0x38>
 800a57e:	4629      	mov	r1, r5
 800a580:	4630      	mov	r0, r6
 800a582:	f7ff fd57 	bl	800a034 <_Balloc>
 800a586:	b930      	cbnz	r0, 800a596 <__mdiff+0x2e>
 800a588:	4b39      	ldr	r3, [pc, #228]	; (800a670 <__mdiff+0x108>)
 800a58a:	4602      	mov	r2, r0
 800a58c:	f240 2132 	movw	r1, #562	; 0x232
 800a590:	4838      	ldr	r0, [pc, #224]	; (800a674 <__mdiff+0x10c>)
 800a592:	f000 f997 	bl	800a8c4 <__assert_func>
 800a596:	2301      	movs	r3, #1
 800a598:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a59c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a0:	bfa4      	itt	ge
 800a5a2:	463b      	movge	r3, r7
 800a5a4:	4627      	movge	r7, r4
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	6879      	ldr	r1, [r7, #4]
 800a5aa:	bfa6      	itte	ge
 800a5ac:	461c      	movge	r4, r3
 800a5ae:	2500      	movge	r5, #0
 800a5b0:	2501      	movlt	r5, #1
 800a5b2:	f7ff fd3f 	bl	800a034 <_Balloc>
 800a5b6:	b920      	cbnz	r0, 800a5c2 <__mdiff+0x5a>
 800a5b8:	4b2d      	ldr	r3, [pc, #180]	; (800a670 <__mdiff+0x108>)
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a5c0:	e7e6      	b.n	800a590 <__mdiff+0x28>
 800a5c2:	693e      	ldr	r6, [r7, #16]
 800a5c4:	60c5      	str	r5, [r0, #12]
 800a5c6:	6925      	ldr	r5, [r4, #16]
 800a5c8:	f107 0114 	add.w	r1, r7, #20
 800a5cc:	f104 0914 	add.w	r9, r4, #20
 800a5d0:	f100 0e14 	add.w	lr, r0, #20
 800a5d4:	f107 0210 	add.w	r2, r7, #16
 800a5d8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a5dc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a5e0:	46f2      	mov	sl, lr
 800a5e2:	2700      	movs	r7, #0
 800a5e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a5e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a5ec:	fa1f f883 	uxth.w	r8, r3
 800a5f0:	fa17 f78b 	uxtah	r7, r7, fp
 800a5f4:	0c1b      	lsrs	r3, r3, #16
 800a5f6:	eba7 0808 	sub.w	r8, r7, r8
 800a5fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a5fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a602:	fa1f f888 	uxth.w	r8, r8
 800a606:	141f      	asrs	r7, r3, #16
 800a608:	454d      	cmp	r5, r9
 800a60a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a60e:	f84a 3b04 	str.w	r3, [sl], #4
 800a612:	d8e7      	bhi.n	800a5e4 <__mdiff+0x7c>
 800a614:	1b2b      	subs	r3, r5, r4
 800a616:	3b15      	subs	r3, #21
 800a618:	f023 0303 	bic.w	r3, r3, #3
 800a61c:	3304      	adds	r3, #4
 800a61e:	3415      	adds	r4, #21
 800a620:	42a5      	cmp	r5, r4
 800a622:	bf38      	it	cc
 800a624:	2304      	movcc	r3, #4
 800a626:	4419      	add	r1, r3
 800a628:	4473      	add	r3, lr
 800a62a:	469e      	mov	lr, r3
 800a62c:	460d      	mov	r5, r1
 800a62e:	4565      	cmp	r5, ip
 800a630:	d30e      	bcc.n	800a650 <__mdiff+0xe8>
 800a632:	f10c 0203 	add.w	r2, ip, #3
 800a636:	1a52      	subs	r2, r2, r1
 800a638:	f022 0203 	bic.w	r2, r2, #3
 800a63c:	3903      	subs	r1, #3
 800a63e:	458c      	cmp	ip, r1
 800a640:	bf38      	it	cc
 800a642:	2200      	movcc	r2, #0
 800a644:	441a      	add	r2, r3
 800a646:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a64a:	b17b      	cbz	r3, 800a66c <__mdiff+0x104>
 800a64c:	6106      	str	r6, [r0, #16]
 800a64e:	e7a5      	b.n	800a59c <__mdiff+0x34>
 800a650:	f855 8b04 	ldr.w	r8, [r5], #4
 800a654:	fa17 f488 	uxtah	r4, r7, r8
 800a658:	1422      	asrs	r2, r4, #16
 800a65a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a65e:	b2a4      	uxth	r4, r4
 800a660:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a664:	f84e 4b04 	str.w	r4, [lr], #4
 800a668:	1417      	asrs	r7, r2, #16
 800a66a:	e7e0      	b.n	800a62e <__mdiff+0xc6>
 800a66c:	3e01      	subs	r6, #1
 800a66e:	e7ea      	b.n	800a646 <__mdiff+0xde>
 800a670:	0800b4d3 	.word	0x0800b4d3
 800a674:	0800b4e4 	.word	0x0800b4e4

0800a678 <__d2b>:
 800a678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a67c:	4689      	mov	r9, r1
 800a67e:	2101      	movs	r1, #1
 800a680:	ec57 6b10 	vmov	r6, r7, d0
 800a684:	4690      	mov	r8, r2
 800a686:	f7ff fcd5 	bl	800a034 <_Balloc>
 800a68a:	4604      	mov	r4, r0
 800a68c:	b930      	cbnz	r0, 800a69c <__d2b+0x24>
 800a68e:	4602      	mov	r2, r0
 800a690:	4b25      	ldr	r3, [pc, #148]	; (800a728 <__d2b+0xb0>)
 800a692:	4826      	ldr	r0, [pc, #152]	; (800a72c <__d2b+0xb4>)
 800a694:	f240 310a 	movw	r1, #778	; 0x30a
 800a698:	f000 f914 	bl	800a8c4 <__assert_func>
 800a69c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a6a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a6a4:	bb35      	cbnz	r5, 800a6f4 <__d2b+0x7c>
 800a6a6:	2e00      	cmp	r6, #0
 800a6a8:	9301      	str	r3, [sp, #4]
 800a6aa:	d028      	beq.n	800a6fe <__d2b+0x86>
 800a6ac:	4668      	mov	r0, sp
 800a6ae:	9600      	str	r6, [sp, #0]
 800a6b0:	f7ff fd8c 	bl	800a1cc <__lo0bits>
 800a6b4:	9900      	ldr	r1, [sp, #0]
 800a6b6:	b300      	cbz	r0, 800a6fa <__d2b+0x82>
 800a6b8:	9a01      	ldr	r2, [sp, #4]
 800a6ba:	f1c0 0320 	rsb	r3, r0, #32
 800a6be:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c2:	430b      	orrs	r3, r1
 800a6c4:	40c2      	lsrs	r2, r0
 800a6c6:	6163      	str	r3, [r4, #20]
 800a6c8:	9201      	str	r2, [sp, #4]
 800a6ca:	9b01      	ldr	r3, [sp, #4]
 800a6cc:	61a3      	str	r3, [r4, #24]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	bf14      	ite	ne
 800a6d2:	2202      	movne	r2, #2
 800a6d4:	2201      	moveq	r2, #1
 800a6d6:	6122      	str	r2, [r4, #16]
 800a6d8:	b1d5      	cbz	r5, 800a710 <__d2b+0x98>
 800a6da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a6de:	4405      	add	r5, r0
 800a6e0:	f8c9 5000 	str.w	r5, [r9]
 800a6e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6e8:	f8c8 0000 	str.w	r0, [r8]
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	b003      	add	sp, #12
 800a6f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6f8:	e7d5      	b.n	800a6a6 <__d2b+0x2e>
 800a6fa:	6161      	str	r1, [r4, #20]
 800a6fc:	e7e5      	b.n	800a6ca <__d2b+0x52>
 800a6fe:	a801      	add	r0, sp, #4
 800a700:	f7ff fd64 	bl	800a1cc <__lo0bits>
 800a704:	9b01      	ldr	r3, [sp, #4]
 800a706:	6163      	str	r3, [r4, #20]
 800a708:	2201      	movs	r2, #1
 800a70a:	6122      	str	r2, [r4, #16]
 800a70c:	3020      	adds	r0, #32
 800a70e:	e7e3      	b.n	800a6d8 <__d2b+0x60>
 800a710:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a714:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a718:	f8c9 0000 	str.w	r0, [r9]
 800a71c:	6918      	ldr	r0, [r3, #16]
 800a71e:	f7ff fd35 	bl	800a18c <__hi0bits>
 800a722:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a726:	e7df      	b.n	800a6e8 <__d2b+0x70>
 800a728:	0800b4d3 	.word	0x0800b4d3
 800a72c:	0800b4e4 	.word	0x0800b4e4

0800a730 <_calloc_r>:
 800a730:	b513      	push	{r0, r1, r4, lr}
 800a732:	434a      	muls	r2, r1
 800a734:	4611      	mov	r1, r2
 800a736:	9201      	str	r2, [sp, #4]
 800a738:	f000 f85a 	bl	800a7f0 <_malloc_r>
 800a73c:	4604      	mov	r4, r0
 800a73e:	b118      	cbz	r0, 800a748 <_calloc_r+0x18>
 800a740:	9a01      	ldr	r2, [sp, #4]
 800a742:	2100      	movs	r1, #0
 800a744:	f7fe f970 	bl	8008a28 <memset>
 800a748:	4620      	mov	r0, r4
 800a74a:	b002      	add	sp, #8
 800a74c:	bd10      	pop	{r4, pc}
	...

0800a750 <_free_r>:
 800a750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a752:	2900      	cmp	r1, #0
 800a754:	d048      	beq.n	800a7e8 <_free_r+0x98>
 800a756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a75a:	9001      	str	r0, [sp, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f1a1 0404 	sub.w	r4, r1, #4
 800a762:	bfb8      	it	lt
 800a764:	18e4      	addlt	r4, r4, r3
 800a766:	f000 f8ef 	bl	800a948 <__malloc_lock>
 800a76a:	4a20      	ldr	r2, [pc, #128]	; (800a7ec <_free_r+0x9c>)
 800a76c:	9801      	ldr	r0, [sp, #4]
 800a76e:	6813      	ldr	r3, [r2, #0]
 800a770:	4615      	mov	r5, r2
 800a772:	b933      	cbnz	r3, 800a782 <_free_r+0x32>
 800a774:	6063      	str	r3, [r4, #4]
 800a776:	6014      	str	r4, [r2, #0]
 800a778:	b003      	add	sp, #12
 800a77a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a77e:	f000 b8e9 	b.w	800a954 <__malloc_unlock>
 800a782:	42a3      	cmp	r3, r4
 800a784:	d90b      	bls.n	800a79e <_free_r+0x4e>
 800a786:	6821      	ldr	r1, [r4, #0]
 800a788:	1862      	adds	r2, r4, r1
 800a78a:	4293      	cmp	r3, r2
 800a78c:	bf04      	itt	eq
 800a78e:	681a      	ldreq	r2, [r3, #0]
 800a790:	685b      	ldreq	r3, [r3, #4]
 800a792:	6063      	str	r3, [r4, #4]
 800a794:	bf04      	itt	eq
 800a796:	1852      	addeq	r2, r2, r1
 800a798:	6022      	streq	r2, [r4, #0]
 800a79a:	602c      	str	r4, [r5, #0]
 800a79c:	e7ec      	b.n	800a778 <_free_r+0x28>
 800a79e:	461a      	mov	r2, r3
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	b10b      	cbz	r3, 800a7a8 <_free_r+0x58>
 800a7a4:	42a3      	cmp	r3, r4
 800a7a6:	d9fa      	bls.n	800a79e <_free_r+0x4e>
 800a7a8:	6811      	ldr	r1, [r2, #0]
 800a7aa:	1855      	adds	r5, r2, r1
 800a7ac:	42a5      	cmp	r5, r4
 800a7ae:	d10b      	bne.n	800a7c8 <_free_r+0x78>
 800a7b0:	6824      	ldr	r4, [r4, #0]
 800a7b2:	4421      	add	r1, r4
 800a7b4:	1854      	adds	r4, r2, r1
 800a7b6:	42a3      	cmp	r3, r4
 800a7b8:	6011      	str	r1, [r2, #0]
 800a7ba:	d1dd      	bne.n	800a778 <_free_r+0x28>
 800a7bc:	681c      	ldr	r4, [r3, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	6053      	str	r3, [r2, #4]
 800a7c2:	4421      	add	r1, r4
 800a7c4:	6011      	str	r1, [r2, #0]
 800a7c6:	e7d7      	b.n	800a778 <_free_r+0x28>
 800a7c8:	d902      	bls.n	800a7d0 <_free_r+0x80>
 800a7ca:	230c      	movs	r3, #12
 800a7cc:	6003      	str	r3, [r0, #0]
 800a7ce:	e7d3      	b.n	800a778 <_free_r+0x28>
 800a7d0:	6825      	ldr	r5, [r4, #0]
 800a7d2:	1961      	adds	r1, r4, r5
 800a7d4:	428b      	cmp	r3, r1
 800a7d6:	bf04      	itt	eq
 800a7d8:	6819      	ldreq	r1, [r3, #0]
 800a7da:	685b      	ldreq	r3, [r3, #4]
 800a7dc:	6063      	str	r3, [r4, #4]
 800a7de:	bf04      	itt	eq
 800a7e0:	1949      	addeq	r1, r1, r5
 800a7e2:	6021      	streq	r1, [r4, #0]
 800a7e4:	6054      	str	r4, [r2, #4]
 800a7e6:	e7c7      	b.n	800a778 <_free_r+0x28>
 800a7e8:	b003      	add	sp, #12
 800a7ea:	bd30      	pop	{r4, r5, pc}
 800a7ec:	20000204 	.word	0x20000204

0800a7f0 <_malloc_r>:
 800a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f2:	1ccd      	adds	r5, r1, #3
 800a7f4:	f025 0503 	bic.w	r5, r5, #3
 800a7f8:	3508      	adds	r5, #8
 800a7fa:	2d0c      	cmp	r5, #12
 800a7fc:	bf38      	it	cc
 800a7fe:	250c      	movcc	r5, #12
 800a800:	2d00      	cmp	r5, #0
 800a802:	4606      	mov	r6, r0
 800a804:	db01      	blt.n	800a80a <_malloc_r+0x1a>
 800a806:	42a9      	cmp	r1, r5
 800a808:	d903      	bls.n	800a812 <_malloc_r+0x22>
 800a80a:	230c      	movs	r3, #12
 800a80c:	6033      	str	r3, [r6, #0]
 800a80e:	2000      	movs	r0, #0
 800a810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a812:	f000 f899 	bl	800a948 <__malloc_lock>
 800a816:	4921      	ldr	r1, [pc, #132]	; (800a89c <_malloc_r+0xac>)
 800a818:	680a      	ldr	r2, [r1, #0]
 800a81a:	4614      	mov	r4, r2
 800a81c:	b99c      	cbnz	r4, 800a846 <_malloc_r+0x56>
 800a81e:	4f20      	ldr	r7, [pc, #128]	; (800a8a0 <_malloc_r+0xb0>)
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	b923      	cbnz	r3, 800a82e <_malloc_r+0x3e>
 800a824:	4621      	mov	r1, r4
 800a826:	4630      	mov	r0, r6
 800a828:	f000 f83c 	bl	800a8a4 <_sbrk_r>
 800a82c:	6038      	str	r0, [r7, #0]
 800a82e:	4629      	mov	r1, r5
 800a830:	4630      	mov	r0, r6
 800a832:	f000 f837 	bl	800a8a4 <_sbrk_r>
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	d123      	bne.n	800a882 <_malloc_r+0x92>
 800a83a:	230c      	movs	r3, #12
 800a83c:	6033      	str	r3, [r6, #0]
 800a83e:	4630      	mov	r0, r6
 800a840:	f000 f888 	bl	800a954 <__malloc_unlock>
 800a844:	e7e3      	b.n	800a80e <_malloc_r+0x1e>
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	1b5b      	subs	r3, r3, r5
 800a84a:	d417      	bmi.n	800a87c <_malloc_r+0x8c>
 800a84c:	2b0b      	cmp	r3, #11
 800a84e:	d903      	bls.n	800a858 <_malloc_r+0x68>
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	441c      	add	r4, r3
 800a854:	6025      	str	r5, [r4, #0]
 800a856:	e004      	b.n	800a862 <_malloc_r+0x72>
 800a858:	6863      	ldr	r3, [r4, #4]
 800a85a:	42a2      	cmp	r2, r4
 800a85c:	bf0c      	ite	eq
 800a85e:	600b      	streq	r3, [r1, #0]
 800a860:	6053      	strne	r3, [r2, #4]
 800a862:	4630      	mov	r0, r6
 800a864:	f000 f876 	bl	800a954 <__malloc_unlock>
 800a868:	f104 000b 	add.w	r0, r4, #11
 800a86c:	1d23      	adds	r3, r4, #4
 800a86e:	f020 0007 	bic.w	r0, r0, #7
 800a872:	1ac2      	subs	r2, r0, r3
 800a874:	d0cc      	beq.n	800a810 <_malloc_r+0x20>
 800a876:	1a1b      	subs	r3, r3, r0
 800a878:	50a3      	str	r3, [r4, r2]
 800a87a:	e7c9      	b.n	800a810 <_malloc_r+0x20>
 800a87c:	4622      	mov	r2, r4
 800a87e:	6864      	ldr	r4, [r4, #4]
 800a880:	e7cc      	b.n	800a81c <_malloc_r+0x2c>
 800a882:	1cc4      	adds	r4, r0, #3
 800a884:	f024 0403 	bic.w	r4, r4, #3
 800a888:	42a0      	cmp	r0, r4
 800a88a:	d0e3      	beq.n	800a854 <_malloc_r+0x64>
 800a88c:	1a21      	subs	r1, r4, r0
 800a88e:	4630      	mov	r0, r6
 800a890:	f000 f808 	bl	800a8a4 <_sbrk_r>
 800a894:	3001      	adds	r0, #1
 800a896:	d1dd      	bne.n	800a854 <_malloc_r+0x64>
 800a898:	e7cf      	b.n	800a83a <_malloc_r+0x4a>
 800a89a:	bf00      	nop
 800a89c:	20000204 	.word	0x20000204
 800a8a0:	20000208 	.word	0x20000208

0800a8a4 <_sbrk_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4d06      	ldr	r5, [pc, #24]	; (800a8c0 <_sbrk_r+0x1c>)
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	602b      	str	r3, [r5, #0]
 800a8b0:	f7f8 f9c4 	bl	8002c3c <_sbrk>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d102      	bne.n	800a8be <_sbrk_r+0x1a>
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	b103      	cbz	r3, 800a8be <_sbrk_r+0x1a>
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	2000050c 	.word	0x2000050c

0800a8c4 <__assert_func>:
 800a8c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8c6:	4614      	mov	r4, r2
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <__assert_func+0x2c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4605      	mov	r5, r0
 800a8d0:	68d8      	ldr	r0, [r3, #12]
 800a8d2:	b14c      	cbz	r4, 800a8e8 <__assert_func+0x24>
 800a8d4:	4b07      	ldr	r3, [pc, #28]	; (800a8f4 <__assert_func+0x30>)
 800a8d6:	9100      	str	r1, [sp, #0]
 800a8d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8dc:	4906      	ldr	r1, [pc, #24]	; (800a8f8 <__assert_func+0x34>)
 800a8de:	462b      	mov	r3, r5
 800a8e0:	f000 f80e 	bl	800a900 <fiprintf>
 800a8e4:	f000 fa64 	bl	800adb0 <abort>
 800a8e8:	4b04      	ldr	r3, [pc, #16]	; (800a8fc <__assert_func+0x38>)
 800a8ea:	461c      	mov	r4, r3
 800a8ec:	e7f3      	b.n	800a8d6 <__assert_func+0x12>
 800a8ee:	bf00      	nop
 800a8f0:	20000010 	.word	0x20000010
 800a8f4:	0800b644 	.word	0x0800b644
 800a8f8:	0800b651 	.word	0x0800b651
 800a8fc:	0800b67f 	.word	0x0800b67f

0800a900 <fiprintf>:
 800a900:	b40e      	push	{r1, r2, r3}
 800a902:	b503      	push	{r0, r1, lr}
 800a904:	4601      	mov	r1, r0
 800a906:	ab03      	add	r3, sp, #12
 800a908:	4805      	ldr	r0, [pc, #20]	; (800a920 <fiprintf+0x20>)
 800a90a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a90e:	6800      	ldr	r0, [r0, #0]
 800a910:	9301      	str	r3, [sp, #4]
 800a912:	f000 f84f 	bl	800a9b4 <_vfiprintf_r>
 800a916:	b002      	add	sp, #8
 800a918:	f85d eb04 	ldr.w	lr, [sp], #4
 800a91c:	b003      	add	sp, #12
 800a91e:	4770      	bx	lr
 800a920:	20000010 	.word	0x20000010

0800a924 <__ascii_mbtowc>:
 800a924:	b082      	sub	sp, #8
 800a926:	b901      	cbnz	r1, 800a92a <__ascii_mbtowc+0x6>
 800a928:	a901      	add	r1, sp, #4
 800a92a:	b142      	cbz	r2, 800a93e <__ascii_mbtowc+0x1a>
 800a92c:	b14b      	cbz	r3, 800a942 <__ascii_mbtowc+0x1e>
 800a92e:	7813      	ldrb	r3, [r2, #0]
 800a930:	600b      	str	r3, [r1, #0]
 800a932:	7812      	ldrb	r2, [r2, #0]
 800a934:	1e10      	subs	r0, r2, #0
 800a936:	bf18      	it	ne
 800a938:	2001      	movne	r0, #1
 800a93a:	b002      	add	sp, #8
 800a93c:	4770      	bx	lr
 800a93e:	4610      	mov	r0, r2
 800a940:	e7fb      	b.n	800a93a <__ascii_mbtowc+0x16>
 800a942:	f06f 0001 	mvn.w	r0, #1
 800a946:	e7f8      	b.n	800a93a <__ascii_mbtowc+0x16>

0800a948 <__malloc_lock>:
 800a948:	4801      	ldr	r0, [pc, #4]	; (800a950 <__malloc_lock+0x8>)
 800a94a:	f000 bbf1 	b.w	800b130 <__retarget_lock_acquire_recursive>
 800a94e:	bf00      	nop
 800a950:	20000514 	.word	0x20000514

0800a954 <__malloc_unlock>:
 800a954:	4801      	ldr	r0, [pc, #4]	; (800a95c <__malloc_unlock+0x8>)
 800a956:	f000 bbec 	b.w	800b132 <__retarget_lock_release_recursive>
 800a95a:	bf00      	nop
 800a95c:	20000514 	.word	0x20000514

0800a960 <__sfputc_r>:
 800a960:	6893      	ldr	r3, [r2, #8]
 800a962:	3b01      	subs	r3, #1
 800a964:	2b00      	cmp	r3, #0
 800a966:	b410      	push	{r4}
 800a968:	6093      	str	r3, [r2, #8]
 800a96a:	da08      	bge.n	800a97e <__sfputc_r+0x1e>
 800a96c:	6994      	ldr	r4, [r2, #24]
 800a96e:	42a3      	cmp	r3, r4
 800a970:	db01      	blt.n	800a976 <__sfputc_r+0x16>
 800a972:	290a      	cmp	r1, #10
 800a974:	d103      	bne.n	800a97e <__sfputc_r+0x1e>
 800a976:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a97a:	f000 b94b 	b.w	800ac14 <__swbuf_r>
 800a97e:	6813      	ldr	r3, [r2, #0]
 800a980:	1c58      	adds	r0, r3, #1
 800a982:	6010      	str	r0, [r2, #0]
 800a984:	7019      	strb	r1, [r3, #0]
 800a986:	4608      	mov	r0, r1
 800a988:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <__sfputs_r>:
 800a98e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a990:	4606      	mov	r6, r0
 800a992:	460f      	mov	r7, r1
 800a994:	4614      	mov	r4, r2
 800a996:	18d5      	adds	r5, r2, r3
 800a998:	42ac      	cmp	r4, r5
 800a99a:	d101      	bne.n	800a9a0 <__sfputs_r+0x12>
 800a99c:	2000      	movs	r0, #0
 800a99e:	e007      	b.n	800a9b0 <__sfputs_r+0x22>
 800a9a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9a4:	463a      	mov	r2, r7
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	f7ff ffda 	bl	800a960 <__sfputc_r>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d1f3      	bne.n	800a998 <__sfputs_r+0xa>
 800a9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9b4 <_vfiprintf_r>:
 800a9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b8:	460d      	mov	r5, r1
 800a9ba:	b09d      	sub	sp, #116	; 0x74
 800a9bc:	4614      	mov	r4, r2
 800a9be:	4698      	mov	r8, r3
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	b118      	cbz	r0, 800a9cc <_vfiprintf_r+0x18>
 800a9c4:	6983      	ldr	r3, [r0, #24]
 800a9c6:	b90b      	cbnz	r3, 800a9cc <_vfiprintf_r+0x18>
 800a9c8:	f000 fb14 	bl	800aff4 <__sinit>
 800a9cc:	4b89      	ldr	r3, [pc, #548]	; (800abf4 <_vfiprintf_r+0x240>)
 800a9ce:	429d      	cmp	r5, r3
 800a9d0:	d11b      	bne.n	800aa0a <_vfiprintf_r+0x56>
 800a9d2:	6875      	ldr	r5, [r6, #4]
 800a9d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9d6:	07d9      	lsls	r1, r3, #31
 800a9d8:	d405      	bmi.n	800a9e6 <_vfiprintf_r+0x32>
 800a9da:	89ab      	ldrh	r3, [r5, #12]
 800a9dc:	059a      	lsls	r2, r3, #22
 800a9de:	d402      	bmi.n	800a9e6 <_vfiprintf_r+0x32>
 800a9e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9e2:	f000 fba5 	bl	800b130 <__retarget_lock_acquire_recursive>
 800a9e6:	89ab      	ldrh	r3, [r5, #12]
 800a9e8:	071b      	lsls	r3, r3, #28
 800a9ea:	d501      	bpl.n	800a9f0 <_vfiprintf_r+0x3c>
 800a9ec:	692b      	ldr	r3, [r5, #16]
 800a9ee:	b9eb      	cbnz	r3, 800aa2c <_vfiprintf_r+0x78>
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f000 f96e 	bl	800acd4 <__swsetup_r>
 800a9f8:	b1c0      	cbz	r0, 800aa2c <_vfiprintf_r+0x78>
 800a9fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9fc:	07dc      	lsls	r4, r3, #31
 800a9fe:	d50e      	bpl.n	800aa1e <_vfiprintf_r+0x6a>
 800aa00:	f04f 30ff 	mov.w	r0, #4294967295
 800aa04:	b01d      	add	sp, #116	; 0x74
 800aa06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0a:	4b7b      	ldr	r3, [pc, #492]	; (800abf8 <_vfiprintf_r+0x244>)
 800aa0c:	429d      	cmp	r5, r3
 800aa0e:	d101      	bne.n	800aa14 <_vfiprintf_r+0x60>
 800aa10:	68b5      	ldr	r5, [r6, #8]
 800aa12:	e7df      	b.n	800a9d4 <_vfiprintf_r+0x20>
 800aa14:	4b79      	ldr	r3, [pc, #484]	; (800abfc <_vfiprintf_r+0x248>)
 800aa16:	429d      	cmp	r5, r3
 800aa18:	bf08      	it	eq
 800aa1a:	68f5      	ldreq	r5, [r6, #12]
 800aa1c:	e7da      	b.n	800a9d4 <_vfiprintf_r+0x20>
 800aa1e:	89ab      	ldrh	r3, [r5, #12]
 800aa20:	0598      	lsls	r0, r3, #22
 800aa22:	d4ed      	bmi.n	800aa00 <_vfiprintf_r+0x4c>
 800aa24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa26:	f000 fb84 	bl	800b132 <__retarget_lock_release_recursive>
 800aa2a:	e7e9      	b.n	800aa00 <_vfiprintf_r+0x4c>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa30:	2320      	movs	r3, #32
 800aa32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa36:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa3a:	2330      	movs	r3, #48	; 0x30
 800aa3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac00 <_vfiprintf_r+0x24c>
 800aa40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa44:	f04f 0901 	mov.w	r9, #1
 800aa48:	4623      	mov	r3, r4
 800aa4a:	469a      	mov	sl, r3
 800aa4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa50:	b10a      	cbz	r2, 800aa56 <_vfiprintf_r+0xa2>
 800aa52:	2a25      	cmp	r2, #37	; 0x25
 800aa54:	d1f9      	bne.n	800aa4a <_vfiprintf_r+0x96>
 800aa56:	ebba 0b04 	subs.w	fp, sl, r4
 800aa5a:	d00b      	beq.n	800aa74 <_vfiprintf_r+0xc0>
 800aa5c:	465b      	mov	r3, fp
 800aa5e:	4622      	mov	r2, r4
 800aa60:	4629      	mov	r1, r5
 800aa62:	4630      	mov	r0, r6
 800aa64:	f7ff ff93 	bl	800a98e <__sfputs_r>
 800aa68:	3001      	adds	r0, #1
 800aa6a:	f000 80aa 	beq.w	800abc2 <_vfiprintf_r+0x20e>
 800aa6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa70:	445a      	add	r2, fp
 800aa72:	9209      	str	r2, [sp, #36]	; 0x24
 800aa74:	f89a 3000 	ldrb.w	r3, [sl]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 80a2 	beq.w	800abc2 <_vfiprintf_r+0x20e>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	f04f 32ff 	mov.w	r2, #4294967295
 800aa84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa88:	f10a 0a01 	add.w	sl, sl, #1
 800aa8c:	9304      	str	r3, [sp, #16]
 800aa8e:	9307      	str	r3, [sp, #28]
 800aa90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa94:	931a      	str	r3, [sp, #104]	; 0x68
 800aa96:	4654      	mov	r4, sl
 800aa98:	2205      	movs	r2, #5
 800aa9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa9e:	4858      	ldr	r0, [pc, #352]	; (800ac00 <_vfiprintf_r+0x24c>)
 800aaa0:	f7f5 fba6 	bl	80001f0 <memchr>
 800aaa4:	9a04      	ldr	r2, [sp, #16]
 800aaa6:	b9d8      	cbnz	r0, 800aae0 <_vfiprintf_r+0x12c>
 800aaa8:	06d1      	lsls	r1, r2, #27
 800aaaa:	bf44      	itt	mi
 800aaac:	2320      	movmi	r3, #32
 800aaae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aab2:	0713      	lsls	r3, r2, #28
 800aab4:	bf44      	itt	mi
 800aab6:	232b      	movmi	r3, #43	; 0x2b
 800aab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aabc:	f89a 3000 	ldrb.w	r3, [sl]
 800aac0:	2b2a      	cmp	r3, #42	; 0x2a
 800aac2:	d015      	beq.n	800aaf0 <_vfiprintf_r+0x13c>
 800aac4:	9a07      	ldr	r2, [sp, #28]
 800aac6:	4654      	mov	r4, sl
 800aac8:	2000      	movs	r0, #0
 800aaca:	f04f 0c0a 	mov.w	ip, #10
 800aace:	4621      	mov	r1, r4
 800aad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aad4:	3b30      	subs	r3, #48	; 0x30
 800aad6:	2b09      	cmp	r3, #9
 800aad8:	d94e      	bls.n	800ab78 <_vfiprintf_r+0x1c4>
 800aada:	b1b0      	cbz	r0, 800ab0a <_vfiprintf_r+0x156>
 800aadc:	9207      	str	r2, [sp, #28]
 800aade:	e014      	b.n	800ab0a <_vfiprintf_r+0x156>
 800aae0:	eba0 0308 	sub.w	r3, r0, r8
 800aae4:	fa09 f303 	lsl.w	r3, r9, r3
 800aae8:	4313      	orrs	r3, r2
 800aaea:	9304      	str	r3, [sp, #16]
 800aaec:	46a2      	mov	sl, r4
 800aaee:	e7d2      	b.n	800aa96 <_vfiprintf_r+0xe2>
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	1d19      	adds	r1, r3, #4
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	9103      	str	r1, [sp, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	bfbb      	ittet	lt
 800aafc:	425b      	neglt	r3, r3
 800aafe:	f042 0202 	orrlt.w	r2, r2, #2
 800ab02:	9307      	strge	r3, [sp, #28]
 800ab04:	9307      	strlt	r3, [sp, #28]
 800ab06:	bfb8      	it	lt
 800ab08:	9204      	strlt	r2, [sp, #16]
 800ab0a:	7823      	ldrb	r3, [r4, #0]
 800ab0c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab0e:	d10c      	bne.n	800ab2a <_vfiprintf_r+0x176>
 800ab10:	7863      	ldrb	r3, [r4, #1]
 800ab12:	2b2a      	cmp	r3, #42	; 0x2a
 800ab14:	d135      	bne.n	800ab82 <_vfiprintf_r+0x1ce>
 800ab16:	9b03      	ldr	r3, [sp, #12]
 800ab18:	1d1a      	adds	r2, r3, #4
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	9203      	str	r2, [sp, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	bfb8      	it	lt
 800ab22:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab26:	3402      	adds	r4, #2
 800ab28:	9305      	str	r3, [sp, #20]
 800ab2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac10 <_vfiprintf_r+0x25c>
 800ab2e:	7821      	ldrb	r1, [r4, #0]
 800ab30:	2203      	movs	r2, #3
 800ab32:	4650      	mov	r0, sl
 800ab34:	f7f5 fb5c 	bl	80001f0 <memchr>
 800ab38:	b140      	cbz	r0, 800ab4c <_vfiprintf_r+0x198>
 800ab3a:	2340      	movs	r3, #64	; 0x40
 800ab3c:	eba0 000a 	sub.w	r0, r0, sl
 800ab40:	fa03 f000 	lsl.w	r0, r3, r0
 800ab44:	9b04      	ldr	r3, [sp, #16]
 800ab46:	4303      	orrs	r3, r0
 800ab48:	3401      	adds	r4, #1
 800ab4a:	9304      	str	r3, [sp, #16]
 800ab4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab50:	482c      	ldr	r0, [pc, #176]	; (800ac04 <_vfiprintf_r+0x250>)
 800ab52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab56:	2206      	movs	r2, #6
 800ab58:	f7f5 fb4a 	bl	80001f0 <memchr>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d03f      	beq.n	800abe0 <_vfiprintf_r+0x22c>
 800ab60:	4b29      	ldr	r3, [pc, #164]	; (800ac08 <_vfiprintf_r+0x254>)
 800ab62:	bb1b      	cbnz	r3, 800abac <_vfiprintf_r+0x1f8>
 800ab64:	9b03      	ldr	r3, [sp, #12]
 800ab66:	3307      	adds	r3, #7
 800ab68:	f023 0307 	bic.w	r3, r3, #7
 800ab6c:	3308      	adds	r3, #8
 800ab6e:	9303      	str	r3, [sp, #12]
 800ab70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab72:	443b      	add	r3, r7
 800ab74:	9309      	str	r3, [sp, #36]	; 0x24
 800ab76:	e767      	b.n	800aa48 <_vfiprintf_r+0x94>
 800ab78:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	2001      	movs	r0, #1
 800ab80:	e7a5      	b.n	800aace <_vfiprintf_r+0x11a>
 800ab82:	2300      	movs	r3, #0
 800ab84:	3401      	adds	r4, #1
 800ab86:	9305      	str	r3, [sp, #20]
 800ab88:	4619      	mov	r1, r3
 800ab8a:	f04f 0c0a 	mov.w	ip, #10
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab94:	3a30      	subs	r2, #48	; 0x30
 800ab96:	2a09      	cmp	r2, #9
 800ab98:	d903      	bls.n	800aba2 <_vfiprintf_r+0x1ee>
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d0c5      	beq.n	800ab2a <_vfiprintf_r+0x176>
 800ab9e:	9105      	str	r1, [sp, #20]
 800aba0:	e7c3      	b.n	800ab2a <_vfiprintf_r+0x176>
 800aba2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aba6:	4604      	mov	r4, r0
 800aba8:	2301      	movs	r3, #1
 800abaa:	e7f0      	b.n	800ab8e <_vfiprintf_r+0x1da>
 800abac:	ab03      	add	r3, sp, #12
 800abae:	9300      	str	r3, [sp, #0]
 800abb0:	462a      	mov	r2, r5
 800abb2:	4b16      	ldr	r3, [pc, #88]	; (800ac0c <_vfiprintf_r+0x258>)
 800abb4:	a904      	add	r1, sp, #16
 800abb6:	4630      	mov	r0, r6
 800abb8:	f7fd ffde 	bl	8008b78 <_printf_float>
 800abbc:	4607      	mov	r7, r0
 800abbe:	1c78      	adds	r0, r7, #1
 800abc0:	d1d6      	bne.n	800ab70 <_vfiprintf_r+0x1bc>
 800abc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abc4:	07d9      	lsls	r1, r3, #31
 800abc6:	d405      	bmi.n	800abd4 <_vfiprintf_r+0x220>
 800abc8:	89ab      	ldrh	r3, [r5, #12]
 800abca:	059a      	lsls	r2, r3, #22
 800abcc:	d402      	bmi.n	800abd4 <_vfiprintf_r+0x220>
 800abce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abd0:	f000 faaf 	bl	800b132 <__retarget_lock_release_recursive>
 800abd4:	89ab      	ldrh	r3, [r5, #12]
 800abd6:	065b      	lsls	r3, r3, #25
 800abd8:	f53f af12 	bmi.w	800aa00 <_vfiprintf_r+0x4c>
 800abdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abde:	e711      	b.n	800aa04 <_vfiprintf_r+0x50>
 800abe0:	ab03      	add	r3, sp, #12
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	462a      	mov	r2, r5
 800abe6:	4b09      	ldr	r3, [pc, #36]	; (800ac0c <_vfiprintf_r+0x258>)
 800abe8:	a904      	add	r1, sp, #16
 800abea:	4630      	mov	r0, r6
 800abec:	f7fe fa68 	bl	80090c0 <_printf_i>
 800abf0:	e7e4      	b.n	800abbc <_vfiprintf_r+0x208>
 800abf2:	bf00      	nop
 800abf4:	0800b7bc 	.word	0x0800b7bc
 800abf8:	0800b7dc 	.word	0x0800b7dc
 800abfc:	0800b79c 	.word	0x0800b79c
 800ac00:	0800b68a 	.word	0x0800b68a
 800ac04:	0800b694 	.word	0x0800b694
 800ac08:	08008b79 	.word	0x08008b79
 800ac0c:	0800a98f 	.word	0x0800a98f
 800ac10:	0800b690 	.word	0x0800b690

0800ac14 <__swbuf_r>:
 800ac14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac16:	460e      	mov	r6, r1
 800ac18:	4614      	mov	r4, r2
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	b118      	cbz	r0, 800ac26 <__swbuf_r+0x12>
 800ac1e:	6983      	ldr	r3, [r0, #24]
 800ac20:	b90b      	cbnz	r3, 800ac26 <__swbuf_r+0x12>
 800ac22:	f000 f9e7 	bl	800aff4 <__sinit>
 800ac26:	4b21      	ldr	r3, [pc, #132]	; (800acac <__swbuf_r+0x98>)
 800ac28:	429c      	cmp	r4, r3
 800ac2a:	d12b      	bne.n	800ac84 <__swbuf_r+0x70>
 800ac2c:	686c      	ldr	r4, [r5, #4]
 800ac2e:	69a3      	ldr	r3, [r4, #24]
 800ac30:	60a3      	str	r3, [r4, #8]
 800ac32:	89a3      	ldrh	r3, [r4, #12]
 800ac34:	071a      	lsls	r2, r3, #28
 800ac36:	d52f      	bpl.n	800ac98 <__swbuf_r+0x84>
 800ac38:	6923      	ldr	r3, [r4, #16]
 800ac3a:	b36b      	cbz	r3, 800ac98 <__swbuf_r+0x84>
 800ac3c:	6923      	ldr	r3, [r4, #16]
 800ac3e:	6820      	ldr	r0, [r4, #0]
 800ac40:	1ac0      	subs	r0, r0, r3
 800ac42:	6963      	ldr	r3, [r4, #20]
 800ac44:	b2f6      	uxtb	r6, r6
 800ac46:	4283      	cmp	r3, r0
 800ac48:	4637      	mov	r7, r6
 800ac4a:	dc04      	bgt.n	800ac56 <__swbuf_r+0x42>
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	4628      	mov	r0, r5
 800ac50:	f000 f93c 	bl	800aecc <_fflush_r>
 800ac54:	bb30      	cbnz	r0, 800aca4 <__swbuf_r+0x90>
 800ac56:	68a3      	ldr	r3, [r4, #8]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	60a3      	str	r3, [r4, #8]
 800ac5c:	6823      	ldr	r3, [r4, #0]
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	6022      	str	r2, [r4, #0]
 800ac62:	701e      	strb	r6, [r3, #0]
 800ac64:	6963      	ldr	r3, [r4, #20]
 800ac66:	3001      	adds	r0, #1
 800ac68:	4283      	cmp	r3, r0
 800ac6a:	d004      	beq.n	800ac76 <__swbuf_r+0x62>
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	07db      	lsls	r3, r3, #31
 800ac70:	d506      	bpl.n	800ac80 <__swbuf_r+0x6c>
 800ac72:	2e0a      	cmp	r6, #10
 800ac74:	d104      	bne.n	800ac80 <__swbuf_r+0x6c>
 800ac76:	4621      	mov	r1, r4
 800ac78:	4628      	mov	r0, r5
 800ac7a:	f000 f927 	bl	800aecc <_fflush_r>
 800ac7e:	b988      	cbnz	r0, 800aca4 <__swbuf_r+0x90>
 800ac80:	4638      	mov	r0, r7
 800ac82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac84:	4b0a      	ldr	r3, [pc, #40]	; (800acb0 <__swbuf_r+0x9c>)
 800ac86:	429c      	cmp	r4, r3
 800ac88:	d101      	bne.n	800ac8e <__swbuf_r+0x7a>
 800ac8a:	68ac      	ldr	r4, [r5, #8]
 800ac8c:	e7cf      	b.n	800ac2e <__swbuf_r+0x1a>
 800ac8e:	4b09      	ldr	r3, [pc, #36]	; (800acb4 <__swbuf_r+0xa0>)
 800ac90:	429c      	cmp	r4, r3
 800ac92:	bf08      	it	eq
 800ac94:	68ec      	ldreq	r4, [r5, #12]
 800ac96:	e7ca      	b.n	800ac2e <__swbuf_r+0x1a>
 800ac98:	4621      	mov	r1, r4
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	f000 f81a 	bl	800acd4 <__swsetup_r>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d0cb      	beq.n	800ac3c <__swbuf_r+0x28>
 800aca4:	f04f 37ff 	mov.w	r7, #4294967295
 800aca8:	e7ea      	b.n	800ac80 <__swbuf_r+0x6c>
 800acaa:	bf00      	nop
 800acac:	0800b7bc 	.word	0x0800b7bc
 800acb0:	0800b7dc 	.word	0x0800b7dc
 800acb4:	0800b79c 	.word	0x0800b79c

0800acb8 <__ascii_wctomb>:
 800acb8:	b149      	cbz	r1, 800acce <__ascii_wctomb+0x16>
 800acba:	2aff      	cmp	r2, #255	; 0xff
 800acbc:	bf85      	ittet	hi
 800acbe:	238a      	movhi	r3, #138	; 0x8a
 800acc0:	6003      	strhi	r3, [r0, #0]
 800acc2:	700a      	strbls	r2, [r1, #0]
 800acc4:	f04f 30ff 	movhi.w	r0, #4294967295
 800acc8:	bf98      	it	ls
 800acca:	2001      	movls	r0, #1
 800accc:	4770      	bx	lr
 800acce:	4608      	mov	r0, r1
 800acd0:	4770      	bx	lr
	...

0800acd4 <__swsetup_r>:
 800acd4:	4b32      	ldr	r3, [pc, #200]	; (800ada0 <__swsetup_r+0xcc>)
 800acd6:	b570      	push	{r4, r5, r6, lr}
 800acd8:	681d      	ldr	r5, [r3, #0]
 800acda:	4606      	mov	r6, r0
 800acdc:	460c      	mov	r4, r1
 800acde:	b125      	cbz	r5, 800acea <__swsetup_r+0x16>
 800ace0:	69ab      	ldr	r3, [r5, #24]
 800ace2:	b913      	cbnz	r3, 800acea <__swsetup_r+0x16>
 800ace4:	4628      	mov	r0, r5
 800ace6:	f000 f985 	bl	800aff4 <__sinit>
 800acea:	4b2e      	ldr	r3, [pc, #184]	; (800ada4 <__swsetup_r+0xd0>)
 800acec:	429c      	cmp	r4, r3
 800acee:	d10f      	bne.n	800ad10 <__swsetup_r+0x3c>
 800acf0:	686c      	ldr	r4, [r5, #4]
 800acf2:	89a3      	ldrh	r3, [r4, #12]
 800acf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acf8:	0719      	lsls	r1, r3, #28
 800acfa:	d42c      	bmi.n	800ad56 <__swsetup_r+0x82>
 800acfc:	06dd      	lsls	r5, r3, #27
 800acfe:	d411      	bmi.n	800ad24 <__swsetup_r+0x50>
 800ad00:	2309      	movs	r3, #9
 800ad02:	6033      	str	r3, [r6, #0]
 800ad04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad08:	81a3      	strh	r3, [r4, #12]
 800ad0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0e:	e03e      	b.n	800ad8e <__swsetup_r+0xba>
 800ad10:	4b25      	ldr	r3, [pc, #148]	; (800ada8 <__swsetup_r+0xd4>)
 800ad12:	429c      	cmp	r4, r3
 800ad14:	d101      	bne.n	800ad1a <__swsetup_r+0x46>
 800ad16:	68ac      	ldr	r4, [r5, #8]
 800ad18:	e7eb      	b.n	800acf2 <__swsetup_r+0x1e>
 800ad1a:	4b24      	ldr	r3, [pc, #144]	; (800adac <__swsetup_r+0xd8>)
 800ad1c:	429c      	cmp	r4, r3
 800ad1e:	bf08      	it	eq
 800ad20:	68ec      	ldreq	r4, [r5, #12]
 800ad22:	e7e6      	b.n	800acf2 <__swsetup_r+0x1e>
 800ad24:	0758      	lsls	r0, r3, #29
 800ad26:	d512      	bpl.n	800ad4e <__swsetup_r+0x7a>
 800ad28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad2a:	b141      	cbz	r1, 800ad3e <__swsetup_r+0x6a>
 800ad2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad30:	4299      	cmp	r1, r3
 800ad32:	d002      	beq.n	800ad3a <__swsetup_r+0x66>
 800ad34:	4630      	mov	r0, r6
 800ad36:	f7ff fd0b 	bl	800a750 <_free_r>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	6363      	str	r3, [r4, #52]	; 0x34
 800ad3e:	89a3      	ldrh	r3, [r4, #12]
 800ad40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad44:	81a3      	strh	r3, [r4, #12]
 800ad46:	2300      	movs	r3, #0
 800ad48:	6063      	str	r3, [r4, #4]
 800ad4a:	6923      	ldr	r3, [r4, #16]
 800ad4c:	6023      	str	r3, [r4, #0]
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	f043 0308 	orr.w	r3, r3, #8
 800ad54:	81a3      	strh	r3, [r4, #12]
 800ad56:	6923      	ldr	r3, [r4, #16]
 800ad58:	b94b      	cbnz	r3, 800ad6e <__swsetup_r+0x9a>
 800ad5a:	89a3      	ldrh	r3, [r4, #12]
 800ad5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad64:	d003      	beq.n	800ad6e <__swsetup_r+0x9a>
 800ad66:	4621      	mov	r1, r4
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f000 fa07 	bl	800b17c <__smakebuf_r>
 800ad6e:	89a0      	ldrh	r0, [r4, #12]
 800ad70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad74:	f010 0301 	ands.w	r3, r0, #1
 800ad78:	d00a      	beq.n	800ad90 <__swsetup_r+0xbc>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60a3      	str	r3, [r4, #8]
 800ad7e:	6963      	ldr	r3, [r4, #20]
 800ad80:	425b      	negs	r3, r3
 800ad82:	61a3      	str	r3, [r4, #24]
 800ad84:	6923      	ldr	r3, [r4, #16]
 800ad86:	b943      	cbnz	r3, 800ad9a <__swsetup_r+0xc6>
 800ad88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad8c:	d1ba      	bne.n	800ad04 <__swsetup_r+0x30>
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}
 800ad90:	0781      	lsls	r1, r0, #30
 800ad92:	bf58      	it	pl
 800ad94:	6963      	ldrpl	r3, [r4, #20]
 800ad96:	60a3      	str	r3, [r4, #8]
 800ad98:	e7f4      	b.n	800ad84 <__swsetup_r+0xb0>
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	e7f7      	b.n	800ad8e <__swsetup_r+0xba>
 800ad9e:	bf00      	nop
 800ada0:	20000010 	.word	0x20000010
 800ada4:	0800b7bc 	.word	0x0800b7bc
 800ada8:	0800b7dc 	.word	0x0800b7dc
 800adac:	0800b79c 	.word	0x0800b79c

0800adb0 <abort>:
 800adb0:	b508      	push	{r3, lr}
 800adb2:	2006      	movs	r0, #6
 800adb4:	f000 fa4a 	bl	800b24c <raise>
 800adb8:	2001      	movs	r0, #1
 800adba:	f7f7 fec7 	bl	8002b4c <_exit>
	...

0800adc0 <__sflush_r>:
 800adc0:	898a      	ldrh	r2, [r1, #12]
 800adc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc6:	4605      	mov	r5, r0
 800adc8:	0710      	lsls	r0, r2, #28
 800adca:	460c      	mov	r4, r1
 800adcc:	d458      	bmi.n	800ae80 <__sflush_r+0xc0>
 800adce:	684b      	ldr	r3, [r1, #4]
 800add0:	2b00      	cmp	r3, #0
 800add2:	dc05      	bgt.n	800ade0 <__sflush_r+0x20>
 800add4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800add6:	2b00      	cmp	r3, #0
 800add8:	dc02      	bgt.n	800ade0 <__sflush_r+0x20>
 800adda:	2000      	movs	r0, #0
 800addc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ade2:	2e00      	cmp	r6, #0
 800ade4:	d0f9      	beq.n	800adda <__sflush_r+0x1a>
 800ade6:	2300      	movs	r3, #0
 800ade8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adec:	682f      	ldr	r7, [r5, #0]
 800adee:	602b      	str	r3, [r5, #0]
 800adf0:	d032      	beq.n	800ae58 <__sflush_r+0x98>
 800adf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	075a      	lsls	r2, r3, #29
 800adf8:	d505      	bpl.n	800ae06 <__sflush_r+0x46>
 800adfa:	6863      	ldr	r3, [r4, #4]
 800adfc:	1ac0      	subs	r0, r0, r3
 800adfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae00:	b10b      	cbz	r3, 800ae06 <__sflush_r+0x46>
 800ae02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae04:	1ac0      	subs	r0, r0, r3
 800ae06:	2300      	movs	r3, #0
 800ae08:	4602      	mov	r2, r0
 800ae0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae0c:	6a21      	ldr	r1, [r4, #32]
 800ae0e:	4628      	mov	r0, r5
 800ae10:	47b0      	blx	r6
 800ae12:	1c43      	adds	r3, r0, #1
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	d106      	bne.n	800ae26 <__sflush_r+0x66>
 800ae18:	6829      	ldr	r1, [r5, #0]
 800ae1a:	291d      	cmp	r1, #29
 800ae1c:	d82c      	bhi.n	800ae78 <__sflush_r+0xb8>
 800ae1e:	4a2a      	ldr	r2, [pc, #168]	; (800aec8 <__sflush_r+0x108>)
 800ae20:	40ca      	lsrs	r2, r1
 800ae22:	07d6      	lsls	r6, r2, #31
 800ae24:	d528      	bpl.n	800ae78 <__sflush_r+0xb8>
 800ae26:	2200      	movs	r2, #0
 800ae28:	6062      	str	r2, [r4, #4]
 800ae2a:	04d9      	lsls	r1, r3, #19
 800ae2c:	6922      	ldr	r2, [r4, #16]
 800ae2e:	6022      	str	r2, [r4, #0]
 800ae30:	d504      	bpl.n	800ae3c <__sflush_r+0x7c>
 800ae32:	1c42      	adds	r2, r0, #1
 800ae34:	d101      	bne.n	800ae3a <__sflush_r+0x7a>
 800ae36:	682b      	ldr	r3, [r5, #0]
 800ae38:	b903      	cbnz	r3, 800ae3c <__sflush_r+0x7c>
 800ae3a:	6560      	str	r0, [r4, #84]	; 0x54
 800ae3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae3e:	602f      	str	r7, [r5, #0]
 800ae40:	2900      	cmp	r1, #0
 800ae42:	d0ca      	beq.n	800adda <__sflush_r+0x1a>
 800ae44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae48:	4299      	cmp	r1, r3
 800ae4a:	d002      	beq.n	800ae52 <__sflush_r+0x92>
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f7ff fc7f 	bl	800a750 <_free_r>
 800ae52:	2000      	movs	r0, #0
 800ae54:	6360      	str	r0, [r4, #52]	; 0x34
 800ae56:	e7c1      	b.n	800addc <__sflush_r+0x1c>
 800ae58:	6a21      	ldr	r1, [r4, #32]
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	47b0      	blx	r6
 800ae60:	1c41      	adds	r1, r0, #1
 800ae62:	d1c7      	bne.n	800adf4 <__sflush_r+0x34>
 800ae64:	682b      	ldr	r3, [r5, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d0c4      	beq.n	800adf4 <__sflush_r+0x34>
 800ae6a:	2b1d      	cmp	r3, #29
 800ae6c:	d001      	beq.n	800ae72 <__sflush_r+0xb2>
 800ae6e:	2b16      	cmp	r3, #22
 800ae70:	d101      	bne.n	800ae76 <__sflush_r+0xb6>
 800ae72:	602f      	str	r7, [r5, #0]
 800ae74:	e7b1      	b.n	800adda <__sflush_r+0x1a>
 800ae76:	89a3      	ldrh	r3, [r4, #12]
 800ae78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae7c:	81a3      	strh	r3, [r4, #12]
 800ae7e:	e7ad      	b.n	800addc <__sflush_r+0x1c>
 800ae80:	690f      	ldr	r7, [r1, #16]
 800ae82:	2f00      	cmp	r7, #0
 800ae84:	d0a9      	beq.n	800adda <__sflush_r+0x1a>
 800ae86:	0793      	lsls	r3, r2, #30
 800ae88:	680e      	ldr	r6, [r1, #0]
 800ae8a:	bf08      	it	eq
 800ae8c:	694b      	ldreq	r3, [r1, #20]
 800ae8e:	600f      	str	r7, [r1, #0]
 800ae90:	bf18      	it	ne
 800ae92:	2300      	movne	r3, #0
 800ae94:	eba6 0807 	sub.w	r8, r6, r7
 800ae98:	608b      	str	r3, [r1, #8]
 800ae9a:	f1b8 0f00 	cmp.w	r8, #0
 800ae9e:	dd9c      	ble.n	800adda <__sflush_r+0x1a>
 800aea0:	6a21      	ldr	r1, [r4, #32]
 800aea2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aea4:	4643      	mov	r3, r8
 800aea6:	463a      	mov	r2, r7
 800aea8:	4628      	mov	r0, r5
 800aeaa:	47b0      	blx	r6
 800aeac:	2800      	cmp	r0, #0
 800aeae:	dc06      	bgt.n	800aebe <__sflush_r+0xfe>
 800aeb0:	89a3      	ldrh	r3, [r4, #12]
 800aeb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeb6:	81a3      	strh	r3, [r4, #12]
 800aeb8:	f04f 30ff 	mov.w	r0, #4294967295
 800aebc:	e78e      	b.n	800addc <__sflush_r+0x1c>
 800aebe:	4407      	add	r7, r0
 800aec0:	eba8 0800 	sub.w	r8, r8, r0
 800aec4:	e7e9      	b.n	800ae9a <__sflush_r+0xda>
 800aec6:	bf00      	nop
 800aec8:	20400001 	.word	0x20400001

0800aecc <_fflush_r>:
 800aecc:	b538      	push	{r3, r4, r5, lr}
 800aece:	690b      	ldr	r3, [r1, #16]
 800aed0:	4605      	mov	r5, r0
 800aed2:	460c      	mov	r4, r1
 800aed4:	b913      	cbnz	r3, 800aedc <_fflush_r+0x10>
 800aed6:	2500      	movs	r5, #0
 800aed8:	4628      	mov	r0, r5
 800aeda:	bd38      	pop	{r3, r4, r5, pc}
 800aedc:	b118      	cbz	r0, 800aee6 <_fflush_r+0x1a>
 800aede:	6983      	ldr	r3, [r0, #24]
 800aee0:	b90b      	cbnz	r3, 800aee6 <_fflush_r+0x1a>
 800aee2:	f000 f887 	bl	800aff4 <__sinit>
 800aee6:	4b14      	ldr	r3, [pc, #80]	; (800af38 <_fflush_r+0x6c>)
 800aee8:	429c      	cmp	r4, r3
 800aeea:	d11b      	bne.n	800af24 <_fflush_r+0x58>
 800aeec:	686c      	ldr	r4, [r5, #4]
 800aeee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d0ef      	beq.n	800aed6 <_fflush_r+0xa>
 800aef6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aef8:	07d0      	lsls	r0, r2, #31
 800aefa:	d404      	bmi.n	800af06 <_fflush_r+0x3a>
 800aefc:	0599      	lsls	r1, r3, #22
 800aefe:	d402      	bmi.n	800af06 <_fflush_r+0x3a>
 800af00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af02:	f000 f915 	bl	800b130 <__retarget_lock_acquire_recursive>
 800af06:	4628      	mov	r0, r5
 800af08:	4621      	mov	r1, r4
 800af0a:	f7ff ff59 	bl	800adc0 <__sflush_r>
 800af0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af10:	07da      	lsls	r2, r3, #31
 800af12:	4605      	mov	r5, r0
 800af14:	d4e0      	bmi.n	800aed8 <_fflush_r+0xc>
 800af16:	89a3      	ldrh	r3, [r4, #12]
 800af18:	059b      	lsls	r3, r3, #22
 800af1a:	d4dd      	bmi.n	800aed8 <_fflush_r+0xc>
 800af1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af1e:	f000 f908 	bl	800b132 <__retarget_lock_release_recursive>
 800af22:	e7d9      	b.n	800aed8 <_fflush_r+0xc>
 800af24:	4b05      	ldr	r3, [pc, #20]	; (800af3c <_fflush_r+0x70>)
 800af26:	429c      	cmp	r4, r3
 800af28:	d101      	bne.n	800af2e <_fflush_r+0x62>
 800af2a:	68ac      	ldr	r4, [r5, #8]
 800af2c:	e7df      	b.n	800aeee <_fflush_r+0x22>
 800af2e:	4b04      	ldr	r3, [pc, #16]	; (800af40 <_fflush_r+0x74>)
 800af30:	429c      	cmp	r4, r3
 800af32:	bf08      	it	eq
 800af34:	68ec      	ldreq	r4, [r5, #12]
 800af36:	e7da      	b.n	800aeee <_fflush_r+0x22>
 800af38:	0800b7bc 	.word	0x0800b7bc
 800af3c:	0800b7dc 	.word	0x0800b7dc
 800af40:	0800b79c 	.word	0x0800b79c

0800af44 <std>:
 800af44:	2300      	movs	r3, #0
 800af46:	b510      	push	{r4, lr}
 800af48:	4604      	mov	r4, r0
 800af4a:	e9c0 3300 	strd	r3, r3, [r0]
 800af4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af52:	6083      	str	r3, [r0, #8]
 800af54:	8181      	strh	r1, [r0, #12]
 800af56:	6643      	str	r3, [r0, #100]	; 0x64
 800af58:	81c2      	strh	r2, [r0, #14]
 800af5a:	6183      	str	r3, [r0, #24]
 800af5c:	4619      	mov	r1, r3
 800af5e:	2208      	movs	r2, #8
 800af60:	305c      	adds	r0, #92	; 0x5c
 800af62:	f7fd fd61 	bl	8008a28 <memset>
 800af66:	4b05      	ldr	r3, [pc, #20]	; (800af7c <std+0x38>)
 800af68:	6263      	str	r3, [r4, #36]	; 0x24
 800af6a:	4b05      	ldr	r3, [pc, #20]	; (800af80 <std+0x3c>)
 800af6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800af6e:	4b05      	ldr	r3, [pc, #20]	; (800af84 <std+0x40>)
 800af70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af72:	4b05      	ldr	r3, [pc, #20]	; (800af88 <std+0x44>)
 800af74:	6224      	str	r4, [r4, #32]
 800af76:	6323      	str	r3, [r4, #48]	; 0x30
 800af78:	bd10      	pop	{r4, pc}
 800af7a:	bf00      	nop
 800af7c:	0800b285 	.word	0x0800b285
 800af80:	0800b2a7 	.word	0x0800b2a7
 800af84:	0800b2df 	.word	0x0800b2df
 800af88:	0800b303 	.word	0x0800b303

0800af8c <_cleanup_r>:
 800af8c:	4901      	ldr	r1, [pc, #4]	; (800af94 <_cleanup_r+0x8>)
 800af8e:	f000 b8af 	b.w	800b0f0 <_fwalk_reent>
 800af92:	bf00      	nop
 800af94:	0800aecd 	.word	0x0800aecd

0800af98 <__sfmoreglue>:
 800af98:	b570      	push	{r4, r5, r6, lr}
 800af9a:	1e4a      	subs	r2, r1, #1
 800af9c:	2568      	movs	r5, #104	; 0x68
 800af9e:	4355      	muls	r5, r2
 800afa0:	460e      	mov	r6, r1
 800afa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afa6:	f7ff fc23 	bl	800a7f0 <_malloc_r>
 800afaa:	4604      	mov	r4, r0
 800afac:	b140      	cbz	r0, 800afc0 <__sfmoreglue+0x28>
 800afae:	2100      	movs	r1, #0
 800afb0:	e9c0 1600 	strd	r1, r6, [r0]
 800afb4:	300c      	adds	r0, #12
 800afb6:	60a0      	str	r0, [r4, #8]
 800afb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800afbc:	f7fd fd34 	bl	8008a28 <memset>
 800afc0:	4620      	mov	r0, r4
 800afc2:	bd70      	pop	{r4, r5, r6, pc}

0800afc4 <__sfp_lock_acquire>:
 800afc4:	4801      	ldr	r0, [pc, #4]	; (800afcc <__sfp_lock_acquire+0x8>)
 800afc6:	f000 b8b3 	b.w	800b130 <__retarget_lock_acquire_recursive>
 800afca:	bf00      	nop
 800afcc:	20000518 	.word	0x20000518

0800afd0 <__sfp_lock_release>:
 800afd0:	4801      	ldr	r0, [pc, #4]	; (800afd8 <__sfp_lock_release+0x8>)
 800afd2:	f000 b8ae 	b.w	800b132 <__retarget_lock_release_recursive>
 800afd6:	bf00      	nop
 800afd8:	20000518 	.word	0x20000518

0800afdc <__sinit_lock_acquire>:
 800afdc:	4801      	ldr	r0, [pc, #4]	; (800afe4 <__sinit_lock_acquire+0x8>)
 800afde:	f000 b8a7 	b.w	800b130 <__retarget_lock_acquire_recursive>
 800afe2:	bf00      	nop
 800afe4:	20000513 	.word	0x20000513

0800afe8 <__sinit_lock_release>:
 800afe8:	4801      	ldr	r0, [pc, #4]	; (800aff0 <__sinit_lock_release+0x8>)
 800afea:	f000 b8a2 	b.w	800b132 <__retarget_lock_release_recursive>
 800afee:	bf00      	nop
 800aff0:	20000513 	.word	0x20000513

0800aff4 <__sinit>:
 800aff4:	b510      	push	{r4, lr}
 800aff6:	4604      	mov	r4, r0
 800aff8:	f7ff fff0 	bl	800afdc <__sinit_lock_acquire>
 800affc:	69a3      	ldr	r3, [r4, #24]
 800affe:	b11b      	cbz	r3, 800b008 <__sinit+0x14>
 800b000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b004:	f7ff bff0 	b.w	800afe8 <__sinit_lock_release>
 800b008:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b00c:	6523      	str	r3, [r4, #80]	; 0x50
 800b00e:	4b13      	ldr	r3, [pc, #76]	; (800b05c <__sinit+0x68>)
 800b010:	4a13      	ldr	r2, [pc, #76]	; (800b060 <__sinit+0x6c>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	62a2      	str	r2, [r4, #40]	; 0x28
 800b016:	42a3      	cmp	r3, r4
 800b018:	bf04      	itt	eq
 800b01a:	2301      	moveq	r3, #1
 800b01c:	61a3      	streq	r3, [r4, #24]
 800b01e:	4620      	mov	r0, r4
 800b020:	f000 f820 	bl	800b064 <__sfp>
 800b024:	6060      	str	r0, [r4, #4]
 800b026:	4620      	mov	r0, r4
 800b028:	f000 f81c 	bl	800b064 <__sfp>
 800b02c:	60a0      	str	r0, [r4, #8]
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 f818 	bl	800b064 <__sfp>
 800b034:	2200      	movs	r2, #0
 800b036:	60e0      	str	r0, [r4, #12]
 800b038:	2104      	movs	r1, #4
 800b03a:	6860      	ldr	r0, [r4, #4]
 800b03c:	f7ff ff82 	bl	800af44 <std>
 800b040:	68a0      	ldr	r0, [r4, #8]
 800b042:	2201      	movs	r2, #1
 800b044:	2109      	movs	r1, #9
 800b046:	f7ff ff7d 	bl	800af44 <std>
 800b04a:	68e0      	ldr	r0, [r4, #12]
 800b04c:	2202      	movs	r2, #2
 800b04e:	2112      	movs	r1, #18
 800b050:	f7ff ff78 	bl	800af44 <std>
 800b054:	2301      	movs	r3, #1
 800b056:	61a3      	str	r3, [r4, #24]
 800b058:	e7d2      	b.n	800b000 <__sinit+0xc>
 800b05a:	bf00      	nop
 800b05c:	0800b418 	.word	0x0800b418
 800b060:	0800af8d 	.word	0x0800af8d

0800b064 <__sfp>:
 800b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b066:	4607      	mov	r7, r0
 800b068:	f7ff ffac 	bl	800afc4 <__sfp_lock_acquire>
 800b06c:	4b1e      	ldr	r3, [pc, #120]	; (800b0e8 <__sfp+0x84>)
 800b06e:	681e      	ldr	r6, [r3, #0]
 800b070:	69b3      	ldr	r3, [r6, #24]
 800b072:	b913      	cbnz	r3, 800b07a <__sfp+0x16>
 800b074:	4630      	mov	r0, r6
 800b076:	f7ff ffbd 	bl	800aff4 <__sinit>
 800b07a:	3648      	adds	r6, #72	; 0x48
 800b07c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b080:	3b01      	subs	r3, #1
 800b082:	d503      	bpl.n	800b08c <__sfp+0x28>
 800b084:	6833      	ldr	r3, [r6, #0]
 800b086:	b30b      	cbz	r3, 800b0cc <__sfp+0x68>
 800b088:	6836      	ldr	r6, [r6, #0]
 800b08a:	e7f7      	b.n	800b07c <__sfp+0x18>
 800b08c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b090:	b9d5      	cbnz	r5, 800b0c8 <__sfp+0x64>
 800b092:	4b16      	ldr	r3, [pc, #88]	; (800b0ec <__sfp+0x88>)
 800b094:	60e3      	str	r3, [r4, #12]
 800b096:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b09a:	6665      	str	r5, [r4, #100]	; 0x64
 800b09c:	f000 f847 	bl	800b12e <__retarget_lock_init_recursive>
 800b0a0:	f7ff ff96 	bl	800afd0 <__sfp_lock_release>
 800b0a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0ac:	6025      	str	r5, [r4, #0]
 800b0ae:	61a5      	str	r5, [r4, #24]
 800b0b0:	2208      	movs	r2, #8
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0b8:	f7fd fcb6 	bl	8008a28 <memset>
 800b0bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b0c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0c8:	3468      	adds	r4, #104	; 0x68
 800b0ca:	e7d9      	b.n	800b080 <__sfp+0x1c>
 800b0cc:	2104      	movs	r1, #4
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	f7ff ff62 	bl	800af98 <__sfmoreglue>
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	6030      	str	r0, [r6, #0]
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d1d5      	bne.n	800b088 <__sfp+0x24>
 800b0dc:	f7ff ff78 	bl	800afd0 <__sfp_lock_release>
 800b0e0:	230c      	movs	r3, #12
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	e7ee      	b.n	800b0c4 <__sfp+0x60>
 800b0e6:	bf00      	nop
 800b0e8:	0800b418 	.word	0x0800b418
 800b0ec:	ffff0001 	.word	0xffff0001

0800b0f0 <_fwalk_reent>:
 800b0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f4:	4606      	mov	r6, r0
 800b0f6:	4688      	mov	r8, r1
 800b0f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0fc:	2700      	movs	r7, #0
 800b0fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b102:	f1b9 0901 	subs.w	r9, r9, #1
 800b106:	d505      	bpl.n	800b114 <_fwalk_reent+0x24>
 800b108:	6824      	ldr	r4, [r4, #0]
 800b10a:	2c00      	cmp	r4, #0
 800b10c:	d1f7      	bne.n	800b0fe <_fwalk_reent+0xe>
 800b10e:	4638      	mov	r0, r7
 800b110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b114:	89ab      	ldrh	r3, [r5, #12]
 800b116:	2b01      	cmp	r3, #1
 800b118:	d907      	bls.n	800b12a <_fwalk_reent+0x3a>
 800b11a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b11e:	3301      	adds	r3, #1
 800b120:	d003      	beq.n	800b12a <_fwalk_reent+0x3a>
 800b122:	4629      	mov	r1, r5
 800b124:	4630      	mov	r0, r6
 800b126:	47c0      	blx	r8
 800b128:	4307      	orrs	r7, r0
 800b12a:	3568      	adds	r5, #104	; 0x68
 800b12c:	e7e9      	b.n	800b102 <_fwalk_reent+0x12>

0800b12e <__retarget_lock_init_recursive>:
 800b12e:	4770      	bx	lr

0800b130 <__retarget_lock_acquire_recursive>:
 800b130:	4770      	bx	lr

0800b132 <__retarget_lock_release_recursive>:
 800b132:	4770      	bx	lr

0800b134 <__swhatbuf_r>:
 800b134:	b570      	push	{r4, r5, r6, lr}
 800b136:	460e      	mov	r6, r1
 800b138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b13c:	2900      	cmp	r1, #0
 800b13e:	b096      	sub	sp, #88	; 0x58
 800b140:	4614      	mov	r4, r2
 800b142:	461d      	mov	r5, r3
 800b144:	da07      	bge.n	800b156 <__swhatbuf_r+0x22>
 800b146:	2300      	movs	r3, #0
 800b148:	602b      	str	r3, [r5, #0]
 800b14a:	89b3      	ldrh	r3, [r6, #12]
 800b14c:	061a      	lsls	r2, r3, #24
 800b14e:	d410      	bmi.n	800b172 <__swhatbuf_r+0x3e>
 800b150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b154:	e00e      	b.n	800b174 <__swhatbuf_r+0x40>
 800b156:	466a      	mov	r2, sp
 800b158:	f000 f8fa 	bl	800b350 <_fstat_r>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	dbf2      	blt.n	800b146 <__swhatbuf_r+0x12>
 800b160:	9a01      	ldr	r2, [sp, #4]
 800b162:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b166:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b16a:	425a      	negs	r2, r3
 800b16c:	415a      	adcs	r2, r3
 800b16e:	602a      	str	r2, [r5, #0]
 800b170:	e7ee      	b.n	800b150 <__swhatbuf_r+0x1c>
 800b172:	2340      	movs	r3, #64	; 0x40
 800b174:	2000      	movs	r0, #0
 800b176:	6023      	str	r3, [r4, #0]
 800b178:	b016      	add	sp, #88	; 0x58
 800b17a:	bd70      	pop	{r4, r5, r6, pc}

0800b17c <__smakebuf_r>:
 800b17c:	898b      	ldrh	r3, [r1, #12]
 800b17e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b180:	079d      	lsls	r5, r3, #30
 800b182:	4606      	mov	r6, r0
 800b184:	460c      	mov	r4, r1
 800b186:	d507      	bpl.n	800b198 <__smakebuf_r+0x1c>
 800b188:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b18c:	6023      	str	r3, [r4, #0]
 800b18e:	6123      	str	r3, [r4, #16]
 800b190:	2301      	movs	r3, #1
 800b192:	6163      	str	r3, [r4, #20]
 800b194:	b002      	add	sp, #8
 800b196:	bd70      	pop	{r4, r5, r6, pc}
 800b198:	ab01      	add	r3, sp, #4
 800b19a:	466a      	mov	r2, sp
 800b19c:	f7ff ffca 	bl	800b134 <__swhatbuf_r>
 800b1a0:	9900      	ldr	r1, [sp, #0]
 800b1a2:	4605      	mov	r5, r0
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f7ff fb23 	bl	800a7f0 <_malloc_r>
 800b1aa:	b948      	cbnz	r0, 800b1c0 <__smakebuf_r+0x44>
 800b1ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1b0:	059a      	lsls	r2, r3, #22
 800b1b2:	d4ef      	bmi.n	800b194 <__smakebuf_r+0x18>
 800b1b4:	f023 0303 	bic.w	r3, r3, #3
 800b1b8:	f043 0302 	orr.w	r3, r3, #2
 800b1bc:	81a3      	strh	r3, [r4, #12]
 800b1be:	e7e3      	b.n	800b188 <__smakebuf_r+0xc>
 800b1c0:	4b0d      	ldr	r3, [pc, #52]	; (800b1f8 <__smakebuf_r+0x7c>)
 800b1c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b1c4:	89a3      	ldrh	r3, [r4, #12]
 800b1c6:	6020      	str	r0, [r4, #0]
 800b1c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1cc:	81a3      	strh	r3, [r4, #12]
 800b1ce:	9b00      	ldr	r3, [sp, #0]
 800b1d0:	6163      	str	r3, [r4, #20]
 800b1d2:	9b01      	ldr	r3, [sp, #4]
 800b1d4:	6120      	str	r0, [r4, #16]
 800b1d6:	b15b      	cbz	r3, 800b1f0 <__smakebuf_r+0x74>
 800b1d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1dc:	4630      	mov	r0, r6
 800b1de:	f000 f8c9 	bl	800b374 <_isatty_r>
 800b1e2:	b128      	cbz	r0, 800b1f0 <__smakebuf_r+0x74>
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	f023 0303 	bic.w	r3, r3, #3
 800b1ea:	f043 0301 	orr.w	r3, r3, #1
 800b1ee:	81a3      	strh	r3, [r4, #12]
 800b1f0:	89a0      	ldrh	r0, [r4, #12]
 800b1f2:	4305      	orrs	r5, r0
 800b1f4:	81a5      	strh	r5, [r4, #12]
 800b1f6:	e7cd      	b.n	800b194 <__smakebuf_r+0x18>
 800b1f8:	0800af8d 	.word	0x0800af8d

0800b1fc <_raise_r>:
 800b1fc:	291f      	cmp	r1, #31
 800b1fe:	b538      	push	{r3, r4, r5, lr}
 800b200:	4604      	mov	r4, r0
 800b202:	460d      	mov	r5, r1
 800b204:	d904      	bls.n	800b210 <_raise_r+0x14>
 800b206:	2316      	movs	r3, #22
 800b208:	6003      	str	r3, [r0, #0]
 800b20a:	f04f 30ff 	mov.w	r0, #4294967295
 800b20e:	bd38      	pop	{r3, r4, r5, pc}
 800b210:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b212:	b112      	cbz	r2, 800b21a <_raise_r+0x1e>
 800b214:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b218:	b94b      	cbnz	r3, 800b22e <_raise_r+0x32>
 800b21a:	4620      	mov	r0, r4
 800b21c:	f000 f830 	bl	800b280 <_getpid_r>
 800b220:	462a      	mov	r2, r5
 800b222:	4601      	mov	r1, r0
 800b224:	4620      	mov	r0, r4
 800b226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b22a:	f000 b817 	b.w	800b25c <_kill_r>
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d00a      	beq.n	800b248 <_raise_r+0x4c>
 800b232:	1c59      	adds	r1, r3, #1
 800b234:	d103      	bne.n	800b23e <_raise_r+0x42>
 800b236:	2316      	movs	r3, #22
 800b238:	6003      	str	r3, [r0, #0]
 800b23a:	2001      	movs	r0, #1
 800b23c:	e7e7      	b.n	800b20e <_raise_r+0x12>
 800b23e:	2400      	movs	r4, #0
 800b240:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b244:	4628      	mov	r0, r5
 800b246:	4798      	blx	r3
 800b248:	2000      	movs	r0, #0
 800b24a:	e7e0      	b.n	800b20e <_raise_r+0x12>

0800b24c <raise>:
 800b24c:	4b02      	ldr	r3, [pc, #8]	; (800b258 <raise+0xc>)
 800b24e:	4601      	mov	r1, r0
 800b250:	6818      	ldr	r0, [r3, #0]
 800b252:	f7ff bfd3 	b.w	800b1fc <_raise_r>
 800b256:	bf00      	nop
 800b258:	20000010 	.word	0x20000010

0800b25c <_kill_r>:
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	4d07      	ldr	r5, [pc, #28]	; (800b27c <_kill_r+0x20>)
 800b260:	2300      	movs	r3, #0
 800b262:	4604      	mov	r4, r0
 800b264:	4608      	mov	r0, r1
 800b266:	4611      	mov	r1, r2
 800b268:	602b      	str	r3, [r5, #0]
 800b26a:	f7f7 fc5f 	bl	8002b2c <_kill>
 800b26e:	1c43      	adds	r3, r0, #1
 800b270:	d102      	bne.n	800b278 <_kill_r+0x1c>
 800b272:	682b      	ldr	r3, [r5, #0]
 800b274:	b103      	cbz	r3, 800b278 <_kill_r+0x1c>
 800b276:	6023      	str	r3, [r4, #0]
 800b278:	bd38      	pop	{r3, r4, r5, pc}
 800b27a:	bf00      	nop
 800b27c:	2000050c 	.word	0x2000050c

0800b280 <_getpid_r>:
 800b280:	f7f7 bc4c 	b.w	8002b1c <_getpid>

0800b284 <__sread>:
 800b284:	b510      	push	{r4, lr}
 800b286:	460c      	mov	r4, r1
 800b288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b28c:	f000 f894 	bl	800b3b8 <_read_r>
 800b290:	2800      	cmp	r0, #0
 800b292:	bfab      	itete	ge
 800b294:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b296:	89a3      	ldrhlt	r3, [r4, #12]
 800b298:	181b      	addge	r3, r3, r0
 800b29a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b29e:	bfac      	ite	ge
 800b2a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2a2:	81a3      	strhlt	r3, [r4, #12]
 800b2a4:	bd10      	pop	{r4, pc}

0800b2a6 <__swrite>:
 800b2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2aa:	461f      	mov	r7, r3
 800b2ac:	898b      	ldrh	r3, [r1, #12]
 800b2ae:	05db      	lsls	r3, r3, #23
 800b2b0:	4605      	mov	r5, r0
 800b2b2:	460c      	mov	r4, r1
 800b2b4:	4616      	mov	r6, r2
 800b2b6:	d505      	bpl.n	800b2c4 <__swrite+0x1e>
 800b2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2bc:	2302      	movs	r3, #2
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f000 f868 	bl	800b394 <_lseek_r>
 800b2c4:	89a3      	ldrh	r3, [r4, #12]
 800b2c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2ce:	81a3      	strh	r3, [r4, #12]
 800b2d0:	4632      	mov	r2, r6
 800b2d2:	463b      	mov	r3, r7
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2da:	f000 b817 	b.w	800b30c <_write_r>

0800b2de <__sseek>:
 800b2de:	b510      	push	{r4, lr}
 800b2e0:	460c      	mov	r4, r1
 800b2e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2e6:	f000 f855 	bl	800b394 <_lseek_r>
 800b2ea:	1c43      	adds	r3, r0, #1
 800b2ec:	89a3      	ldrh	r3, [r4, #12]
 800b2ee:	bf15      	itete	ne
 800b2f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2fa:	81a3      	strheq	r3, [r4, #12]
 800b2fc:	bf18      	it	ne
 800b2fe:	81a3      	strhne	r3, [r4, #12]
 800b300:	bd10      	pop	{r4, pc}

0800b302 <__sclose>:
 800b302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b306:	f000 b813 	b.w	800b330 <_close_r>
	...

0800b30c <_write_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4d07      	ldr	r5, [pc, #28]	; (800b32c <_write_r+0x20>)
 800b310:	4604      	mov	r4, r0
 800b312:	4608      	mov	r0, r1
 800b314:	4611      	mov	r1, r2
 800b316:	2200      	movs	r2, #0
 800b318:	602a      	str	r2, [r5, #0]
 800b31a:	461a      	mov	r2, r3
 800b31c:	f7f7 fc3d 	bl	8002b9a <_write>
 800b320:	1c43      	adds	r3, r0, #1
 800b322:	d102      	bne.n	800b32a <_write_r+0x1e>
 800b324:	682b      	ldr	r3, [r5, #0]
 800b326:	b103      	cbz	r3, 800b32a <_write_r+0x1e>
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	bd38      	pop	{r3, r4, r5, pc}
 800b32c:	2000050c 	.word	0x2000050c

0800b330 <_close_r>:
 800b330:	b538      	push	{r3, r4, r5, lr}
 800b332:	4d06      	ldr	r5, [pc, #24]	; (800b34c <_close_r+0x1c>)
 800b334:	2300      	movs	r3, #0
 800b336:	4604      	mov	r4, r0
 800b338:	4608      	mov	r0, r1
 800b33a:	602b      	str	r3, [r5, #0]
 800b33c:	f7f7 fc49 	bl	8002bd2 <_close>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d102      	bne.n	800b34a <_close_r+0x1a>
 800b344:	682b      	ldr	r3, [r5, #0]
 800b346:	b103      	cbz	r3, 800b34a <_close_r+0x1a>
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	2000050c 	.word	0x2000050c

0800b350 <_fstat_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4d07      	ldr	r5, [pc, #28]	; (800b370 <_fstat_r+0x20>)
 800b354:	2300      	movs	r3, #0
 800b356:	4604      	mov	r4, r0
 800b358:	4608      	mov	r0, r1
 800b35a:	4611      	mov	r1, r2
 800b35c:	602b      	str	r3, [r5, #0]
 800b35e:	f7f7 fc44 	bl	8002bea <_fstat>
 800b362:	1c43      	adds	r3, r0, #1
 800b364:	d102      	bne.n	800b36c <_fstat_r+0x1c>
 800b366:	682b      	ldr	r3, [r5, #0]
 800b368:	b103      	cbz	r3, 800b36c <_fstat_r+0x1c>
 800b36a:	6023      	str	r3, [r4, #0]
 800b36c:	bd38      	pop	{r3, r4, r5, pc}
 800b36e:	bf00      	nop
 800b370:	2000050c 	.word	0x2000050c

0800b374 <_isatty_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	4d06      	ldr	r5, [pc, #24]	; (800b390 <_isatty_r+0x1c>)
 800b378:	2300      	movs	r3, #0
 800b37a:	4604      	mov	r4, r0
 800b37c:	4608      	mov	r0, r1
 800b37e:	602b      	str	r3, [r5, #0]
 800b380:	f7f7 fc43 	bl	8002c0a <_isatty>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	d102      	bne.n	800b38e <_isatty_r+0x1a>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	b103      	cbz	r3, 800b38e <_isatty_r+0x1a>
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	bd38      	pop	{r3, r4, r5, pc}
 800b390:	2000050c 	.word	0x2000050c

0800b394 <_lseek_r>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	4d07      	ldr	r5, [pc, #28]	; (800b3b4 <_lseek_r+0x20>)
 800b398:	4604      	mov	r4, r0
 800b39a:	4608      	mov	r0, r1
 800b39c:	4611      	mov	r1, r2
 800b39e:	2200      	movs	r2, #0
 800b3a0:	602a      	str	r2, [r5, #0]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	f7f7 fc3c 	bl	8002c20 <_lseek>
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	d102      	bne.n	800b3b2 <_lseek_r+0x1e>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	b103      	cbz	r3, 800b3b2 <_lseek_r+0x1e>
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	2000050c 	.word	0x2000050c

0800b3b8 <_read_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	4d07      	ldr	r5, [pc, #28]	; (800b3d8 <_read_r+0x20>)
 800b3bc:	4604      	mov	r4, r0
 800b3be:	4608      	mov	r0, r1
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	602a      	str	r2, [r5, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	f7f7 fbca 	bl	8002b60 <_read>
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	d102      	bne.n	800b3d6 <_read_r+0x1e>
 800b3d0:	682b      	ldr	r3, [r5, #0]
 800b3d2:	b103      	cbz	r3, 800b3d6 <_read_r+0x1e>
 800b3d4:	6023      	str	r3, [r4, #0]
 800b3d6:	bd38      	pop	{r3, r4, r5, pc}
 800b3d8:	2000050c 	.word	0x2000050c

0800b3dc <_init>:
 800b3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3de:	bf00      	nop
 800b3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3e2:	bc08      	pop	{r3}
 800b3e4:	469e      	mov	lr, r3
 800b3e6:	4770      	bx	lr

0800b3e8 <_fini>:
 800b3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ea:	bf00      	nop
 800b3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ee:	bc08      	pop	{r3}
 800b3f0:	469e      	mov	lr, r3
 800b3f2:	4770      	bx	lr
